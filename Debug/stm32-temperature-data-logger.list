
stm32-temperature-data-logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b07c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800b190  0800b190  0001b190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6d4  0800b6d4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b6d4  0800b6d4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b6d4  0800b6d4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6d8  0800b6d8  0001b6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001f0  0800b8c8  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800b8c8  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc72  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e33  00000000  00000000  0002feca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00032d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b95  00000000  00000000  00033c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a998  00000000  00000000  000347c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001454c  00000000  00000000  0004f15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ee06  00000000  00000000  000636a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f70  00000000  00000000  000f24b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f7420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b174 	.word	0x0800b174

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b174 	.word	0x0800b174

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <NTC_THERMISTOR_Initialize>:
#include <math.h>
#include <stdint.h>

double R2, log_R2, T, raw;

void NTC_THERMISTOR_Initialize(NTC_Thermistor *thermistor, ADC_HandleTypeDef* adcHandle){
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]

  /* set sensor ADC handle */
  thermistor->adcHandle = adcHandle;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	601a      	str	r2, [r3, #0]

  /* initialize temperature to 0 */
  thermistor->tempC = 0.0f;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]

}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	0000      	movs	r0, r0
 8000b4c:	0000      	movs	r0, r0
	...

08000b50 <NTC_THERMISTOR_ReadTemperature>:

void NTC_THERMISTOR_ReadTemperature(NTC_Thermistor *thermistor){
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  HAL_ADC_Start(thermistor->adcHandle);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 ff13 	bl	8001988 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(thermistor->adcHandle, 100); /* wait for 10 ms before next intruction */
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2164      	movs	r1, #100	; 0x64
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 ffbb 	bl	8001ae4 <HAL_ADC_PollForConversion>

  raw = HAL_ADC_GetValue(thermistor->adcHandle);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 f8bc 	bl	8001cf0 <HAL_ADC_GetValue>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fc32 	bl	80003e4 <__aeabi_ui2d>
 8000b80:	4602      	mov	r2, r0
 8000b82:	460b      	mov	r3, r1
 8000b84:	4950      	ldr	r1, [pc, #320]	; (8000cc8 <NTC_THERMISTOR_ReadTemperature+0x178>)
 8000b86:	e9c1 2300 	strd	r2, r3, [r1]

  /* convert rawTemp to temperature in deg C */
  R2 = R1 * ( (4095 / raw  ) - 1.0);
 8000b8a:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <NTC_THERMISTOR_ReadTemperature+0x178>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	a141      	add	r1, pc, #260	; (adr r1, 8000c98 <NTC_THERMISTOR_ReadTemperature+0x148>)
 8000b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b96:	f7ff fdc9 	bl	800072c <__aeabi_ddiv>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <NTC_THERMISTOR_ReadTemperature+0x17c>)
 8000ba8:	f7ff fade 	bl	8000168 <__aeabi_dsub>
 8000bac:	4602      	mov	r2, r0
 8000bae:	460b      	mov	r3, r1
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	a33a      	add	r3, pc, #232	; (adr r3, 8000ca0 <NTC_THERMISTOR_ReadTemperature+0x150>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fc8d 	bl	80004d8 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4943      	ldr	r1, [pc, #268]	; (8000cd0 <NTC_THERMISTOR_ReadTemperature+0x180>)
 8000bc4:	e9c1 2300 	strd	r2, r3, [r1]

  log_R2 = log(R2);
 8000bc8:	4b41      	ldr	r3, [pc, #260]	; (8000cd0 <NTC_THERMISTOR_ReadTemperature+0x180>)
 8000bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f00a f8e3 	bl	800ad9c <log>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
 8000bda:	493e      	ldr	r1, [pc, #248]	; (8000cd4 <NTC_THERMISTOR_ReadTemperature+0x184>)
 8000bdc:	e9c1 2300 	strd	r2, r3, [r1]

  T = 1 / (A + B * log_R2 + C * log_R2 * log_R2 * log_R2);
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <NTC_THERMISTOR_ReadTemperature+0x184>)
 8000be2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000be6:	a330      	add	r3, pc, #192	; (adr r3, 8000ca8 <NTC_THERMISTOR_ReadTemperature+0x158>)
 8000be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bec:	f7ff fc74 	bl	80004d8 <__aeabi_dmul>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	a32d      	add	r3, pc, #180	; (adr r3, 8000cb0 <NTC_THERMISTOR_ReadTemperature+0x160>)
 8000bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bfe:	f7ff fab5 	bl	800016c <__adddf3>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	4614      	mov	r4, r2
 8000c08:	461d      	mov	r5, r3
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <NTC_THERMISTOR_ReadTemperature+0x184>)
 8000c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c10:	a329      	add	r3, pc, #164	; (adr r3, 8000cb8 <NTC_THERMISTOR_ReadTemperature+0x168>)
 8000c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c16:	f7ff fc5f 	bl	80004d8 <__aeabi_dmul>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	4610      	mov	r0, r2
 8000c20:	4619      	mov	r1, r3
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <NTC_THERMISTOR_ReadTemperature+0x184>)
 8000c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c28:	f7ff fc56 	bl	80004d8 <__aeabi_dmul>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	460b      	mov	r3, r1
 8000c30:	4610      	mov	r0, r2
 8000c32:	4619      	mov	r1, r3
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <NTC_THERMISTOR_ReadTemperature+0x184>)
 8000c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3a:	f7ff fc4d 	bl	80004d8 <__aeabi_dmul>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	460b      	mov	r3, r1
 8000c42:	4620      	mov	r0, r4
 8000c44:	4629      	mov	r1, r5
 8000c46:	f7ff fa91 	bl	800016c <__adddf3>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	491e      	ldr	r1, [pc, #120]	; (8000ccc <NTC_THERMISTOR_ReadTemperature+0x17c>)
 8000c54:	f7ff fd6a 	bl	800072c <__aeabi_ddiv>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	491e      	ldr	r1, [pc, #120]	; (8000cd8 <NTC_THERMISTOR_ReadTemperature+0x188>)
 8000c5e:	e9c1 2300 	strd	r2, r3, [r1]

  T = T - 273.15;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <NTC_THERMISTOR_ReadTemperature+0x188>)
 8000c64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c68:	a315      	add	r3, pc, #84	; (adr r3, 8000cc0 <NTC_THERMISTOR_ReadTemperature+0x170>)
 8000c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6e:	f7ff fa7b 	bl	8000168 <__aeabi_dsub>
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <NTC_THERMISTOR_ReadTemperature+0x188>)
 8000c78:	e9c1 2300 	strd	r2, r3, [r1]

  thermistor->tempC = T;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <NTC_THERMISTOR_ReadTemperature+0x188>)
 8000c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f7ff feff 	bl	8000a88 <__aeabi_d2f>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	605a      	str	r2, [r3, #4]

}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bdb0      	pop	{r4, r5, r7, pc}
 8000c98:	00000000 	.word	0x00000000
 8000c9c:	40affe00 	.word	0x40affe00
 8000ca0:	00000000 	.word	0x00000000
 8000ca4:	40c38800 	.word	0x40c38800
 8000ca8:	8d174784 	.word	0x8d174784
 8000cac:	3f2ec39f 	.word	0x3f2ec39f
 8000cb0:	2eba5ae1 	.word	0x2eba5ae1
 8000cb4:	3f526fe3 	.word	0x3f526fe3
 8000cb8:	6ee122e7 	.word	0x6ee122e7
 8000cbc:	3e76feb7 	.word	0x3e76feb7
 8000cc0:	66666666 	.word	0x66666666
 8000cc4:	40711266 	.word	0x40711266
 8000cc8:	20000228 	.word	0x20000228
 8000ccc:	3ff00000 	.word	0x3ff00000
 8000cd0:	20000210 	.word	0x20000210
 8000cd4:	20000218 	.word	0x20000218
 8000cd8:	20000220 	.word	0x20000220

08000cdc <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char* fmt, ...){
 8000cdc:	b40f      	push	{r0, r1, r2, r3}
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <myprintf+0x44>)
 8000cf4:	f007 ff46 	bl	8008b84 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <myprintf+0x44>)
 8000cfa:	f7ff fa29 	bl	8000150 <strlen>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, -1 );
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	4905      	ldr	r1, [pc, #20]	; (8000d20 <myprintf+0x44>)
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <myprintf+0x48>)
 8000d0e:	f003 fc45 	bl	800459c <HAL_UART_Transmit>

}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d1c:	b004      	add	sp, #16
 8000d1e:	4770      	bx	lr
 8000d20:	2000035c 	.word	0x2000035c
 8000d24:	200002d4 	.word	0x200002d4

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d2c:	f2ad 4dbc 	subw	sp, sp, #1212	; 0x4bc
 8000d30:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d32:	f000 fccb 	bl	80016cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d36:	f000 f8e1 	bl	8000efc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  NTC_THERMISTOR_Initialize(&thermistor, &hadc1);
 8000d3a:	495f      	ldr	r1, [pc, #380]	; (8000eb8 <main+0x190>)
 8000d3c:	485f      	ldr	r0, [pc, #380]	; (8000ebc <main+0x194>)
 8000d3e:	f7ff fef3 	bl	8000b28 <NTC_THERMISTOR_Initialize>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f000 fa33 	bl	80011ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d46:	f000 f92f 	bl	8000fa8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 fa05 	bl	8001158 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000d4e:	f000 f9cd 	bl	80010ec <MX_SPI1_Init>
  MX_FATFS_Init();
 8000d52:	f003 fda3 	bl	800489c <MX_FATFS_Init>
  MX_RTC_Init();
 8000d56:	f000 f965 	bl	8001024 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5e:	f000 fd17 	bl	8001790 <HAL_Delay>
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations
  BYTE readBuf[50];

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000d62:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8000d66:	2201      	movs	r2, #1
 8000d68:	4955      	ldr	r1, [pc, #340]	; (8000ec0 <main+0x198>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f006 f966 	bl	800703c <f_mount>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 8000d76:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d006      	beq.n	8000d8c <main+0x64>
	myprintf("[-]f_mount error (%i)\r\n", fres);
 8000d7e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000d82:	4619      	mov	r1, r3
 8000d84:	484f      	ldr	r0, [pc, #316]	; (8000ec4 <main+0x19c>)
 8000d86:	f7ff ffa9 	bl	8000cdc <myprintf>
	while(1);
 8000d8a:	e7fe      	b.n	8000d8a <main+0x62>
  } else {
	  myprintf("[+] SD Card Init OK! \r\n");
 8000d8c:	484e      	ldr	r0, [pc, #312]	; (8000ec8 <main+0x1a0>)
 8000d8e:	f7ff ffa5 	bl	8000cdc <myprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	/* get the current time */
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d92:	2200      	movs	r2, #0
 8000d94:	494d      	ldr	r1, [pc, #308]	; (8000ecc <main+0x1a4>)
 8000d96:	484e      	ldr	r0, [pc, #312]	; (8000ed0 <main+0x1a8>)
 8000d98:	f002 fa76 	bl	8003288 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	494d      	ldr	r1, [pc, #308]	; (8000ed4 <main+0x1ac>)
 8000da0:	484b      	ldr	r0, [pc, #300]	; (8000ed0 <main+0x1a8>)
 8000da2:	f002 fbff 	bl	80035a4 <HAL_RTC_GetDate>
//	sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
//	sprintf(t,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);

	/* Read temperature from thermistor */
	NTC_THERMISTOR_ReadTemperature(&thermistor);
 8000da6:	4845      	ldr	r0, [pc, #276]	; (8000ebc <main+0x194>)
 8000da8:	f7ff fed2 	bl	8000b50 <NTC_THERMISTOR_ReadTemperature>

	/* store the value read from NTC thermistor into data array */
	temp_value = thermistor.tempC;
 8000dac:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <main+0x194>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4a49      	ldr	r2, [pc, #292]	; (8000ed8 <main+0x1b0>)
 8000db2:	6013      	str	r3, [r2, #0]
	sprintf(data, "%02d.%02d.%02d, %02d.%02d.%02d, %.2f\r\n", sDate.Date,sDate.Month,sDate.Year, sTime.Hours,sTime.Minutes,sTime.Seconds, temp_value);
 8000db4:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <main+0x1ac>)
 8000db6:	789b      	ldrb	r3, [r3, #2]
 8000db8:	4698      	mov	r8, r3
 8000dba:	4b46      	ldr	r3, [pc, #280]	; (8000ed4 <main+0x1ac>)
 8000dbc:	785b      	ldrb	r3, [r3, #1]
 8000dbe:	4699      	mov	r9, r3
 8000dc0:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <main+0x1ac>)
 8000dc2:	78db      	ldrb	r3, [r3, #3]
 8000dc4:	461c      	mov	r4, r3
 8000dc6:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <main+0x1a4>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461d      	mov	r5, r3
 8000dcc:	4b3f      	ldr	r3, [pc, #252]	; (8000ecc <main+0x1a4>)
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	461e      	mov	r6, r3
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <main+0x1a4>)
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <main+0x1b0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb23 	bl	8000428 <__aeabi_f2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	9303      	str	r3, [sp, #12]
 8000dee:	9602      	str	r6, [sp, #8]
 8000df0:	9501      	str	r5, [sp, #4]
 8000df2:	9400      	str	r4, [sp, #0]
 8000df4:	464b      	mov	r3, r9
 8000df6:	4642      	mov	r2, r8
 8000df8:	4938      	ldr	r1, [pc, #224]	; (8000edc <main+0x1b4>)
 8000dfa:	4839      	ldr	r0, [pc, #228]	; (8000ee0 <main+0x1b8>)
 8000dfc:	f007 fe34 	bl	8008a68 <siprintf>

	/* write data to file */

	/* open file for writing */
	UINT bytesWrote;
	fres = f_open(&fil, "temp.log", FA_WRITE | FA_OPEN_ALWAYS);
 8000e00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e04:	2212      	movs	r2, #18
 8000e06:	4937      	ldr	r1, [pc, #220]	; (8000ee4 <main+0x1bc>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 f95f 	bl	80070cc <f_open>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	// move file pointer to the end of file to append - this FatFS version has no FA_OPEN_APPEND
	f_lseek(&fil, f_size(&fil));
 8000e14:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000e18:	f5a3 638c 	sub.w	r3, r3, #1120	; 0x460
 8000e1c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f006 fe58 	bl	8007adc <f_lseek>

	if(fres == FR_OK) {
 8000e2c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d103      	bne.n	8000e3c <main+0x114>
		//continue;
		myprintf("[+]Open success\r\n");
 8000e34:	482c      	ldr	r0, [pc, #176]	; (8000ee8 <main+0x1c0>)
 8000e36:	f7ff ff51 	bl	8000cdc <myprintf>
 8000e3a:	e005      	b.n	8000e48 <main+0x120>
	} else {
		myprintf("[-]f_open error (%i)\r\n", fres);
 8000e3c:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000e40:	4619      	mov	r1, r3
 8000e42:	482a      	ldr	r0, [pc, #168]	; (8000eec <main+0x1c4>)
 8000e44:	f7ff ff4a 	bl	8000cdc <myprintf>
	}

	/* Copy in a string */
	strncpy((char*)readBuf, data, 60);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	223c      	movs	r2, #60	; 0x3c
 8000e4e:	4924      	ldr	r1, [pc, #144]	; (8000ee0 <main+0x1b8>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f007 fead 	bl	8008bb0 <strncpy>

	fres = f_write(&fil, readBuf, 60, &bytesWrote);
 8000e56:	f107 0308 	add.w	r3, r7, #8
 8000e5a:	f107 010c 	add.w	r1, r7, #12
 8000e5e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000e62:	223c      	movs	r2, #60	; 0x3c
 8000e64:	f006 fbab 	bl	80075be <f_write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f

	if(fres == FR_OK) {
 8000e6e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <main+0x162>
		myprintf("[+]Wrote %i bytes to 'temp.log'!\r\n", bytesWrote);
 8000e76:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000e7a:	f5a3 6393 	sub.w	r3, r3, #1176	; 0x498
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	481b      	ldr	r0, [pc, #108]	; (8000ef0 <main+0x1c8>)
 8000e84:	f7ff ff2a 	bl	8000cdc <myprintf>
 8000e88:	e005      	b.n	8000e96 <main+0x16e>
		//continue;
	} else {
		//myprintf("[-]Error writing to file");
		myprintf("[-]f_write error (%i)\r\n", fres);
 8000e8a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <main+0x1cc>)
 8000e92:	f7ff ff23 	bl	8000cdc <myprintf>
	}

	// close your file!
	f_close(&fil);
 8000e96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 fdf6 	bl	8007a8c <f_close>

	/* send data over USART1 */
	HAL_UART_Transmit(&huart1, (uint8_t*) data, sizeof(data), 1000);
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	2232      	movs	r2, #50	; 0x32
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <main+0x1b8>)
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <main+0x1d0>)
 8000eaa:	f003 fb77 	bl	800459c <HAL_UART_Transmit>

	HAL_Delay(100);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f000 fc6e 	bl	8001790 <HAL_Delay>
  {
 8000eb4:	e76d      	b.n	8000d92 <main+0x6a>
 8000eb6:	bf00      	nop
 8000eb8:	20000238 	.word	0x20000238
 8000ebc:	2000031c 	.word	0x2000031c
 8000ec0:	0800b190 	.word	0x0800b190
 8000ec4:	0800b194 	.word	0x0800b194
 8000ec8:	0800b1ac 	.word	0x0800b1ac
 8000ecc:	20000230 	.word	0x20000230
 8000ed0:	20000268 	.word	0x20000268
 8000ed4:	20000234 	.word	0x20000234
 8000ed8:	20000358 	.word	0x20000358
 8000edc:	0800b1c4 	.word	0x0800b1c4
 8000ee0:	20000324 	.word	0x20000324
 8000ee4:	0800b1ec 	.word	0x0800b1ec
 8000ee8:	0800b1f8 	.word	0x0800b1f8
 8000eec:	0800b20c 	.word	0x0800b20c
 8000ef0:	0800b224 	.word	0x0800b224
 8000ef4:	0800b248 	.word	0x0800b248
 8000ef8:	200002d4 	.word	0x200002d4

08000efc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
 8000f00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f06:	2228      	movs	r2, #40	; 0x28
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 fe48 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f34:	2310      	movs	r3, #16
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 faff 	bl	8002548 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f50:	f000 f98a 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fd6c 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f7a:	f000 f975 	bl	8001268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f86:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f001 feea 	bl	8002d68 <HAL_RCCEx_PeriphCLKConfig>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f9a:	f000 f965 	bl	8001268 <Error_Handler>
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	3750      	adds	r7, #80	; 0x50
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_ADC1_Init+0x74>)
 8000fba:	4a19      	ldr	r2, [pc, #100]	; (8001020 <MX_ADC1_Init+0x78>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_ADC1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_ADC1_Init+0x74>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_ADC1_Init+0x74>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_ADC1_Init+0x74>)
 8000fd2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000fd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_ADC1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_ADC1_Init+0x74>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <MX_ADC1_Init+0x74>)
 8000fe6:	f000 fbf7 	bl	80017d8 <HAL_ADC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ff0:	f000 f93a 	bl	8001268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_ADC1_Init+0x74>)
 8001006:	f000 fe7f 	bl	8001d08 <HAL_ADC_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001010:	f000 f92a 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000238 	.word	0x20000238
 8001020:	40012400 	.word	0x40012400

08001024 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2100      	movs	r1, #0
 8001030:	460a      	mov	r2, r1
 8001032:	801a      	strh	r2, [r3, #0]
 8001034:	460a      	mov	r2, r1
 8001036:	709a      	strb	r2, [r3, #2]
//  RTC_TimeTypeDef sDate = {0};
  RTC_DateTypeDef DateToUpdate = {0};
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  RTC_AlarmTypeDef sAlarm = {0};
 800103c:	463b      	mov	r3, r7
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MX_RTC_Init+0xc0>)
 8001046:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <MX_RTC_Init+0xc4>)
 8001048:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_RTC_Init+0xc0>)
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001052:	4b24      	ldr	r3, [pc, #144]	; (80010e4 <MX_RTC_Init+0xc0>)
 8001054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001058:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800105a:	4822      	ldr	r0, [pc, #136]	; (80010e4 <MX_RTC_Init+0xc0>)
 800105c:	f001 fff0 	bl	8003040 <HAL_RTC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001066:	f000 f8ff 	bl	8001268 <Error_Handler>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */

  sTime.Hours = 0x04;
 800106a:	2304      	movs	r3, #4
 800106c:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x27;
 800106e:	2327      	movs	r3, #39	; 0x27
 8001070:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	73bb      	strb	r3, [r7, #14]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	4819      	ldr	r0, [pc, #100]	; (80010e4 <MX_RTC_Init+0xc0>)
 8001080:	f002 f86a 	bl	8003158 <HAL_RTC_SetTime>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 800108a:	f000 f8ed 	bl	8001268 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800108e:	2306      	movs	r3, #6
 8001090:	723b      	strb	r3, [r7, #8]
  DateToUpdate.Month = RTC_MONTH_SEPTEMBER;
 8001092:	2309      	movs	r3, #9
 8001094:	727b      	strb	r3, [r7, #9]
  DateToUpdate.Date = 0x09;
 8001096:	2309      	movs	r3, #9
 8001098:	72bb      	strb	r3, [r7, #10]
  DateToUpdate.Year = 0x23;
 800109a:	2323      	movs	r3, #35	; 0x23
 800109c:	72fb      	strb	r3, [r7, #11]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800109e:	f107 0308 	add.w	r3, r7, #8
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	480f      	ldr	r0, [pc, #60]	; (80010e4 <MX_RTC_Init+0xc0>)
 80010a8:	f002 f9c6 	bl	8003438 <HAL_RTC_SetDate>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80010b2:	f000 f8d9 	bl	8001268 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80010be:	2300      	movs	r3, #0
 80010c0:	70bb      	strb	r3, [r7, #2]
  sAlarm.Alarm = RTC_ALARM_A;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_RTC_Init+0xc0>)
 80010ce:	f002 fabd 	bl	800364c <HAL_RTC_SetAlarm>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80010d8:	f000 f8c6 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000268 	.word	0x20000268
 80010e8:	40002800 	.word	0x40002800

080010ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_SPI1_Init+0x64>)
 80010f2:	4a18      	ldr	r2, [pc, #96]	; (8001154 <MX_SPI1_Init+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_SPI1_Init+0x64>)
 80010f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_SPI1_Init+0x64>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_SPI1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_SPI1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_SPI1_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_SPI1_Init+0x64>)
 8001118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800111e:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_SPI1_Init+0x64>)
 8001120:	2238      	movs	r2, #56	; 0x38
 8001122:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800112a:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_SPI1_Init+0x64>)
 8001138:	220a      	movs	r2, #10
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_SPI1_Init+0x64>)
 800113e:	f002 fdbf 	bl	8003cc0 <HAL_SPI_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001148:	f000 f88e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000027c 	.word	0x2000027c
 8001154:	40013000 	.word	0x40013000

08001158 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART1_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART1_UART_Init+0x4c>)
 8001190:	f003 f9b4 	bl	80044fc <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f000 f865 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200002d4 	.word	0x200002d4
 80011a8:	40013800 	.word	0x40013800

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_GPIO_Init+0xb0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <MX_GPIO_Init+0xb0>)
 80011c6:	f043 0310 	orr.w	r3, r3, #16
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_GPIO_Init+0xb0>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0310 	and.w	r3, r3, #16
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_GPIO_Init+0xb0>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a1f      	ldr	r2, [pc, #124]	; (800125c <MX_GPIO_Init+0xb0>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_GPIO_Init+0xb0>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_GPIO_Init+0xb0>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <MX_GPIO_Init+0xb0>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_GPIO_Init+0xb0>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2108      	movs	r1, #8
 800120c:	4814      	ldr	r0, [pc, #80]	; (8001260 <MX_GPIO_Init+0xb4>)
 800120e:	f001 f977 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_GPIO_Init+0xb8>)
 8001218:	f001 f972 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800121c:	2308      	movs	r3, #8
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <MX_GPIO_Init+0xb4>)
 8001234:	f000 ffe0 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001238:	2301      	movs	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_GPIO_Init+0xb8>)
 8001250:	f000 ffd2 	bl	80021f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_MspInit+0x40>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <HAL_MspInit+0x40>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_MspInit+0x40>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_MspInit+0x40>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_MspInit+0x40>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_MspInit+0x40>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <HAL_ADC_MspInit+0x6c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d121      	bne.n	800131c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_ADC_MspInit+0x70>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_ADC_MspInit+0x70>)
 80012de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_ADC_MspInit+0x70>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_ADC_MspInit+0x70>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a0c      	ldr	r2, [pc, #48]	; (8001328 <HAL_ADC_MspInit+0x70>)
 80012f6:	f043 0304 	orr.w	r3, r3, #4
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_ADC_MspInit+0x70>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_ADC_MspInit+0x74>)
 8001318:	f000 ff6e 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40012400 	.word	0x40012400
 8001328:	40021000 	.word	0x40021000
 800132c:	40010800 	.word	0x40010800

08001330 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <HAL_RTC_MspInit+0x3c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d110      	bne.n	8001364 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001342:	f001 f8f5 	bl	8002530 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_RTC_MspInit+0x40>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_RTC_MspInit+0x40>)
 800134c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <HAL_RTC_MspInit+0x40>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RTC_MspInit+0x44>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40002800 	.word	0x40002800
 8001370:	40021000 	.word	0x40021000
 8001374:	4242043c 	.word	0x4242043c

08001378 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_SPI_MspInit+0x88>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12f      	bne.n	80013f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 800139e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_SPI_MspInit+0x8c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013c8:	23a0      	movs	r3, #160	; 0xa0
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <HAL_SPI_MspInit+0x90>)
 80013dc:	f000 ff0c 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e0:	2340      	movs	r3, #64	; 0x40
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_SPI_MspInit+0x90>)
 80013f4:	f000 ff00 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40013000 	.word	0x40013000
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800

0800140c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <HAL_UART_MspInit+0x8c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d131      	bne.n	8001490 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_UART_MspInit+0x90>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_UART_MspInit+0x90>)
 8001432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_UART_MspInit+0x90>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0x90>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <HAL_UART_MspInit+0x90>)
 800144a:	f043 0304 	orr.w	r3, r3, #4
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_UART_MspInit+0x90>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001460:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <HAL_UART_MspInit+0x94>)
 8001472:	f000 fec1 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <HAL_UART_MspInit+0x94>)
 800148c:	f000 feb4 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40013800 	.word	0x40013800
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010800 	.word	0x40010800

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ea:	f000 f935 	bl	8001758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  return 1;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <_kill>:

int _kill(int pid, int sig)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800150a:	f007 fbaf 	bl	8008c6c <__errno>
 800150e:	4603      	mov	r3, r0
 8001510:	2216      	movs	r2, #22
 8001512:	601a      	str	r2, [r3, #0]
  return -1;
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_exit>:

void _exit (int status)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001528:	f04f 31ff 	mov.w	r1, #4294967295
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ffe7 	bl	8001500 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001532:	e7fe      	b.n	8001532 <_exit+0x12>

08001534 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e00a      	b.n	800155c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001546:	f3af 8000 	nop.w
 800154a:	4601      	mov	r1, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	b2ca      	uxtb	r2, r1
 8001554:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbf0      	blt.n	8001546 <_read+0x12>
  }

  return len;
 8001564:	687b      	ldr	r3, [r7, #4]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	e009      	b.n	8001594 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	60ba      	str	r2, [r7, #8]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf1      	blt.n	8001580 <_write+0x12>
  }
  return len;
 800159c:	687b      	ldr	r3, [r7, #4]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_close>:

int _close(int file)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015cc:	605a      	str	r2, [r3, #4]
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <_isatty>:

int _isatty(int file)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <_sbrk+0x5c>)
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <_sbrk+0x60>)
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x64>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <_sbrk+0x68>)
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	429a      	cmp	r2, r3
 8001636:	d207      	bcs.n	8001648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001638:	f007 fb18 	bl	8008c6c <__errno>
 800163c:	4603      	mov	r3, r0
 800163e:	220c      	movs	r2, #12
 8001640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	e009      	b.n	800165c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <_sbrk+0x64>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <_sbrk+0x64>)
 8001658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20005000 	.word	0x20005000
 8001668:	00000400 	.word	0x00000400
 800166c:	2000045c 	.word	0x2000045c
 8001670:	200005f0 	.word	0x200005f0

08001674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001680:	f7ff fff8 	bl	8001674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001686:	490c      	ldr	r1, [pc, #48]	; (80016b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001688:	4a0c      	ldr	r2, [pc, #48]	; (80016bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800169c:	4c09      	ldr	r4, [pc, #36]	; (80016c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f007 fae5 	bl	8008c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ae:	f7ff fb3b 	bl	8000d28 <main>
  bx lr
 80016b2:	4770      	bx	lr
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80016bc:	0800b6dc 	.word	0x0800b6dc
  ldr r2, =_sbss
 80016c0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80016c4:	200005f0 	.word	0x200005f0

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>
	...

080016cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <HAL_Init+0x28>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_Init+0x28>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016dc:	2003      	movs	r0, #3
 80016de:	f000 fd57 	bl	8002190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e2:	200f      	movs	r0, #15
 80016e4:	f000 f808 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fdc4 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40022000 	.word	0x40022000

080016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x54>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_InitTick+0x58>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fd61 	bl	80021de <HAL_SYSTICK_Config>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e00e      	b.n	8001744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d80a      	bhi.n	8001742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800172c:	2200      	movs	r2, #0
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f000 fd37 	bl	80021a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001738:	4a06      	ldr	r2, [pc, #24]	; (8001754 <HAL_InitTick+0x5c>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	e000      	b.n	8001744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000000 	.word	0x20000000
 8001750:	20000008 	.word	0x20000008
 8001754:	20000004 	.word	0x20000004

08001758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x1c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_IncTick+0x20>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4413      	add	r3, r2
 8001768:	4a03      	ldr	r2, [pc, #12]	; (8001778 <HAL_IncTick+0x20>)
 800176a:	6013      	str	r3, [r2, #0]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000008 	.word	0x20000008
 8001778:	20000460 	.word	0x20000460

0800177c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <HAL_GetTick+0x10>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	20000460 	.word	0x20000460

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff fff0 	bl	800177c <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d005      	beq.n	80017b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_Delay+0x44>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b6:	bf00      	nop
 80017b8:	f7ff ffe0 	bl	800177c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d8f7      	bhi.n	80017b8 <HAL_Delay+0x28>
  {
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0be      	b.n	8001978 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	2b00      	cmp	r3, #0
 8001806:	d109      	bne.n	800181c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fd4e 	bl	80012b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fbc5 	bl	8001fac <ADC_ConversionStop_Disable>
 8001822:	4603      	mov	r3, r0
 8001824:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 8099 	bne.w	8001966 <HAL_ADC_Init+0x18e>
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b00      	cmp	r3, #0
 8001838:	f040 8095 	bne.w	8001966 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001844:	f023 0302 	bic.w	r3, r3, #2
 8001848:	f043 0202 	orr.w	r2, r3, #2
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001858:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7b1b      	ldrb	r3, [r3, #12]
 800185e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001860:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	4313      	orrs	r3, r2
 8001866:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001870:	d003      	beq.n	800187a <HAL_ADC_Init+0xa2>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_ADC_Init+0xa8>
 800187a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187e:	e000      	b.n	8001882 <HAL_ADC_Init+0xaa>
 8001880:	2300      	movs	r3, #0
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7d1b      	ldrb	r3, [r3, #20]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d119      	bne.n	80018c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7b1b      	ldrb	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d109      	bne.n	80018ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	3b01      	subs	r3, #1
 800189e:	035a      	lsls	r2, r3, #13
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	e00b      	b.n	80018c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	f043 0220 	orr.w	r2, r3, #32
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018bc:	f043 0201 	orr.w	r2, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	430a      	orrs	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_ADC_Init+0x1a8>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f4:	d003      	beq.n	80018fe <HAL_ADC_Init+0x126>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d104      	bne.n	8001908 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	3b01      	subs	r3, #1
 8001904:	051b      	lsls	r3, r3, #20
 8001906:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	430a      	orrs	r2, r1
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_ADC_Init+0x1ac>)
 8001924:	4013      	ands	r3, r2
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	429a      	cmp	r2, r3
 800192a:	d10b      	bne.n	8001944 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	f023 0303 	bic.w	r3, r3, #3
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001942:	e018      	b.n	8001976 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	f023 0312 	bic.w	r3, r3, #18
 800194c:	f043 0210 	orr.w	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001964:	e007      	b.n	8001976 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	ffe1f7fd 	.word	0xffe1f7fd
 8001984:	ff1f0efe 	.word	0xff1f0efe

08001988 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Start+0x1a>
 800199e:	2302      	movs	r3, #2
 80019a0:	e098      	b.n	8001ad4 <HAL_ADC_Start+0x14c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 faa4 	bl	8001ef8 <ADC_Enable>
 80019b0:	4603      	mov	r3, r0
 80019b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f040 8087 	bne.w	8001aca <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a41      	ldr	r2, [pc, #260]	; (8001adc <HAL_ADC_Start+0x154>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d105      	bne.n	80019e6 <HAL_ADC_Start+0x5e>
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_ADC_Start+0x158>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d115      	bne.n	8001a12 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d026      	beq.n	8001a4e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a10:	e01d      	b.n	8001a4e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a2f      	ldr	r2, [pc, #188]	; (8001ae0 <HAL_ADC_Start+0x158>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_ADC_Start+0xaa>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <HAL_ADC_Start+0x154>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10d      	bne.n	8001a4e <HAL_ADC_Start+0xc6>
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <HAL_ADC_Start+0x158>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d006      	beq.n	8001a68 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	f023 0206 	bic.w	r2, r3, #6
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a66:	e002      	b.n	8001a6e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f06f 0202 	mvn.w	r2, #2
 8001a7e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a8a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a8e:	d113      	bne.n	8001ab8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <HAL_ADC_Start+0x154>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d105      	bne.n	8001aa6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_ADC_Start+0x158>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	e00c      	b.n	8001ad2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e003      	b.n	8001ad2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40012800 	.word	0x40012800
 8001ae0:	40012400 	.word	0x40012400

08001ae4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001afa:	f7ff fe3f 	bl	800177c <HAL_GetTick>
 8001afe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00b      	beq.n	8001b26 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f043 0220 	orr.w	r2, r3, #32
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0d3      	b.n	8001cce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d131      	bne.n	8001b98 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d12a      	bne.n	8001b98 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b42:	e021      	b.n	8001b88 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b4a:	d01d      	beq.n	8001b88 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_ADC_PollForConversion+0x7e>
 8001b52:	f7ff fe13 	bl	800177c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d212      	bcs.n	8001b88 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10b      	bne.n	8001b88 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0a2      	b.n	8001cce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0d6      	beq.n	8001b44 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b96:	e070      	b.n	8001c7a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_ADC_PollForConversion+0x1f4>)
 8001b9a:	681c      	ldr	r4, [r3, #0]
 8001b9c:	2002      	movs	r0, #2
 8001b9e:	f001 f999 	bl	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	4b4b      	ldr	r3, [pc, #300]	; (8001cdc <HAL_ADC_PollForConversion+0x1f8>)
 8001bb0:	400b      	ands	r3, r1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_ADC_PollForConversion+0x104>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68d9      	ldr	r1, [r3, #12]
 8001bbc:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <HAL_ADC_PollForConversion+0x1fc>)
 8001bbe:	400b      	ands	r3, r1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d111      	bne.n	8001be8 <HAL_ADC_PollForConversion+0x104>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <HAL_ADC_PollForConversion+0x200>)
 8001bcc:	400b      	ands	r3, r1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d108      	bne.n	8001be4 <HAL_ADC_PollForConversion+0x100>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68d9      	ldr	r1, [r3, #12]
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <HAL_ADC_PollForConversion+0x204>)
 8001bda:	400b      	ands	r3, r1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <HAL_ADC_PollForConversion+0x100>
 8001be0:	2314      	movs	r3, #20
 8001be2:	e020      	b.n	8001c26 <HAL_ADC_PollForConversion+0x142>
 8001be4:	2329      	movs	r3, #41	; 0x29
 8001be6:	e01e      	b.n	8001c26 <HAL_ADC_PollForConversion+0x142>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6919      	ldr	r1, [r3, #16]
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <HAL_ADC_PollForConversion+0x200>)
 8001bf0:	400b      	ands	r3, r1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_ADC_PollForConversion+0x120>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68d9      	ldr	r1, [r3, #12]
 8001bfc:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <HAL_ADC_PollForConversion+0x204>)
 8001bfe:	400b      	ands	r3, r1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00d      	beq.n	8001c20 <HAL_ADC_PollForConversion+0x13c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6919      	ldr	r1, [r3, #16]
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_ADC_PollForConversion+0x208>)
 8001c0c:	400b      	ands	r3, r1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d108      	bne.n	8001c24 <HAL_ADC_PollForConversion+0x140>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68d9      	ldr	r1, [r3, #12]
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_ADC_PollForConversion+0x208>)
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_ADC_PollForConversion+0x140>
 8001c20:	2354      	movs	r3, #84	; 0x54
 8001c22:	e000      	b.n	8001c26 <HAL_ADC_PollForConversion+0x142>
 8001c24:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c2c:	e021      	b.n	8001c72 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d01a      	beq.n	8001c6c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <HAL_ADC_PollForConversion+0x168>
 8001c3c:	f7ff fd9e 	bl	800177c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d20f      	bcs.n	8001c6c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d90b      	bls.n	8001c6c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f043 0204 	orr.w	r2, r3, #4
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e030      	b.n	8001cce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d8d9      	bhi.n	8001c2e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f06f 0212 	mvn.w	r2, #18
 8001c82:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c9e:	d115      	bne.n	8001ccc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d111      	bne.n	8001ccc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	24924924 	.word	0x24924924
 8001ce0:	00924924 	.word	0x00924924
 8001ce4:	12492492 	.word	0x12492492
 8001ce8:	00492492 	.word	0x00492492
 8001cec:	00249249 	.word	0x00249249

08001cf0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x20>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e0dc      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1da>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d81c      	bhi.n	8001d72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b05      	subs	r3, #5
 8001d4a:	221f      	movs	r2, #31
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4019      	ands	r1, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b05      	subs	r3, #5
 8001d64:	fa00 f203 	lsl.w	r2, r0, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d70:	e03c      	b.n	8001dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d81c      	bhi.n	8001db4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b23      	subs	r3, #35	; 0x23
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	4019      	ands	r1, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	3b23      	subs	r3, #35	; 0x23
 8001da6:	fa00 f203 	lsl.w	r2, r0, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
 8001db2:	e01b      	b.n	8001dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b41      	subs	r3, #65	; 0x41
 8001dc6:	221f      	movs	r2, #31
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4019      	ands	r1, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b41      	subs	r3, #65	; 0x41
 8001de0:	fa00 f203 	lsl.w	r2, r0, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	d91c      	bls.n	8001e2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68d9      	ldr	r1, [r3, #12]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1e      	subs	r3, #30
 8001e06:	2207      	movs	r2, #7
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4019      	ands	r1, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6898      	ldr	r0, [r3, #8]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b1e      	subs	r3, #30
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	e019      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6919      	ldr	r1, [r3, #16]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2207      	movs	r2, #7
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d003      	beq.n	8001e72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e6e:	2b11      	cmp	r3, #17
 8001e70:	d132      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_ADC_ConfigChannel+0x1e4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d125      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d126      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a13      	ldr	r2, [pc, #76]	; (8001ef4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9a      	lsrs	r2, r3, #18
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eb8:	e002      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f9      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x1b2>
 8001ec6:	e007      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40012400 	.word	0x40012400
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	431bde83 	.word	0x431bde83

08001ef8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d040      	beq.n	8001f98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <ADC_Enable+0xac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <ADC_Enable+0xb0>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9b      	lsrs	r3, r3, #18
 8001f32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f34:	e002      	b.n	8001f3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f9      	bne.n	8001f36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f42:	f7ff fc1b 	bl	800177c <HAL_GetTick>
 8001f46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f48:	e01f      	b.n	8001f8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f4a:	f7ff fc17 	bl	800177c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d918      	bls.n	8001f8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d011      	beq.n	8001f8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f043 0210 	orr.w	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e007      	b.n	8001f9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d1d8      	bne.n	8001f4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	431bde83 	.word	0x431bde83

08001fac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d12e      	bne.n	8002024 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fd6:	f7ff fbd1 	bl	800177c <HAL_GetTick>
 8001fda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fdc:	e01b      	b.n	8002016 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fde:	f7ff fbcd 	bl	800177c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d914      	bls.n	8002016 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10d      	bne.n	8002016 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e007      	b.n	8002026 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d0dc      	beq.n	8001fde <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800204c:	4013      	ands	r3, r2
 800204e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800205c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <__NVIC_SetPriorityGrouping+0x44>)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60d3      	str	r3, [r2, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800207c:	4b04      	ldr	r3, [pc, #16]	; (8002090 <__NVIC_GetPriorityGrouping+0x18>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	f003 0307 	and.w	r3, r3, #7
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	6039      	str	r1, [r7, #0]
 800209e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	db0a      	blt.n	80020be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	490c      	ldr	r1, [pc, #48]	; (80020e0 <__NVIC_SetPriority+0x4c>)
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	0112      	lsls	r2, r2, #4
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	440b      	add	r3, r1
 80020b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020bc:	e00a      	b.n	80020d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4908      	ldr	r1, [pc, #32]	; (80020e4 <__NVIC_SetPriority+0x50>)
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	3b04      	subs	r3, #4
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	440b      	add	r3, r1
 80020d2:	761a      	strb	r2, [r3, #24]
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b089      	sub	sp, #36	; 0x24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f1c3 0307 	rsb	r3, r3, #7
 8002102:	2b04      	cmp	r3, #4
 8002104:	bf28      	it	cs
 8002106:	2304      	movcs	r3, #4
 8002108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3304      	adds	r3, #4
 800210e:	2b06      	cmp	r3, #6
 8002110:	d902      	bls.n	8002118 <NVIC_EncodePriority+0x30>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3b03      	subs	r3, #3
 8002116:	e000      	b.n	800211a <NVIC_EncodePriority+0x32>
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43d9      	mvns	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4313      	orrs	r3, r2
         );
}
 8002142:	4618      	mov	r0, r3
 8002144:	3724      	adds	r7, #36	; 0x24
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215c:	d301      	bcc.n	8002162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215e:	2301      	movs	r3, #1
 8002160:	e00f      	b.n	8002182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <SysTick_Config+0x40>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800216a:	210f      	movs	r1, #15
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	f7ff ff90 	bl	8002094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <SysTick_Config+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800217a:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x40>)
 800217c:	2207      	movs	r2, #7
 800217e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff49 	bl	8002030 <__NVIC_SetPriorityGrouping>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	4603      	mov	r3, r0
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	607a      	str	r2, [r7, #4]
 80021b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b8:	f7ff ff5e 	bl	8002078 <__NVIC_GetPriorityGrouping>
 80021bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f7ff ff90 	bl	80020e8 <NVIC_EncodePriority>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff5f 	bl	8002094 <__NVIC_SetPriority>
}
 80021d6:	bf00      	nop
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffb0 	bl	800214c <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b08b      	sub	sp, #44	; 0x2c
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	e169      	b.n	80024e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800220c:	2201      	movs	r2, #1
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	429a      	cmp	r2, r3
 8002226:	f040 8158 	bne.w	80024da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4a9a      	ldr	r2, [pc, #616]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d05e      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002234:	4a98      	ldr	r2, [pc, #608]	; (8002498 <HAL_GPIO_Init+0x2a0>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d875      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800223a:	4a98      	ldr	r2, [pc, #608]	; (800249c <HAL_GPIO_Init+0x2a4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d058      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002240:	4a96      	ldr	r2, [pc, #600]	; (800249c <HAL_GPIO_Init+0x2a4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d86f      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002246:	4a96      	ldr	r2, [pc, #600]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d052      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 800224c:	4a94      	ldr	r2, [pc, #592]	; (80024a0 <HAL_GPIO_Init+0x2a8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d869      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002252:	4a94      	ldr	r2, [pc, #592]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d04c      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002258:	4a92      	ldr	r2, [pc, #584]	; (80024a4 <HAL_GPIO_Init+0x2ac>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d863      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800225e:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d046      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
 8002264:	4a90      	ldr	r2, [pc, #576]	; (80024a8 <HAL_GPIO_Init+0x2b0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d85d      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 800226a:	2b12      	cmp	r3, #18
 800226c:	d82a      	bhi.n	80022c4 <HAL_GPIO_Init+0xcc>
 800226e:	2b12      	cmp	r3, #18
 8002270:	d859      	bhi.n	8002326 <HAL_GPIO_Init+0x12e>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_GPIO_Init+0x80>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	080022f3 	.word	0x080022f3
 800227c:	080022cd 	.word	0x080022cd
 8002280:	080022df 	.word	0x080022df
 8002284:	08002321 	.word	0x08002321
 8002288:	08002327 	.word	0x08002327
 800228c:	08002327 	.word	0x08002327
 8002290:	08002327 	.word	0x08002327
 8002294:	08002327 	.word	0x08002327
 8002298:	08002327 	.word	0x08002327
 800229c:	08002327 	.word	0x08002327
 80022a0:	08002327 	.word	0x08002327
 80022a4:	08002327 	.word	0x08002327
 80022a8:	08002327 	.word	0x08002327
 80022ac:	08002327 	.word	0x08002327
 80022b0:	08002327 	.word	0x08002327
 80022b4:	08002327 	.word	0x08002327
 80022b8:	08002327 	.word	0x08002327
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022e9 	.word	0x080022e9
 80022c4:	4a79      	ldr	r2, [pc, #484]	; (80024ac <HAL_GPIO_Init+0x2b4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ca:	e02c      	b.n	8002326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	623b      	str	r3, [r7, #32]
          break;
 80022d2:	e029      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	3304      	adds	r3, #4
 80022da:	623b      	str	r3, [r7, #32]
          break;
 80022dc:	e024      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	3308      	adds	r3, #8
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e01f      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	330c      	adds	r3, #12
 80022ee:	623b      	str	r3, [r7, #32]
          break;
 80022f0:	e01a      	b.n	8002328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022fa:	2304      	movs	r3, #4
 80022fc:	623b      	str	r3, [r7, #32]
          break;
 80022fe:	e013      	b.n	8002328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002308:	2308      	movs	r3, #8
 800230a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	611a      	str	r2, [r3, #16]
          break;
 8002312:	e009      	b.n	8002328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	615a      	str	r2, [r3, #20]
          break;
 800231e:	e003      	b.n	8002328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e000      	b.n	8002328 <HAL_GPIO_Init+0x130>
          break;
 8002326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2bff      	cmp	r3, #255	; 0xff
 800232c:	d801      	bhi.n	8002332 <HAL_GPIO_Init+0x13a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	e001      	b.n	8002336 <HAL_GPIO_Init+0x13e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2bff      	cmp	r3, #255	; 0xff
 800233c:	d802      	bhi.n	8002344 <HAL_GPIO_Init+0x14c>
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	e002      	b.n	800234a <HAL_GPIO_Init+0x152>
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	3b08      	subs	r3, #8
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	210f      	movs	r1, #15
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	6a39      	ldr	r1, [r7, #32]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	fa01 f303 	lsl.w	r3, r1, r3
 8002364:	431a      	orrs	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80b1 	beq.w	80024da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002378:	4b4d      	ldr	r3, [pc, #308]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a4c      	ldr	r2, [pc, #304]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b4a      	ldr	r3, [pc, #296]	; (80024b0 <HAL_GPIO_Init+0x2b8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002390:	4a48      	ldr	r2, [pc, #288]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a40      	ldr	r2, [pc, #256]	; (80024b8 <HAL_GPIO_Init+0x2c0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d013      	beq.n	80023e4 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3f      	ldr	r2, [pc, #252]	; (80024bc <HAL_GPIO_Init+0x2c4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00d      	beq.n	80023e0 <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3e      	ldr	r2, [pc, #248]	; (80024c0 <HAL_GPIO_Init+0x2c8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <HAL_GPIO_Init+0x1e4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3d      	ldr	r2, [pc, #244]	; (80024c4 <HAL_GPIO_Init+0x2cc>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d101      	bne.n	80023d8 <HAL_GPIO_Init+0x1e0>
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023d8:	2304      	movs	r3, #4
 80023da:	e004      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023dc:	2302      	movs	r3, #2
 80023de:	e002      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_GPIO_Init+0x1ee>
 80023e4:	2300      	movs	r3, #0
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	f002 0203 	and.w	r2, r2, #3
 80023ec:	0092      	lsls	r2, r2, #2
 80023ee:	4093      	lsls	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023f6:	492f      	ldr	r1, [pc, #188]	; (80024b4 <HAL_GPIO_Init+0x2bc>)
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	492c      	ldr	r1, [pc, #176]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4928      	ldr	r1, [pc, #160]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002428:	4013      	ands	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4922      	ldr	r1, [pc, #136]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
 8002444:	e006      	b.n	8002454 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	43db      	mvns	r3, r3
 800244e:	491e      	ldr	r1, [pc, #120]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002450:	4013      	ands	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	4918      	ldr	r1, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]
 800246c:	e006      	b.n	800247c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	43db      	mvns	r3, r3
 8002476:	4914      	ldr	r1, [pc, #80]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 8002478:	4013      	ands	r3, r2
 800247a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d021      	beq.n	80024cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_GPIO_Init+0x2d0>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e021      	b.n	80024da <HAL_GPIO_Init+0x2e2>
 8002496:	bf00      	nop
 8002498:	10320000 	.word	0x10320000
 800249c:	10310000 	.word	0x10310000
 80024a0:	10220000 	.word	0x10220000
 80024a4:	10210000 	.word	0x10210000
 80024a8:	10120000 	.word	0x10120000
 80024ac:	10110000 	.word	0x10110000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40010800 	.word	0x40010800
 80024bc:	40010c00 	.word	0x40010c00
 80024c0:	40011000 	.word	0x40011000
 80024c4:	40011400 	.word	0x40011400
 80024c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4909      	ldr	r1, [pc, #36]	; (80024fc <HAL_GPIO_Init+0x304>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f ae8e 	bne.w	800220c <HAL_GPIO_Init+0x14>
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	372c      	adds	r7, #44	; 0x2c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40010400 	.word	0x40010400

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800251c:	e003      	b.n	8002526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	611a      	str	r2, [r3, #16]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	420e0020 	.word	0x420e0020

08002548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e272      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002568:	4b92      	ldr	r3, [pc, #584]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b04      	cmp	r3, #4
 8002572:	d00c      	beq.n	800258e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d112      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
 8002580:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d06c      	beq.n	8002674 <HAL_RCC_OscConfig+0x12c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d168      	bne.n	8002674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e24c      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x76>
 80025b0:	4b80      	ldr	r3, [pc, #512]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a7f      	ldr	r2, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e02e      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7a      	ldr	r2, [pc, #488]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b78      	ldr	r3, [pc, #480]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a77      	ldr	r2, [pc, #476]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xbc>
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a71      	ldr	r2, [pc, #452]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b6f      	ldr	r3, [pc, #444]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6e      	ldr	r2, [pc, #440]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 8002604:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6a      	ldr	r2, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a67      	ldr	r2, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff f8aa 	bl	800177c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff f8a6 	bl	800177c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e200      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xe4>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff f896 	bl	800177c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002654:	f7ff f892 	bl	800177c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1ec      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x10c>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d063      	beq.n	800274a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b08      	cmp	r3, #8
 8002698:	d11c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x18c>
 800269a:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d116      	bne.n	80026d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_RCC_OscConfig+0x176>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e1c0      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4939      	ldr	r1, [pc, #228]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	e03a      	b.n	800274a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d020      	beq.n	800271e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7ff f84b 	bl	800177c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7ff f847 	bl	800177c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1a1      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4927      	ldr	r1, [pc, #156]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]
 800271c:	e015      	b.n	800274a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff f82a 	bl	800177c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272c:	f7ff f826 	bl	800177c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e180      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d03a      	beq.n	80027cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d019      	beq.n	8002792 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_RCC_OscConfig+0x274>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7ff f80a 	bl	800177c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276c:	f7ff f806 	bl	800177c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e160      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800278a:	2001      	movs	r0, #1
 800278c:	f000 face 	bl	8002d2c <RCC_Delay>
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_OscConfig+0x274>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7fe fff0 	bl	800177c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279e:	e00f      	b.n	80027c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe ffec 	bl	800177c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d908      	bls.n	80027c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e146      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	42420000 	.word	0x42420000
 80027bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e9      	bne.n	80027a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a6 	beq.w	8002926 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b8b      	ldr	r3, [pc, #556]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a87      	ldr	r2, [pc, #540]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe ffad 	bl	800177c <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7fe ffa9 	bl	800177c <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b64      	cmp	r3, #100	; 0x64
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e103      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x312>
 800284c:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a6e      	ldr	r2, [pc, #440]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	e02d      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x334>
 8002862:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	e01c      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x356>
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a60      	ldr	r2, [pc, #384]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a5d      	ldr	r2, [pc, #372]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	e00b      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800289e:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a5a      	ldr	r2, [pc, #360]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028be:	f7fe ff5d 	bl	800177c <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe ff59 	bl	800177c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0b1      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	4b4b      	ldr	r3, [pc, #300]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ee      	beq.n	80028c6 <HAL_RCC_OscConfig+0x37e>
 80028e8:	e014      	b.n	8002914 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe ff47 	bl	800177c <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe ff43 	bl	800177c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e09b      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4a3b      	ldr	r2, [pc, #236]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002924:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8087 	beq.w	8002a3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d061      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d146      	bne.n	80029d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe ff17 	bl	800177c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe ff13 	bl	800177c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e06d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d108      	bne.n	800298c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4921      	ldr	r1, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298c:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a19      	ldr	r1, [r3, #32]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	430b      	orrs	r3, r1
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fee7 	bl	800177c <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fee3 	bl	800177c <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e03d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46a>
 80029d0:	e035      	b.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fed0 	bl	800177c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fecc 	bl	800177c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e026      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x498>
 80029fe:	e01e      	b.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e019      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x500>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d0      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b67      	ldr	r3, [pc, #412]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4965      	ldr	r1, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ab2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d040      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d115      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e073      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e06b      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4936      	ldr	r1, [pc, #216]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fe1e 	bl	800177c <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fe1a 	bl	800177c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e053      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d210      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4922      	ldr	r1, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1d0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fd7c 	bl	80016f8 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	0800b2a4 	.word	0x0800b2a4
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x30>
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x36>
 8002c4e:	e027      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c52:	613b      	str	r3, [r7, #16]
      break;
 8002c54:	e027      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0c9b      	lsrs	r3, r3, #18
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0c5b      	lsrs	r3, r3, #17
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c82:	fb03 f202 	mul.w	r2, r3, r2
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e004      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	613b      	str	r3, [r7, #16]
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca2:	613b      	str	r3, [r7, #16]
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	693b      	ldr	r3, [r7, #16]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	007a1200 	.word	0x007a1200
 8002cbc:	0800b2bc 	.word	0x0800b2bc
 8002cc0:	0800b2cc 	.word	0x0800b2cc
 8002cc4:	003d0900 	.word	0x003d0900

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000000 	.word	0x20000000

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff2 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	0800b2b4 	.word	0x0800b2b4

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0adb      	lsrs	r3, r3, #11
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	0800b2b4 	.word	0x0800b2b4

08002d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d34:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <RCC_Delay+0x34>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <RCC_Delay+0x38>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	0a5b      	lsrs	r3, r3, #9
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d48:	bf00      	nop
  }
  while (Delay --);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f9      	bne.n	8002d48 <RCC_Delay+0x1c>
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20000000 	.word	0x20000000
 8002d64:	10624dd3 	.word	0x10624dd3

08002d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d07d      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d88:	4b4f      	ldr	r3, [pc, #316]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d94:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4a4b      	ldr	r2, [pc, #300]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	61d3      	str	r3, [r2, #28]
 8002da0:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dac:	2301      	movs	r3, #1
 8002dae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d118      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dbc:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fcd8 	bl	800177c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	e008      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fe fcd4 	bl	800177c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e06d      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de2:	4b3a      	ldr	r3, [pc, #232]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02e      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d027      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e22:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d014      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e32:	f7fe fca3 	bl	800177c <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fc9f 	bl	800177c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e036      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ee      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4917      	ldr	r1, [pc, #92]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	490b      	ldr	r1, [pc, #44]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42420440 	.word	0x42420440

08002ed4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b10      	cmp	r3, #16
 8002ef4:	d00a      	beq.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	f200 808a 	bhi.w	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d045      	beq.n	8002f90 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d075      	beq.n	8002ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f0a:	e082      	b.n	8003012 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f0c:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f12:	4b45      	ldr	r3, [pc, #276]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d07b      	beq.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	0c9b      	lsrs	r3, r3, #18
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	4a41      	ldr	r2, [pc, #260]	; (800302c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f28:	5cd3      	ldrb	r3, [r2, r3]
 8002f2a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d015      	beq.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	0c5b      	lsrs	r3, r3, #17
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f42:	5cd3      	ldrb	r3, [r2, r3]
 8002f44:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00d      	beq.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f50:	4a38      	ldr	r2, [pc, #224]	; (8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	e004      	b.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4a34      	ldr	r2, [pc, #208]	; (8003038 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002f66:	fb02 f303 	mul.w	r3, r2, r3
 8002f6a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f6c:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f78:	d102      	bne.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	61bb      	str	r3, [r7, #24]
      break;
 8002f7e:	e04a      	b.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	61bb      	str	r3, [r7, #24]
      break;
 8002f8e:	e042      	b.n	8003016 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa0:	d108      	bne.n	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	e01f      	b.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fbe:	d109      	bne.n	8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002fc0:	4b19      	ldr	r3, [pc, #100]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002fcc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e00f      	b.n	8002ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fde:	d11c      	bne.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002fe0:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d016      	beq.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002fec:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002ff0:	61bb      	str	r3, [r7, #24]
      break;
 8002ff2:	e012      	b.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002ff4:	e011      	b.n	800301a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002ff6:	f7ff fe85 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0b9b      	lsrs	r3, r3, #14
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	61bb      	str	r3, [r7, #24]
      break;
 8003010:	e004      	b.n	800301c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003012:	bf00      	nop
 8003014:	e002      	b.n	800301c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800301a:	bf00      	nop
    }
  }
  return (frequency);
 800301c:	69bb      	ldr	r3, [r7, #24]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000
 800302c:	0800b2d0 	.word	0x0800b2d0
 8003030:	0800b2e0 	.word	0x0800b2e0
 8003034:	007a1200 	.word	0x007a1200
 8003038:	003d0900 	.word	0x003d0900
 800303c:	aaaaaaab 	.word	0xaaaaaaab

08003040 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07a      	b.n	800314c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7c5b      	ldrb	r3, [r3, #17]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe f962 	bl	8001330 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fb83 	bl	800377e <HAL_RTC_WaitForSynchro>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d004      	beq.n	8003088 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2204      	movs	r2, #4
 8003082:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e061      	b.n	800314c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 fc3c 	bl	8003906 <RTC_EnterInitMode>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d004      	beq.n	800309e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2204      	movs	r2, #4
 8003098:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e056      	b.n	800314c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0207 	bic.w	r2, r2, #7
 80030ac:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80030b6:	4b27      	ldr	r3, [pc, #156]	; (8003154 <HAL_RTC_Init+0x114>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a26      	ldr	r2, [pc, #152]	; (8003154 <HAL_RTC_Init+0x114>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <HAL_RTC_Init+0x114>)
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	4921      	ldr	r1, [pc, #132]	; (8003154 <HAL_RTC_Init+0x114>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d003      	beq.n	80030e6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	60fb      	str	r3, [r7, #12]
 80030e4:	e00e      	b.n	8003104 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7ff fef4 	bl	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq>
 80030ec:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2204      	movs	r2, #4
 80030f8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e026      	b.n	800314c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3b01      	subs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	0c1a      	lsrs	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f002 020f 	and.w	r2, r2, #15
 8003110:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	b292      	uxth	r2, r2
 800311a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fc1a 	bl	8003956 <RTC_ExitInitMode>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2204      	movs	r2, #4
 800312c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e00c      	b.n	800314c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800314a:	2300      	movs	r3, #0
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40006c00 	.word	0x40006c00

08003158 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_RTC_SetTime+0x20>
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e080      	b.n	800327e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	7c1b      	ldrb	r3, [r3, #16]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_RTC_SetTime+0x30>
 8003184:	2302      	movs	r3, #2
 8003186:	e07a      	b.n	800327e <HAL_RTC_SetTime+0x126>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2202      	movs	r2, #2
 8003192:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d113      	bne.n	80031c2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80031a4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	4619      	mov	r1, r3
 80031ae:	460b      	mov	r3, r1
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a5b      	subs	r3, r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031b6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80031bc:	4413      	add	r3, r2
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e01e      	b.n	8003200 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fc0a 	bl	80039e0 <RTC_Bcd2ToByte>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80031d4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 fbff 	bl	80039e0 <RTC_Bcd2ToByte>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80031ee:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	789b      	ldrb	r3, [r3, #2]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fbf3 	bl	80039e0 <RTC_Bcd2ToByte>
 80031fa:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80031fc:	4423      	add	r3, r4
 80031fe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003200:	6979      	ldr	r1, [r7, #20]
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fb18 	bl	8003838 <RTC_WriteTimeCounter>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2204      	movs	r2, #4
 8003212:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e02f      	b.n	800327e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0205 	bic.w	r2, r2, #5
 800322c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 fb29 	bl	8003886 <RTC_ReadAlarmCounter>
 8003234:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d018      	beq.n	8003270 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	429a      	cmp	r2, r3
 8003244:	d214      	bcs.n	8003270 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800324c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003250:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003252:	6939      	ldr	r1, [r7, #16]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fb2f 	bl	80038b8 <RTC_WriteAlarmCounter>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2204      	movs	r2, #4
 8003264:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e006      	b.n	800327e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}
	...

08003288 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_RTC_GetTime+0x28>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0b5      	b.n	8003420 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0ac      	b.n	8003420 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa86 	bl	80037d8 <RTC_ReadTimeCounter>
 80032cc:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4a55      	ldr	r2, [pc, #340]	; (8003428 <HAL_RTC_GetTime+0x1a0>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0adb      	lsrs	r3, r3, #11
 80032d8:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4b52      	ldr	r3, [pc, #328]	; (8003428 <HAL_RTC_GetTime+0x1a0>)
 80032de:	fba3 1302 	umull	r1, r3, r3, r2
 80032e2:	0adb      	lsrs	r3, r3, #11
 80032e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	4a4f      	ldr	r2, [pc, #316]	; (800342c <HAL_RTC_GetTime+0x1a4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <HAL_RTC_GetTime+0x1a0>)
 8003300:	fba2 1203 	umull	r1, r2, r2, r3
 8003304:	0ad2      	lsrs	r2, r2, #11
 8003306:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800330a:	fb01 f202 	mul.w	r2, r1, r2
 800330e:	1a9a      	subs	r2, r3, r2
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RTC_GetTime+0x1a4>)
 8003312:	fba3 1302 	umull	r1, r3, r3, r2
 8003316:	0959      	lsrs	r1, r3, #5
 8003318:	460b      	mov	r3, r1
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a5b      	subs	r3, r3, r1
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	1ad1      	subs	r1, r2, r3
 8003322:	b2ca      	uxtb	r2, r1
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b17      	cmp	r3, #23
 800332c:	d955      	bls.n	80033da <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4a3f      	ldr	r2, [pc, #252]	; (8003430 <HAL_RTC_GetTime+0x1a8>)
 8003332:	fba2 2303 	umull	r2, r3, r2, r3
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800333a:	6939      	ldr	r1, [r7, #16]
 800333c:	4b3c      	ldr	r3, [pc, #240]	; (8003430 <HAL_RTC_GetTime+0x1a8>)
 800333e:	fba3 2301 	umull	r2, r3, r3, r1
 8003342:	091a      	lsrs	r2, r3, #4
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	1aca      	subs	r2, r1, r3
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fa96 	bl	8003886 <RTC_ReadAlarmCounter>
 800335a:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d008      	beq.n	8003376 <HAL_RTC_GetTime+0xee>
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	429a      	cmp	r2, r3
 800336a:	d904      	bls.n	8003376 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e002      	b.n	800337c <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295
 800337a:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	4a2d      	ldr	r2, [pc, #180]	; (8003434 <HAL_RTC_GetTime+0x1ac>)
 8003380:	fb02 f303 	mul.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fa53 	bl	8003838 <RTC_WriteTimeCounter>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e041      	b.n	8003420 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d00c      	beq.n	80033be <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	4413      	add	r3, r2
 80033aa:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80033ac:	69f9      	ldr	r1, [r7, #28]
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fa82 	bl	80038b8 <RTC_WriteAlarmCounter>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e030      	b.n	8003420 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80033be:	69f9      	ldr	r1, [r7, #28]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fa79 	bl	80038b8 <RTC_WriteAlarmCounter>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e027      	b.n	8003420 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80033d0:	6979      	ldr	r1, [r7, #20]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fb21 	bl	8003a1a <RTC_DateUpdate>
 80033d8:	e003      	b.n	80033e2 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d01a      	beq.n	800341e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fada 	bl	80039a6 <RTC_ByteToBcd2>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fad1 	bl	80039a6 <RTC_ByteToBcd2>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	789b      	ldrb	r3, [r3, #2]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fac8 	bl	80039a6 <RTC_ByteToBcd2>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3720      	adds	r7, #32
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	91a2b3c5 	.word	0x91a2b3c5
 800342c:	88888889 	.word	0x88888889
 8003430:	aaaaaaab 	.word	0xaaaaaaab
 8003434:	00015180 	.word	0x00015180

08003438 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RTC_SetDate+0x24>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e097      	b.n	8003590 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	7c1b      	ldrb	r3, [r3, #16]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_RTC_SetDate+0x34>
 8003468:	2302      	movs	r3, #2
 800346a:	e091      	b.n	8003590 <HAL_RTC_SetDate+0x158>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2202      	movs	r2, #2
 8003476:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10c      	bne.n	8003498 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	78da      	ldrb	r2, [r3, #3]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	785a      	ldrb	r2, [r3, #1]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	789a      	ldrb	r2, [r3, #2]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	739a      	strb	r2, [r3, #14]
 8003496:	e01a      	b.n	80034ce <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	78db      	ldrb	r3, [r3, #3]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fa9f 	bl	80039e0 <RTC_Bcd2ToByte>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa96 	bl	80039e0 <RTC_Bcd2ToByte>
 80034b4:	4603      	mov	r3, r0
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fa8d 	bl	80039e0 <RTC_Bcd2ToByte>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	7bdb      	ldrb	r3, [r3, #15]
 80034d2:	4618      	mov	r0, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	7b59      	ldrb	r1, [r3, #13]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	7b9b      	ldrb	r3, [r3, #14]
 80034dc:	461a      	mov	r2, r3
 80034de:	f000 fb77 	bl	8003bd0 <RTC_WeekDayNum>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	7b1a      	ldrb	r2, [r3, #12]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f970 	bl	80037d8 <RTC_ReadTimeCounter>
 80034f8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4a26      	ldr	r2, [pc, #152]	; (8003598 <HAL_RTC_SetDate+0x160>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	0adb      	lsrs	r3, r3, #11
 8003504:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b18      	cmp	r3, #24
 800350a:	d93a      	bls.n	8003582 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	4a23      	ldr	r2, [pc, #140]	; (800359c <HAL_RTC_SetDate+0x164>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	4a22      	ldr	r2, [pc, #136]	; (80035a0 <HAL_RTC_SetDate+0x168>)
 8003518:	fb02 f303 	mul.w	r3, r2, r3
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003522:	69f9      	ldr	r1, [r7, #28]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f987 	bl	8003838 <RTC_WriteTimeCounter>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2204      	movs	r2, #4
 8003534:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e027      	b.n	8003590 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f9a0 	bl	8003886 <RTC_ReadAlarmCounter>
 8003546:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d018      	beq.n	8003582 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	429a      	cmp	r2, r3
 8003556:	d214      	bcs.n	8003582 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800355e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003562:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003564:	69b9      	ldr	r1, [r7, #24]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f9a6 	bl	80038b8 <RTC_WriteAlarmCounter>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2204      	movs	r2, #4
 8003576:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e006      	b.n	8003590 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	91a2b3c5 	.word	0x91a2b3c5
 800359c:	aaaaaaab 	.word	0xaaaaaaab
 80035a0:	00015180 	.word	0x00015180

080035a4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	2100      	movs	r1, #0
 80035b6:	460a      	mov	r2, r1
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	460a      	mov	r2, r1
 80035bc:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_RTC_GetDate+0x26>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e03a      	b.n	8003644 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80035ce:	f107 0314 	add.w	r3, r7, #20
 80035d2:	2200      	movs	r2, #0
 80035d4:	4619      	mov	r1, r3
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff fe56 	bl	8003288 <HAL_RTC_GetTime>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e02e      	b.n	8003644 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	7b1a      	ldrb	r2, [r3, #12]
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	7bda      	ldrb	r2, [r3, #15]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	7b5a      	ldrb	r2, [r3, #13]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	7b9a      	ldrb	r2, [r3, #14]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01a      	beq.n	8003642 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	78db      	ldrb	r3, [r3, #3]
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f9c8 	bl	80039a6 <RTC_ByteToBcd2>
 8003616:	4603      	mov	r3, r0
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9bf 	bl	80039a6 <RTC_ByteToBcd2>
 8003628:	4603      	mov	r3, r0
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	789b      	ldrb	r3, [r3, #2]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f9b6 	bl	80039a6 <RTC_ByteToBcd2>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2100      	movs	r1, #0
 8003662:	460a      	mov	r2, r1
 8003664:	801a      	strh	r2, [r3, #0]
 8003666:	460a      	mov	r2, r1
 8003668:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_RTC_SetAlarm+0x2a>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RTC_SetAlarm+0x2e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07d      	b.n	8003776 <HAL_RTC_SetAlarm+0x12a>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	7c1b      	ldrb	r3, [r3, #16]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_RTC_SetAlarm+0x3a>
 8003682:	2302      	movs	r3, #2
 8003684:	e077      	b.n	8003776 <HAL_RTC_SetAlarm+0x12a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2201      	movs	r2, #1
 800368a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2202      	movs	r2, #2
 8003690:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003692:	f107 0314 	add.w	r3, r7, #20
 8003696:	2200      	movs	r2, #0
 8003698:	4619      	mov	r1, r3
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff fdf4 	bl	8003288 <HAL_RTC_GetTime>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_RTC_SetAlarm+0x5e>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e065      	b.n	8003776 <HAL_RTC_SetAlarm+0x12a>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80036aa:	7d3b      	ldrb	r3, [r7, #20]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80036b2:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 80036b6:	7d7b      	ldrb	r3, [r7, #21]
 80036b8:	4619      	mov	r1, r3
 80036ba:	460b      	mov	r3, r1
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a5b      	subs	r3, r3, r1
 80036c0:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80036c2:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80036c4:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80036c6:	4413      	add	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d113      	bne.n	80036f8 <HAL_RTC_SetAlarm+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80036da:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	4619      	mov	r1, r3
 80036e4:	460b      	mov	r3, r1
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a5b      	subs	r3, r3, r1
 80036ea:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80036ec:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80036f2:	4413      	add	r3, r2
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	e01e      	b.n	8003736 <HAL_RTC_SetAlarm+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f96f 	bl	80039e0 <RTC_Bcd2ToByte>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800370a:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f964 	bl	80039e0 <RTC_Bcd2ToByte>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003724:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f958 	bl	80039e0 <RTC_Bcd2ToByte>
 8003730:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003732:	4423      	add	r3, r4
 8003734:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	429a      	cmp	r2, r3
 800373c:	d205      	bcs.n	800374a <HAL_RTC_SetAlarm+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003744:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003748:	61fb      	str	r3, [r7, #28]
  }

  /* Write Alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f8b3 	bl	80038b8 <RTC_WriteAlarmCounter>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_RTC_SetAlarm+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2204      	movs	r2, #4
 800375c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e006      	b.n	8003776 <HAL_RTC_SetAlarm+0x12a>
  }
  else
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003774:	2300      	movs	r3, #0
  }
}
 8003776:	4618      	mov	r0, r3
 8003778:	3724      	adds	r7, #36	; 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}

0800377e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e01d      	b.n	80037d0 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0208 	bic.w	r2, r2, #8
 80037a2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80037a4:	f7fd ffea 	bl	800177c <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80037aa:	e009      	b.n	80037c0 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80037ac:	f7fd ffe6 	bl	800177c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037ba:	d901      	bls.n	80037c0 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e007      	b.n	80037d0 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ee      	beq.n	80037ac <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	827b      	strh	r3, [r7, #18]
 80037e4:	2300      	movs	r3, #0
 80037e6:	823b      	strh	r3, [r7, #16]
 80037e8:	2300      	movs	r3, #0
 80037ea:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003808:	8a7a      	ldrh	r2, [r7, #18]
 800380a:	8a3b      	ldrh	r3, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d008      	beq.n	8003822 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003810:	8a3b      	ldrh	r3, [r7, #16]
 8003812:	041a      	lsls	r2, r3, #16
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	b29b      	uxth	r3, r3
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e004      	b.n	800382c <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003822:	8a7b      	ldrh	r3, [r7, #18]
 8003824:	041a      	lsls	r2, r3, #16
 8003826:	89fb      	ldrh	r3, [r7, #14]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800382c:	697b      	ldr	r3, [r7, #20]
}
 800382e:	4618      	mov	r0, r3
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f85d 	bl	8003906 <RTC_EnterInitMode>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
 8003856:	e011      	b.n	800387c <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	0c12      	lsrs	r2, r2, #16
 8003860:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	b292      	uxth	r2, r2
 800386a:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f872 	bl	8003956 <RTC_ExitInitMode>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	81fb      	strh	r3, [r7, #14]
 8003892:	2300      	movs	r3, #0
 8003894:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80038a6:	89fb      	ldrh	r3, [r7, #14]
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	89bb      	ldrh	r3, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bc80      	pop	{r7}
 80038b6:	4770      	bx	lr

080038b8 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f81d 	bl	8003906 <RTC_EnterInitMode>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	e011      	b.n	80038fc <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	0c12      	lsrs	r2, r2, #16
 80038e0:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	b292      	uxth	r2, r2
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f832 	bl	8003956 <RTC_ExitInitMode>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003912:	f7fd ff33 	bl	800177c <HAL_GetTick>
 8003916:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003918:	e009      	b.n	800392e <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800391a:	f7fd ff2f 	bl	800177c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003928:	d901      	bls.n	800392e <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e00f      	b.n	800394e <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ee      	beq.n	800391a <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0210 	orr.w	r2, r2, #16
 800394a:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0210 	bic.w	r2, r2, #16
 8003970:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003972:	f7fd ff03 	bl	800177c <HAL_GetTick>
 8003976:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003978:	e009      	b.n	800398e <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800397a:	f7fd feff 	bl	800177c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003988:	d901      	bls.n	800398e <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e007      	b.n	800399e <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ee      	beq.n	800397a <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80039b4:	e005      	b.n	80039c2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	3b0a      	subs	r3, #10
 80039c0:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d8f6      	bhi.n	80039b6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	b2db      	uxtb	r3, r3
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr

080039e0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	4603      	mov	r3, r0
 80039e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	461a      	mov	r2, r3
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	b2db      	uxtb	r3, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7bdb      	ldrb	r3, [r3, #15]
 8003a38:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7b5b      	ldrb	r3, [r3, #13]
 8003a3e:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7b9b      	ldrb	r3, [r3, #14]
 8003a44:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	e06f      	b.n	8003b2c <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d011      	beq.n	8003a76 <RTC_DateUpdate+0x5c>
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d00e      	beq.n	8003a76 <RTC_DateUpdate+0x5c>
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d00b      	beq.n	8003a76 <RTC_DateUpdate+0x5c>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	d008      	beq.n	8003a76 <RTC_DateUpdate+0x5c>
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d005      	beq.n	8003a76 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b0a      	cmp	r3, #10
 8003a6e:	d002      	beq.n	8003a76 <RTC_DateUpdate+0x5c>
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d117      	bne.n	8003aa6 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b1e      	cmp	r3, #30
 8003a7a:	d803      	bhi.n	8003a84 <RTC_DateUpdate+0x6a>
      {
        day++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003a82:	e050      	b.n	8003b26 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	d005      	beq.n	8003a96 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003a90:	2301      	movs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003a94:	e047      	b.n	8003b26 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003a96:	2301      	movs	r3, #1
 8003a98:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
          year++;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003aa4:	e03f      	b.n	8003b26 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d008      	beq.n	8003abe <RTC_DateUpdate+0xa4>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d005      	beq.n	8003abe <RTC_DateUpdate+0xa4>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b09      	cmp	r3, #9
 8003ab6:	d002      	beq.n	8003abe <RTC_DateUpdate+0xa4>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b0b      	cmp	r3, #11
 8003abc:	d10c      	bne.n	8003ad8 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b1d      	cmp	r3, #29
 8003ac2:	d803      	bhi.n	8003acc <RTC_DateUpdate+0xb2>
      {
        day++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003aca:	e02c      	b.n	8003b26 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003ad6:	e026      	b.n	8003b26 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d123      	bne.n	8003b26 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b1b      	cmp	r3, #27
 8003ae2:	d803      	bhi.n	8003aec <RTC_DateUpdate+0xd2>
      {
        day++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e01c      	b.n	8003b26 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2b1c      	cmp	r3, #28
 8003af0:	d111      	bne.n	8003b16 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f838 	bl	8003b6c <RTC_IsLeapYear>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <RTC_DateUpdate+0xf0>
        {
          day++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00d      	b.n	8003b26 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003b10:	2301      	movs	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	e007      	b.n	8003b26 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b1d      	cmp	r3, #29
 8003b1a:	d104      	bne.n	8003b26 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003b22:	2301      	movs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d38b      	bcc.n	8003a4c <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f000 f83a 	bl	8003bd0 <RTC_WeekDayNum>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	731a      	strb	r2, [r3, #12]
}
 8003b64:	bf00      	nop
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	4603      	mov	r3, r0
 8003b74:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e01d      	b.n	8003bc2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003b86:	88fb      	ldrh	r3, [r7, #6]
 8003b88:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <RTC_IsLeapYear+0x60>)
 8003b8a:	fba2 1203 	umull	r1, r2, r2, r3
 8003b8e:	0952      	lsrs	r2, r2, #5
 8003b90:	2164      	movs	r1, #100	; 0x64
 8003b92:	fb01 f202 	mul.w	r2, r1, r2
 8003b96:	1a9b      	subs	r3, r3, r2
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00f      	b.n	8003bc2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <RTC_IsLeapYear+0x60>)
 8003ba6:	fba2 1203 	umull	r1, r2, r2, r3
 8003baa:	09d2      	lsrs	r2, r2, #7
 8003bac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003bb0:	fb01 f202 	mul.w	r2, r1, r2
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003bc0:	2300      	movs	r3, #0
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	51eb851f 	.word	0x51eb851f

08003bd0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	70fb      	strb	r3, [r7, #3]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003bee:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d82d      	bhi.n	8003c52 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <RTC_WeekDayNum+0xe4>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	085a      	lsrs	r2, r3, #1
 8003c0a:	78bb      	ldrb	r3, [r7, #2]
 8003c0c:	441a      	add	r2, r3
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	441a      	add	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	4926      	ldr	r1, [pc, #152]	; (8003cb8 <RTC_WeekDayNum+0xe8>)
 8003c20:	fba1 1303 	umull	r1, r3, r1, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	1ad2      	subs	r2, r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	4922      	ldr	r1, [pc, #136]	; (8003cb8 <RTC_WeekDayNum+0xe8>)
 8003c2e:	fba1 1303 	umull	r1, r3, r1, r3
 8003c32:	09db      	lsrs	r3, r3, #7
 8003c34:	4413      	add	r3, r2
 8003c36:	1d1a      	adds	r2, r3, #4
 8003c38:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <RTC_WeekDayNum+0xec>)
 8003c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3e:	1ad1      	subs	r1, r2, r3
 8003c40:	0849      	lsrs	r1, r1, #1
 8003c42:	440b      	add	r3, r1
 8003c44:	0899      	lsrs	r1, r3, #2
 8003c46:	460b      	mov	r3, r1
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	1a5b      	subs	r3, r3, r1
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e029      	b.n	8003ca6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <RTC_WeekDayNum+0xe4>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	085a      	lsrs	r2, r3, #1
 8003c66:	78bb      	ldrb	r3, [r7, #2]
 8003c68:	441a      	add	r2, r3
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	089b      	lsrs	r3, r3, #2
 8003c72:	441a      	add	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4910      	ldr	r1, [pc, #64]	; (8003cb8 <RTC_WeekDayNum+0xe8>)
 8003c78:	fba1 1303 	umull	r1, r3, r1, r3
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	1ad2      	subs	r2, r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	490d      	ldr	r1, [pc, #52]	; (8003cb8 <RTC_WeekDayNum+0xe8>)
 8003c84:	fba1 1303 	umull	r1, r3, r1, r3
 8003c88:	09db      	lsrs	r3, r3, #7
 8003c8a:	4413      	add	r3, r2
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <RTC_WeekDayNum+0xec>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	1ad1      	subs	r1, r2, r3
 8003c96:	0849      	lsrs	r1, r1, #1
 8003c98:	440b      	add	r3, r1
 8003c9a:	0899      	lsrs	r1, r3, #2
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	1a5b      	subs	r3, r3, r1
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	b2db      	uxtb	r3, r3
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	38e38e39 	.word	0x38e38e39
 8003cb8:	51eb851f 	.word	0x51eb851f
 8003cbc:	24924925 	.word	0x24924925

08003cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e076      	b.n	8003dc0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d108      	bne.n	8003cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ce2:	d009      	beq.n	8003cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	61da      	str	r2, [r3, #28]
 8003cea:	e005      	b.n	8003cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd fb30 	bl	8001378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7c:	ea42 0103 	orr.w	r1, r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	0c1a      	lsrs	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f002 0204 	and.w	r2, r2, #4
 8003d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_SPI_Transmit+0x22>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e12d      	b.n	8004046 <HAL_SPI_Transmit+0x27e>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df2:	f7fd fcc3 	bl	800177c <HAL_GetTick>
 8003df6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d002      	beq.n	8003e0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e0c:	e116      	b.n	800403c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0x52>
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e1e:	e10d      	b.n	800403c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2203      	movs	r2, #3
 8003e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e66:	d10f      	bne.n	8003e88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b40      	cmp	r3, #64	; 0x40
 8003e94:	d007      	beq.n	8003ea6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eae:	d14f      	bne.n	8003f50 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_SPI_Transmit+0xf6>
 8003eb8:	8afb      	ldrh	r3, [r7, #22]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d142      	bne.n	8003f44 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	881a      	ldrh	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ee2:	e02f      	b.n	8003f44 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d112      	bne.n	8003f18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f16:	e015      	b.n	8003f44 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f18:	f7fd fc30 	bl	800177c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d803      	bhi.n	8003f30 <HAL_SPI_Transmit+0x168>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d102      	bne.n	8003f36 <HAL_SPI_Transmit+0x16e>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f42:	e07b      	b.n	800403c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1ca      	bne.n	8003ee4 <HAL_SPI_Transmit+0x11c>
 8003f4e:	e050      	b.n	8003ff2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_SPI_Transmit+0x196>
 8003f58:	8afb      	ldrh	r3, [r7, #22]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d144      	bne.n	8003fe8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	7812      	ldrb	r2, [r2, #0]
 8003f6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f84:	e030      	b.n	8003fe8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d113      	bne.n	8003fbc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fba:	e015      	b.n	8003fe8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fbc:	f7fd fbde 	bl	800177c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d803      	bhi.n	8003fd4 <HAL_SPI_Transmit+0x20c>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d102      	bne.n	8003fda <HAL_SPI_Transmit+0x212>
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d106      	bne.n	8003fe8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003fe6:	e029      	b.n	800403c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1c9      	bne.n	8003f86 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fa62 	bl	80044c0 <SPI_EndRxTxTransaction>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e003      	b.n	800403c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004044:	7ffb      	ldrb	r3, [r7, #31]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3720      	adds	r7, #32
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b08c      	sub	sp, #48	; 0x30
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x26>
 8004070:	2302      	movs	r3, #2
 8004072:	e198      	b.n	80043a6 <HAL_SPI_TransmitReceive+0x358>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800407c:	f7fd fb7e 	bl	800177c <HAL_GetTick>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004092:	887b      	ldrh	r3, [r7, #2]
 8004094:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004096:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800409a:	2b01      	cmp	r3, #1
 800409c:	d00f      	beq.n	80040be <HAL_SPI_TransmitReceive+0x70>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a4:	d107      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <HAL_SPI_TransmitReceive+0x68>
 80040ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d003      	beq.n	80040be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
 80040b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040bc:	e16d      	b.n	800439a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x82>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x82>
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80040d6:	e160      	b.n	800439a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d003      	beq.n	80040ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2205      	movs	r2, #5
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	887a      	ldrh	r2, [r7, #2]
 8004102:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	887a      	ldrh	r2, [r7, #2]
 800410e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b40      	cmp	r3, #64	; 0x40
 800412e:	d007      	beq.n	8004140 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004148:	d17c      	bne.n	8004244 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_SPI_TransmitReceive+0x10a>
 8004152:	8b7b      	ldrh	r3, [r7, #26]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d16a      	bne.n	800422e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800417c:	e057      	b.n	800422e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b02      	cmp	r3, #2
 800418a:	d11b      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x176>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d016      	beq.n	80041c4 <HAL_SPI_TransmitReceive+0x176>
 8004196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004198:	2b01      	cmp	r3, #1
 800419a:	d113      	bne.n	80041c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	881a      	ldrh	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d119      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x1b8>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d014      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e6:	b292      	uxth	r2, r2
 80041e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	1c9a      	adds	r2, r3, #2
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004202:	2301      	movs	r3, #1
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004206:	f7fd fab9 	bl	800177c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004212:	429a      	cmp	r2, r3
 8004214:	d80b      	bhi.n	800422e <HAL_SPI_TransmitReceive+0x1e0>
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d007      	beq.n	800422e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800422c:	e0b5      	b.n	800439a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1a2      	bne.n	800417e <HAL_SPI_TransmitReceive+0x130>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d19d      	bne.n	800417e <HAL_SPI_TransmitReceive+0x130>
 8004242:	e080      	b.n	8004346 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_SPI_TransmitReceive+0x204>
 800424c:	8b7b      	ldrh	r3, [r7, #26]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d16f      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	330c      	adds	r3, #12
 800425c:	7812      	ldrb	r2, [r2, #0]
 800425e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004278:	e05b      	b.n	8004332 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b02      	cmp	r3, #2
 8004286:	d11c      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x274>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d017      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x274>
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d114      	bne.n	80042c2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d119      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x2b6>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d014      	beq.n	8004304 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004300:	2301      	movs	r3, #1
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004304:	f7fd fa3a 	bl	800177c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004310:	429a      	cmp	r2, r3
 8004312:	d803      	bhi.n	800431c <HAL_SPI_TransmitReceive+0x2ce>
 8004314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d102      	bne.n	8004322 <HAL_SPI_TransmitReceive+0x2d4>
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004330:	e033      	b.n	800439a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d19e      	bne.n	800427a <HAL_SPI_TransmitReceive+0x22c>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d199      	bne.n	800427a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004348:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f8b8 	bl	80044c0 <SPI_EndRxTxTransaction>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d006      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004362:	e01a      	b.n	800439a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004390:	e003      	b.n	800439a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3730      	adds	r7, #48	; 0x30
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043c0:	f7fd f9dc 	bl	800177c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043d0:	f7fd f9d4 	bl	800177c <HAL_GetTick>
 80043d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043d6:	4b39      	ldr	r3, [pc, #228]	; (80044bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	015b      	lsls	r3, r3, #5
 80043dc:	0d1b      	lsrs	r3, r3, #20
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	fb02 f303 	mul.w	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e6:	e054      	b.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d050      	beq.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043f0:	f7fd f9c4 	bl	800177c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d902      	bls.n	8004406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d13d      	bne.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441e:	d111      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	d004      	beq.n	8004434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d107      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800444c:	d10f      	bne.n	800446e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800446c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e017      	b.n	80044b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3b01      	subs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d19b      	bne.n	80043e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3720      	adds	r7, #32
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000000 	.word	0x20000000

080044c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2180      	movs	r1, #128	; 0x80
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff ff6a 	bl	80043b0 <SPI_WaitFlagStateUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e6:	f043 0220 	orr.w	r2, r3, #32
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e000      	b.n	80044f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e042      	b.n	8004594 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fc ff72 	bl	800140c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2224      	movs	r2, #36	; 0x24
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800453e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f91d 	bl	8004780 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004554:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695a      	ldr	r2, [r3, #20]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004564:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004574:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d16d      	bne.n	8004698 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_UART_Transmit+0x2c>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e066      	b.n	800469a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2221      	movs	r2, #33	; 0x21
 80045d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045da:	f7fd f8cf 	bl	800177c <HAL_GetTick>
 80045de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	88fa      	ldrh	r2, [r7, #6]
 80045e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d108      	bne.n	8004608 <HAL_UART_Transmit+0x6c>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d104      	bne.n	8004608 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045fe:	2300      	movs	r3, #0
 8004600:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	e003      	b.n	8004610 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004610:	e02a      	b.n	8004668 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2200      	movs	r2, #0
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f840 	bl	80046a2 <UART_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e036      	b.n	800469a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	3302      	adds	r3, #2
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	e007      	b.n	800465a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3301      	adds	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800465e:	b29b      	uxth	r3, r3
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1cf      	bne.n	8004612 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f810 	bl	80046a2 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e006      	b.n	800469a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	e000      	b.n	800469a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
  }
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b090      	sub	sp, #64	; 0x40
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	4613      	mov	r3, r2
 80046b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b2:	e050      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d04c      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80046c2:	f7fd f85b 	bl	800177c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d241      	bcs.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046f2:	637a      	str	r2, [r7, #52]	; 0x34
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	613b      	str	r3, [r7, #16]
   return(result);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	63bb      	str	r3, [r7, #56]	; 0x38
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3314      	adds	r3, #20
 8004724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004726:	623a      	str	r2, [r7, #32]
 8004728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	69f9      	ldr	r1, [r7, #28]
 800472c:	6a3a      	ldr	r2, [r7, #32]
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	61bb      	str	r3, [r7, #24]
   return(result);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e5      	bne.n	8004706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00f      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d09f      	beq.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3740      	adds	r7, #64	; 0x40
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047ba:	f023 030c 	bic.w	r3, r3, #12
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	430b      	orrs	r3, r1
 80047c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <UART_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d103      	bne.n	80047f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fe fa8c 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	e002      	b.n	80047f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7fe fa74 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80047f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	009a      	lsls	r2, r3, #2
 8004800:	441a      	add	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	4a22      	ldr	r2, [pc, #136]	; (8004898 <UART_SetConfig+0x118>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	0119      	lsls	r1, r3, #4
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009a      	lsls	r2, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	fbb2 f2f3 	udiv	r2, r2, r3
 800482c:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <UART_SetConfig+0x118>)
 800482e:	fba3 0302 	umull	r0, r3, r3, r2
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2064      	movs	r0, #100	; 0x64
 8004836:	fb00 f303 	mul.w	r3, r0, r3
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	3332      	adds	r3, #50	; 0x32
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <UART_SetConfig+0x118>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800484c:	4419      	add	r1, r3
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fbb2 f2f3 	udiv	r2, r2, r3
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <UART_SetConfig+0x118>)
 8004866:	fba3 0302 	umull	r0, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2064      	movs	r0, #100	; 0x64
 800486e:	fb00 f303 	mul.w	r3, r0, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	3332      	adds	r3, #50	; 0x32
 8004878:	4a07      	ldr	r2, [pc, #28]	; (8004898 <UART_SetConfig+0x118>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	f003 020f 	and.w	r2, r3, #15
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	440a      	add	r2, r1
 800488a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40013800 	.word	0x40013800
 8004898:	51eb851f 	.word	0x51eb851f

0800489c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80048a0:	4904      	ldr	r1, [pc, #16]	; (80048b4 <MX_FATFS_Init+0x18>)
 80048a2:	4805      	ldr	r0, [pc, #20]	; (80048b8 <MX_FATFS_Init+0x1c>)
 80048a4:	f003 fbc2 	bl	800802c <FATFS_LinkDriver>
 80048a8:	4603      	mov	r3, r0
 80048aa:	461a      	mov	r2, r3
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <MX_FATFS_Init+0x20>)
 80048ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000468 	.word	0x20000468
 80048b8:	2000000c 	.word	0x2000000c
 80048bc:	20000464 	.word	0x20000464

080048c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80048c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc80      	pop	{r7}
 80048cc:	4770      	bx	lr

080048ce <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	4603      	mov	r3, r0
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
    return USER_SPI_initialize(pdrv);
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 f9d2 	bl	8004c84 <USER_SPI_initialize>
 80048e0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b082      	sub	sp, #8
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_status(pdrv);
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fab0 	bl	8004e5c <USER_SPI_status>
 80048fc:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	4603      	mov	r3, r0
 8004914:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
    return USER_SPI_read(pdrv, buff, sector, count);
 8004916:	7bf8      	ldrb	r0, [r7, #15]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	f000 fab1 	bl	8004e84 <USER_SPI_read>
 8004922:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
    return USER_SPI_write(pdrv, buff, sector, count);
 800493c:	7bf8      	ldrb	r0, [r7, #15]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	f000 fb04 	bl	8004f50 <USER_SPI_write>
 8004948:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	603a      	str	r2, [r7, #0]
 800495c:	71fb      	strb	r3, [r7, #7]
 800495e:	460b      	mov	r3, r1
 8004960:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004962:	79b9      	ldrb	r1, [r7, #6]
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fb6d 	bl	8005048 <USER_SPI_ioctl>
 800496e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004980:	f7fc fefc 	bl	800177c <HAL_GetTick>
 8004984:	4603      	mov	r3, r0
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <SPI_Timer_On+0x20>)
 8004988:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <SPI_Timer_On+0x24>)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	20000470 	.word	0x20000470
 800499c:	20000474 	.word	0x20000474

080049a0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80049a4:	f7fc feea 	bl	800177c <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <SPI_Timer_Status+0x24>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <SPI_Timer_Status+0x28>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	bf34      	ite	cc
 80049b8:	2301      	movcc	r3, #1
 80049ba:	2300      	movcs	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
}
 80049be:	4618      	mov	r0, r3
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000470 	.word	0x20000470
 80049c8:	20000474 	.word	0x20000474

080049cc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80049d6:	f107 020f 	add.w	r2, r7, #15
 80049da:	1df9      	adds	r1, r7, #7
 80049dc:	2332      	movs	r3, #50	; 0x32
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2301      	movs	r3, #1
 80049e2:	4804      	ldr	r0, [pc, #16]	; (80049f4 <xchg_spi+0x28>)
 80049e4:	f7ff fb33 	bl	800404e <HAL_SPI_TransmitReceive>
    return rxDat;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	2000027c 	.word	0x2000027c

080049f8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80049f8:	b590      	push	{r4, r7, lr}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e00a      	b.n	8004a1e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	18d4      	adds	r4, r2, r3
 8004a0e:	20ff      	movs	r0, #255	; 0xff
 8004a10:	f7ff ffdc 	bl	80049cc <xchg_spi>
 8004a14:	4603      	mov	r3, r0
 8004a16:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3f0      	bcc.n	8004a08 <rcvr_spi_multi+0x10>
	}
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}

08004a30 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <xmit_spi_multi+0x24>)
 8004a46:	f7ff f9bf 	bl	8003dc8 <HAL_SPI_Transmit>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	2000027c 	.word	0x2000027c

08004a58 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004a60:	f7fc fe8c 	bl	800177c <HAL_GetTick>
 8004a64:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004a6a:	20ff      	movs	r0, #255	; 0xff
 8004a6c:	f7ff ffae 	bl	80049cc <xchg_spi>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2bff      	cmp	r3, #255	; 0xff
 8004a78:	d007      	beq.n	8004a8a <wait_ready+0x32>
 8004a7a:	f7fc fe7f 	bl	800177c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d8ef      	bhi.n	8004a6a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2bff      	cmp	r3, #255	; 0xff
 8004a8e:	bf0c      	ite	eq
 8004a90:	2301      	moveq	r3, #1
 8004a92:	2300      	movne	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4803      	ldr	r0, [pc, #12]	; (8004ab8 <despiselect+0x18>)
 8004aaa:	f7fd fd29 	bl	8002500 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004aae:	20ff      	movs	r0, #255	; 0xff
 8004ab0:	f7ff ff8c 	bl	80049cc <xchg_spi>

}
 8004ab4:	bf00      	nop
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40010c00 	.word	0x40010c00

08004abc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	4809      	ldr	r0, [pc, #36]	; (8004aec <spiselect+0x30>)
 8004ac6:	f7fd fd1b 	bl	8002500 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004aca:	20ff      	movs	r0, #255	; 0xff
 8004acc:	f7ff ff7e 	bl	80049cc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ad4:	f7ff ffc0 	bl	8004a58 <wait_ready>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <spiselect+0x26>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e002      	b.n	8004ae8 <spiselect+0x2c>

	despiselect();
 8004ae2:	f7ff ffdd 	bl	8004aa0 <despiselect>
	return 0;	/* Timeout */
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40010c00 	.word	0x40010c00

08004af0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004afa:	20c8      	movs	r0, #200	; 0xc8
 8004afc:	f7ff ff3c 	bl	8004978 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004b00:	20ff      	movs	r0, #255	; 0xff
 8004b02:	f7ff ff63 	bl	80049cc <xchg_spi>
 8004b06:	4603      	mov	r3, r0
 8004b08:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004b0a:	7bfb      	ldrb	r3, [r7, #15]
 8004b0c:	2bff      	cmp	r3, #255	; 0xff
 8004b0e:	d104      	bne.n	8004b1a <rcvr_datablock+0x2a>
 8004b10:	f7ff ff46 	bl	80049a0 <SPI_Timer_Status>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f2      	bne.n	8004b00 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2bfe      	cmp	r3, #254	; 0xfe
 8004b1e:	d001      	beq.n	8004b24 <rcvr_datablock+0x34>
 8004b20:	2300      	movs	r3, #0
 8004b22:	e00a      	b.n	8004b3a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ff66 	bl	80049f8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004b2c:	20ff      	movs	r0, #255	; 0xff
 8004b2e:	f7ff ff4d 	bl	80049cc <xchg_spi>
 8004b32:	20ff      	movs	r0, #255	; 0xff
 8004b34:	f7ff ff4a 	bl	80049cc <xchg_spi>

	return 1;						/* Function succeeded */
 8004b38:	2301      	movs	r3, #1
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b52:	f7ff ff81 	bl	8004a58 <wait_ready>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <xmit_datablock+0x1e>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e01e      	b.n	8004b9e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ff32 	bl	80049cc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004b68:	78fb      	ldrb	r3, [r7, #3]
 8004b6a:	2bfd      	cmp	r3, #253	; 0xfd
 8004b6c:	d016      	beq.n	8004b9c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ff5c 	bl	8004a30 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004b78:	20ff      	movs	r0, #255	; 0xff
 8004b7a:	f7ff ff27 	bl	80049cc <xchg_spi>
 8004b7e:	20ff      	movs	r0, #255	; 0xff
 8004b80:	f7ff ff24 	bl	80049cc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004b84:	20ff      	movs	r0, #255	; 0xff
 8004b86:	f7ff ff21 	bl	80049cc <xchg_spi>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d001      	beq.n	8004b9c <xmit_datablock+0x5a>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <xmit_datablock+0x5c>
	}
	return 1;
 8004b9c:	2301      	movs	r3, #1
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	6039      	str	r1, [r7, #0]
 8004bb0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da0e      	bge.n	8004bd8 <send_cmd+0x32>
		cmd &= 0x7F;
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bc0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	2037      	movs	r0, #55	; 0x37
 8004bc6:	f7ff ffee 	bl	8004ba6 <send_cmd>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d901      	bls.n	8004bd8 <send_cmd+0x32>
 8004bd4:	7bbb      	ldrb	r3, [r7, #14]
 8004bd6:	e051      	b.n	8004c7c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	2b0c      	cmp	r3, #12
 8004bdc:	d008      	beq.n	8004bf0 <send_cmd+0x4a>
		despiselect();
 8004bde:	f7ff ff5f 	bl	8004aa0 <despiselect>
		if (!spiselect()) return 0xFF;
 8004be2:	f7ff ff6b 	bl	8004abc <spiselect>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <send_cmd+0x4a>
 8004bec:	23ff      	movs	r3, #255	; 0xff
 8004bee:	e045      	b.n	8004c7c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fee7 	bl	80049cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fee1 	bl	80049cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fedb 	bl	80049cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fed5 	bl	80049cc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fed0 	bl	80049cc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004c30:	79fb      	ldrb	r3, [r7, #7]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <send_cmd+0x94>
 8004c36:	2395      	movs	r3, #149	; 0x95
 8004c38:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004c3a:	79fb      	ldrb	r3, [r7, #7]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d101      	bne.n	8004c44 <send_cmd+0x9e>
 8004c40:	2387      	movs	r3, #135	; 0x87
 8004c42:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff fec0 	bl	80049cc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	d102      	bne.n	8004c58 <send_cmd+0xb2>
 8004c52:	20ff      	movs	r0, #255	; 0xff
 8004c54:	f7ff feba 	bl	80049cc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004c58:	230a      	movs	r3, #10
 8004c5a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8004c5c:	20ff      	movs	r0, #255	; 0xff
 8004c5e:	f7ff feb5 	bl	80049cc <xchg_spi>
 8004c62:	4603      	mov	r3, r0
 8004c64:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8004c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	da05      	bge.n	8004c7a <send_cmd+0xd4>
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <send_cmd+0xb6>

	return res;							/* Return received response */
 8004c7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004c84:	b590      	push	{r4, r7, lr}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <USER_SPI_initialize+0x14>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0d6      	b.n	8004e46 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004c98:	4b6d      	ldr	r3, [pc, #436]	; (8004e50 <USER_SPI_initialize+0x1cc>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <USER_SPI_initialize+0x2a>
 8004ca6:	4b6a      	ldr	r3, [pc, #424]	; (8004e50 <USER_SPI_initialize+0x1cc>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e0cb      	b.n	8004e46 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8004cae:	4b69      	ldr	r3, [pc, #420]	; (8004e54 <USER_SPI_initialize+0x1d0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004cb8:	4b66      	ldr	r3, [pc, #408]	; (8004e54 <USER_SPI_initialize+0x1d0>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8004cc0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004cc2:	230a      	movs	r3, #10
 8004cc4:	73fb      	strb	r3, [r7, #15]
 8004cc6:	e005      	b.n	8004cd4 <USER_SPI_initialize+0x50>
 8004cc8:	20ff      	movs	r0, #255	; 0xff
 8004cca:	f7ff fe7f 	bl	80049cc <xchg_spi>
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f6      	bne.n	8004cc8 <USER_SPI_initialize+0x44>

	ty = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	f7ff ff60 	bl	8004ba6 <send_cmd>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	f040 808b 	bne.w	8004e04 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cf2:	f7ff fe41 	bl	8004978 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004cf6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004cfa:	2008      	movs	r0, #8
 8004cfc:	f7ff ff53 	bl	8004ba6 <send_cmd>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d151      	bne.n	8004daa <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e00d      	b.n	8004d28 <USER_SPI_initialize+0xa4>
 8004d0c:	7bfc      	ldrb	r4, [r7, #15]
 8004d0e:	20ff      	movs	r0, #255	; 0xff
 8004d10:	f7ff fe5c 	bl	80049cc <xchg_spi>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	f104 0310 	add.w	r3, r4, #16
 8004d1c:	443b      	add	r3, r7
 8004d1e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	3301      	adds	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d9ee      	bls.n	8004d0c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004d2e:	7abb      	ldrb	r3, [r7, #10]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d167      	bne.n	8004e04 <USER_SPI_initialize+0x180>
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	2baa      	cmp	r3, #170	; 0xaa
 8004d38:	d164      	bne.n	8004e04 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004d3a:	bf00      	nop
 8004d3c:	f7ff fe30 	bl	80049a0 <SPI_Timer_Status>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <USER_SPI_initialize+0xd2>
 8004d46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d4a:	20a9      	movs	r0, #169	; 0xa9
 8004d4c:	f7ff ff2b 	bl	8004ba6 <send_cmd>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f2      	bne.n	8004d3c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004d56:	f7ff fe23 	bl	80049a0 <SPI_Timer_Status>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d051      	beq.n	8004e04 <USER_SPI_initialize+0x180>
 8004d60:	2100      	movs	r1, #0
 8004d62:	203a      	movs	r0, #58	; 0x3a
 8004d64:	f7ff ff1f 	bl	8004ba6 <send_cmd>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d14a      	bne.n	8004e04 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
 8004d72:	e00d      	b.n	8004d90 <USER_SPI_initialize+0x10c>
 8004d74:	7bfc      	ldrb	r4, [r7, #15]
 8004d76:	20ff      	movs	r0, #255	; 0xff
 8004d78:	f7ff fe28 	bl	80049cc <xchg_spi>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f104 0310 	add.w	r3, r4, #16
 8004d84:	443b      	add	r3, r7
 8004d86:	f803 2c08 	strb.w	r2, [r3, #-8]
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d9ee      	bls.n	8004d74 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004d96:	7a3b      	ldrb	r3, [r7, #8]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <USER_SPI_initialize+0x120>
 8004da0:	230c      	movs	r3, #12
 8004da2:	e000      	b.n	8004da6 <USER_SPI_initialize+0x122>
 8004da4:	2304      	movs	r3, #4
 8004da6:	737b      	strb	r3, [r7, #13]
 8004da8:	e02c      	b.n	8004e04 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004daa:	2100      	movs	r1, #0
 8004dac:	20a9      	movs	r0, #169	; 0xa9
 8004dae:	f7ff fefa 	bl	8004ba6 <send_cmd>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d804      	bhi.n	8004dc2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004db8:	2302      	movs	r3, #2
 8004dba:	737b      	strb	r3, [r7, #13]
 8004dbc:	23a9      	movs	r3, #169	; 0xa9
 8004dbe:	73bb      	strb	r3, [r7, #14]
 8004dc0:	e003      	b.n	8004dca <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	737b      	strb	r3, [r7, #13]
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004dca:	bf00      	nop
 8004dcc:	f7ff fde8 	bl	80049a0 <SPI_Timer_Status>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <USER_SPI_initialize+0x162>
 8004dd6:	7bbb      	ldrb	r3, [r7, #14]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fee3 	bl	8004ba6 <send_cmd>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f2      	bne.n	8004dcc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004de6:	f7ff fddb 	bl	80049a0 <SPI_Timer_Status>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <USER_SPI_initialize+0x17c>
 8004df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004df4:	2010      	movs	r0, #16
 8004df6:	f7ff fed6 	bl	8004ba6 <send_cmd>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <USER_SPI_initialize+0x180>
				ty = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <USER_SPI_initialize+0x1d4>)
 8004e06:	7b7b      	ldrb	r3, [r7, #13]
 8004e08:	7013      	strb	r3, [r2, #0]
	despiselect();
 8004e0a:	f7ff fe49 	bl	8004aa0 <despiselect>

	if (ty) {			/* OK */
 8004e0e:	7b7b      	ldrb	r3, [r7, #13]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d012      	beq.n	8004e3a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8004e14:	4b0f      	ldr	r3, [pc, #60]	; (8004e54 <USER_SPI_initialize+0x1d0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004e1e:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <USER_SPI_initialize+0x1d0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0210 	orr.w	r2, r2, #16
 8004e26:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <USER_SPI_initialize+0x1cc>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f023 0301 	bic.w	r3, r3, #1
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <USER_SPI_initialize+0x1cc>)
 8004e36:	701a      	strb	r2, [r3, #0]
 8004e38:	e002      	b.n	8004e40 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <USER_SPI_initialize+0x1cc>)
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <USER_SPI_initialize+0x1cc>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000020 	.word	0x20000020
 8004e54:	2000027c 	.word	0x2000027c
 8004e58:	2000046c 	.word	0x2000046c

08004e5c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <USER_SPI_status+0x14>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e002      	b.n	8004e76 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <USER_SPI_status+0x24>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	b2db      	uxtb	r3, r3
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	20000020 	.word	0x20000020

08004e84 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <USER_SPI_read+0x1c>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <USER_SPI_read+0x20>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e04d      	b.n	8004f40 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004ea4:	4b28      	ldr	r3, [pc, #160]	; (8004f48 <USER_SPI_read+0xc4>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <USER_SPI_read+0x32>
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e044      	b.n	8004f40 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004eb6:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <USER_SPI_read+0xc8>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <USER_SPI_read+0x44>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	025b      	lsls	r3, r3, #9
 8004ec6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d111      	bne.n	8004ef2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	2011      	movs	r0, #17
 8004ed2:	f7ff fe68 	bl	8004ba6 <send_cmd>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d129      	bne.n	8004f30 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8004edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ee0:	68b8      	ldr	r0, [r7, #8]
 8004ee2:	f7ff fe05 	bl	8004af0 <rcvr_datablock>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d021      	beq.n	8004f30 <USER_SPI_read+0xac>
			count = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	e01e      	b.n	8004f30 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	2012      	movs	r0, #18
 8004ef6:	f7ff fe56 	bl	8004ba6 <send_cmd>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d117      	bne.n	8004f30 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f04:	68b8      	ldr	r0, [r7, #8]
 8004f06:	f7ff fdf3 	bl	8004af0 <rcvr_datablock>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <USER_SPI_read+0xa2>
				buff += 512;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004f16:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1ed      	bne.n	8004f00 <USER_SPI_read+0x7c>
 8004f24:	e000      	b.n	8004f28 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8004f26:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004f28:	2100      	movs	r1, #0
 8004f2a:	200c      	movs	r0, #12
 8004f2c:	f7ff fe3b 	bl	8004ba6 <send_cmd>
		}
	}
	despiselect();
 8004f30:	f7ff fdb6 	bl	8004aa0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf14      	ite	ne
 8004f3a:	2301      	movne	r3, #1
 8004f3c:	2300      	moveq	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000020 	.word	0x20000020
 8004f4c:	2000046c 	.word	0x2000046c

08004f50 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
 8004f5a:	603b      	str	r3, [r7, #0]
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <USER_SPI_write+0x1c>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <USER_SPI_write+0x20>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	e063      	b.n	8005038 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8004f70:	4b33      	ldr	r3, [pc, #204]	; (8005040 <USER_SPI_write+0xf0>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <USER_SPI_write+0x32>
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e05a      	b.n	8005038 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8004f82:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <USER_SPI_write+0xf0>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <USER_SPI_write+0x44>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e051      	b.n	8005038 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8004f94:	4b2b      	ldr	r3, [pc, #172]	; (8005044 <USER_SPI_write+0xf4>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <USER_SPI_write+0x56>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	025b      	lsls	r3, r3, #9
 8004fa4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d110      	bne.n	8004fce <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	2018      	movs	r0, #24
 8004fb0:	f7ff fdf9 	bl	8004ba6 <send_cmd>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d136      	bne.n	8005028 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8004fba:	21fe      	movs	r1, #254	; 0xfe
 8004fbc:	68b8      	ldr	r0, [r7, #8]
 8004fbe:	f7ff fdc0 	bl	8004b42 <xmit_datablock>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d02f      	beq.n	8005028 <USER_SPI_write+0xd8>
			count = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	e02c      	b.n	8005028 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <USER_SPI_write+0xf4>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <USER_SPI_write+0x92>
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	2097      	movs	r0, #151	; 0x97
 8004fde:	f7ff fde2 	bl	8004ba6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	2019      	movs	r0, #25
 8004fe6:	f7ff fdde 	bl	8004ba6 <send_cmd>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d11b      	bne.n	8005028 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004ff0:	21fc      	movs	r1, #252	; 0xfc
 8004ff2:	68b8      	ldr	r0, [r7, #8]
 8004ff4:	f7ff fda5 	bl	8004b42 <xmit_datablock>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <USER_SPI_write+0xc4>
				buff += 512;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005004:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	3b01      	subs	r3, #1
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1ee      	bne.n	8004ff0 <USER_SPI_write+0xa0>
 8005012:	e000      	b.n	8005016 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005014:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005016:	21fd      	movs	r1, #253	; 0xfd
 8005018:	2000      	movs	r0, #0
 800501a:	f7ff fd92 	bl	8004b42 <xmit_datablock>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <USER_SPI_write+0xd8>
 8005024:	2301      	movs	r3, #1
 8005026:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005028:	f7ff fd3a 	bl	8004aa0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf14      	ite	ne
 8005032:	2301      	movne	r3, #1
 8005034:	2300      	moveq	r3, #0
 8005036:	b2db      	uxtb	r3, r3
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000020 	.word	0x20000020
 8005044:	2000046c 	.word	0x2000046c

08005048 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b08c      	sub	sp, #48	; 0x30
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	603a      	str	r2, [r7, #0]
 8005052:	71fb      	strb	r3, [r7, #7]
 8005054:	460b      	mov	r3, r1
 8005056:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <USER_SPI_ioctl+0x1a>
 800505e:	2304      	movs	r3, #4
 8005060:	e15a      	b.n	8005318 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005062:	4baf      	ldr	r3, [pc, #700]	; (8005320 <USER_SPI_ioctl+0x2d8>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <USER_SPI_ioctl+0x2c>
 8005070:	2303      	movs	r3, #3
 8005072:	e151      	b.n	8005318 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800507a:	79bb      	ldrb	r3, [r7, #6]
 800507c:	2b04      	cmp	r3, #4
 800507e:	f200 8136 	bhi.w	80052ee <USER_SPI_ioctl+0x2a6>
 8005082:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <USER_SPI_ioctl+0x40>)
 8005084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005088:	0800509d 	.word	0x0800509d
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080052ef 	.word	0x080052ef
 8005094:	0800515d 	.word	0x0800515d
 8005098:	08005253 	.word	0x08005253
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800509c:	f7ff fd0e 	bl	8004abc <spiselect>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 8127 	beq.w	80052f6 <USER_SPI_ioctl+0x2ae>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80050ae:	e122      	b.n	80052f6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80050b0:	2100      	movs	r1, #0
 80050b2:	2009      	movs	r0, #9
 80050b4:	f7ff fd77 	bl	8004ba6 <send_cmd>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 811d 	bne.w	80052fa <USER_SPI_ioctl+0x2b2>
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	2110      	movs	r1, #16
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fd12 	bl	8004af0 <rcvr_datablock>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8113 	beq.w	80052fa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80050d4:	7b3b      	ldrb	r3, [r7, #12]
 80050d6:	099b      	lsrs	r3, r3, #6
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d111      	bne.n	8005102 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80050de:	7d7b      	ldrb	r3, [r7, #21]
 80050e0:	461a      	mov	r2, r3
 80050e2:	7d3b      	ldrb	r3, [r7, #20]
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	4413      	add	r3, r2
 80050e8:	461a      	mov	r2, r3
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80050f2:	4413      	add	r3, r2
 80050f4:	3301      	adds	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	029a      	lsls	r2, r3, #10
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e028      	b.n	8005154 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005102:	7c7b      	ldrb	r3, [r7, #17]
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	b2da      	uxtb	r2, r3
 800510a:	7dbb      	ldrb	r3, [r7, #22]
 800510c:	09db      	lsrs	r3, r3, #7
 800510e:	b2db      	uxtb	r3, r3
 8005110:	4413      	add	r3, r2
 8005112:	b2da      	uxtb	r2, r3
 8005114:	7d7b      	ldrb	r3, [r7, #21]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f003 0306 	and.w	r3, r3, #6
 800511e:	b2db      	uxtb	r3, r3
 8005120:	4413      	add	r3, r2
 8005122:	b2db      	uxtb	r3, r3
 8005124:	3302      	adds	r3, #2
 8005126:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800512a:	7d3b      	ldrb	r3, [r7, #20]
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	7cfb      	ldrb	r3, [r7, #19]
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	441a      	add	r2, r3
 8005138:	7cbb      	ldrb	r3, [r7, #18]
 800513a:	029b      	lsls	r3, r3, #10
 800513c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005140:	4413      	add	r3, r2
 8005142:	3301      	adds	r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005146:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800514a:	3b09      	subs	r3, #9
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	409a      	lsls	r2, r3
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800515a:	e0ce      	b.n	80052fa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800515c:	4b71      	ldr	r3, [pc, #452]	; (8005324 <USER_SPI_ioctl+0x2dc>)
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d031      	beq.n	80051cc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005168:	2100      	movs	r1, #0
 800516a:	208d      	movs	r0, #141	; 0x8d
 800516c:	f7ff fd1b 	bl	8004ba6 <send_cmd>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	f040 80c3 	bne.w	80052fe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005178:	20ff      	movs	r0, #255	; 0xff
 800517a:	f7ff fc27 	bl	80049cc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800517e:	f107 030c 	add.w	r3, r7, #12
 8005182:	2110      	movs	r1, #16
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fcb3 	bl	8004af0 <rcvr_datablock>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 80b6 	beq.w	80052fe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8005192:	2330      	movs	r3, #48	; 0x30
 8005194:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005198:	e007      	b.n	80051aa <USER_SPI_ioctl+0x162>
 800519a:	20ff      	movs	r0, #255	; 0xff
 800519c:	f7ff fc16 	bl	80049cc <xchg_spi>
 80051a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051a4:	3b01      	subs	r3, #1
 80051a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80051aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f3      	bne.n	800519a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80051b2:	7dbb      	ldrb	r3, [r7, #22]
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	461a      	mov	r2, r3
 80051ba:	2310      	movs	r3, #16
 80051bc:	fa03 f202 	lsl.w	r2, r3, r2
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80051ca:	e098      	b.n	80052fe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80051cc:	2100      	movs	r1, #0
 80051ce:	2009      	movs	r0, #9
 80051d0:	f7ff fce9 	bl	8004ba6 <send_cmd>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f040 8091 	bne.w	80052fe <USER_SPI_ioctl+0x2b6>
 80051dc:	f107 030c 	add.w	r3, r7, #12
 80051e0:	2110      	movs	r1, #16
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff fc84 	bl	8004af0 <rcvr_datablock>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8087 	beq.w	80052fe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80051f0:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <USER_SPI_ioctl+0x2dc>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d012      	beq.n	8005222 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80051fc:	7dbb      	ldrb	r3, [r7, #22]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005204:	7dfa      	ldrb	r2, [r7, #23]
 8005206:	09d2      	lsrs	r2, r2, #7
 8005208:	b2d2      	uxtb	r2, r2
 800520a:	4413      	add	r3, r2
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	7e7b      	ldrb	r3, [r7, #25]
 8005210:	099b      	lsrs	r3, r3, #6
 8005212:	b2db      	uxtb	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	461a      	mov	r2, r3
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e013      	b.n	800524a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8005222:	7dbb      	ldrb	r3, [r7, #22]
 8005224:	109b      	asrs	r3, r3, #2
 8005226:	b29b      	uxth	r3, r3
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	3301      	adds	r3, #1
 800522e:	7dfa      	ldrb	r2, [r7, #23]
 8005230:	00d2      	lsls	r2, r2, #3
 8005232:	f002 0218 	and.w	r2, r2, #24
 8005236:	7df9      	ldrb	r1, [r7, #23]
 8005238:	0949      	lsrs	r1, r1, #5
 800523a:	b2c9      	uxtb	r1, r1
 800523c:	440a      	add	r2, r1
 800523e:	3201      	adds	r2, #1
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	461a      	mov	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005250:	e055      	b.n	80052fe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005252:	4b34      	ldr	r3, [pc, #208]	; (8005324 <USER_SPI_ioctl+0x2dc>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	f003 0306 	and.w	r3, r3, #6
 800525a:	2b00      	cmp	r3, #0
 800525c:	d051      	beq.n	8005302 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800525e:	f107 020c 	add.w	r2, r7, #12
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	210b      	movs	r1, #11
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff feee 	bl	8005048 <USER_SPI_ioctl>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d149      	bne.n	8005306 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005272:	7b3b      	ldrb	r3, [r7, #12]
 8005274:	099b      	lsrs	r3, r3, #6
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <USER_SPI_ioctl+0x23e>
 800527c:	7dbb      	ldrb	r3, [r7, #22]
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b00      	cmp	r3, #0
 8005284:	d041      	beq.n	800530a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	623b      	str	r3, [r7, #32]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <USER_SPI_ioctl+0x2dc>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d105      	bne.n	80052ae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	025b      	lsls	r3, r3, #9
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	025b      	lsls	r3, r3, #9
 80052ac:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80052ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052b0:	2020      	movs	r0, #32
 80052b2:	f7ff fc78 	bl	8004ba6 <send_cmd>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d128      	bne.n	800530e <USER_SPI_ioctl+0x2c6>
 80052bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052be:	2021      	movs	r0, #33	; 0x21
 80052c0:	f7ff fc71 	bl	8004ba6 <send_cmd>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d121      	bne.n	800530e <USER_SPI_ioctl+0x2c6>
 80052ca:	2100      	movs	r1, #0
 80052cc:	2026      	movs	r0, #38	; 0x26
 80052ce:	f7ff fc6a 	bl	8004ba6 <send_cmd>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11a      	bne.n	800530e <USER_SPI_ioctl+0x2c6>
 80052d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80052dc:	f7ff fbbc 	bl	8004a58 <wait_ready>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d013      	beq.n	800530e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80052e6:	2300      	movs	r3, #0
 80052e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80052ec:	e00f      	b.n	800530e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80052ee:	2304      	movs	r3, #4
 80052f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80052f4:	e00c      	b.n	8005310 <USER_SPI_ioctl+0x2c8>
		break;
 80052f6:	bf00      	nop
 80052f8:	e00a      	b.n	8005310 <USER_SPI_ioctl+0x2c8>
		break;
 80052fa:	bf00      	nop
 80052fc:	e008      	b.n	8005310 <USER_SPI_ioctl+0x2c8>
		break;
 80052fe:	bf00      	nop
 8005300:	e006      	b.n	8005310 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005302:	bf00      	nop
 8005304:	e004      	b.n	8005310 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005306:	bf00      	nop
 8005308:	e002      	b.n	8005310 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800530a:	bf00      	nop
 800530c:	e000      	b.n	8005310 <USER_SPI_ioctl+0x2c8>
		break;
 800530e:	bf00      	nop
	}

	despiselect();
 8005310:	f7ff fbc6 	bl	8004aa0 <despiselect>

	return res;
 8005314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005318:	4618      	mov	r0, r3
 800531a:	3730      	adds	r7, #48	; 0x30
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	20000020 	.word	0x20000020
 8005324:	2000046c 	.word	0x2000046c

08005328 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	4a08      	ldr	r2, [pc, #32]	; (8005358 <disk_status+0x30>)
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	79fa      	ldrb	r2, [r7, #7]
 8005340:	4905      	ldr	r1, [pc, #20]	; (8005358 <disk_status+0x30>)
 8005342:	440a      	add	r2, r1
 8005344:	7a12      	ldrb	r2, [r2, #8]
 8005346:	4610      	mov	r0, r2
 8005348:	4798      	blx	r3
 800534a:	4603      	mov	r3, r0
 800534c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20000498 	.word	0x20000498

0800535c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	4603      	mov	r3, r0
 8005364:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	4a0d      	ldr	r2, [pc, #52]	; (80053a4 <disk_initialize+0x48>)
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d111      	bne.n	8005398 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	4a0b      	ldr	r2, [pc, #44]	; (80053a4 <disk_initialize+0x48>)
 8005378:	2101      	movs	r1, #1
 800537a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <disk_initialize+0x48>)
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	79fa      	ldrb	r2, [r7, #7]
 800538a:	4906      	ldr	r1, [pc, #24]	; (80053a4 <disk_initialize+0x48>)
 800538c:	440a      	add	r2, r1
 800538e:	7a12      	ldrb	r2, [r2, #8]
 8005390:	4610      	mov	r0, r2
 8005392:	4798      	blx	r3
 8005394:	4603      	mov	r3, r0
 8005396:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	20000498 	.word	0x20000498

080053a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80053a8:	b590      	push	{r4, r7, lr}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4603      	mov	r3, r0
 80053b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	4a0a      	ldr	r2, [pc, #40]	; (80053e4 <disk_read+0x3c>)
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	689c      	ldr	r4, [r3, #8]
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
 80053c6:	4a07      	ldr	r2, [pc, #28]	; (80053e4 <disk_read+0x3c>)
 80053c8:	4413      	add	r3, r2
 80053ca:	7a18      	ldrb	r0, [r3, #8]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	47a0      	blx	r4
 80053d4:	4603      	mov	r3, r0
 80053d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd90      	pop	{r4, r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000498 	.word	0x20000498

080053e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80053e8:	b590      	push	{r4, r7, lr}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4603      	mov	r3, r0
 80053f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80053f8:	7bfb      	ldrb	r3, [r7, #15]
 80053fa:	4a0a      	ldr	r2, [pc, #40]	; (8005424 <disk_write+0x3c>)
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68dc      	ldr	r4, [r3, #12]
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	4a07      	ldr	r2, [pc, #28]	; (8005424 <disk_write+0x3c>)
 8005408:	4413      	add	r3, r2
 800540a:	7a18      	ldrb	r0, [r3, #8]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	47a0      	blx	r4
 8005414:	4603      	mov	r3, r0
 8005416:	75fb      	strb	r3, [r7, #23]
  return res;
 8005418:	7dfb      	ldrb	r3, [r7, #23]
}
 800541a:	4618      	mov	r0, r3
 800541c:	371c      	adds	r7, #28
 800541e:	46bd      	mov	sp, r7
 8005420:	bd90      	pop	{r4, r7, pc}
 8005422:	bf00      	nop
 8005424:	20000498 	.word	0x20000498

08005428 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	603a      	str	r2, [r7, #0]
 8005432:	71fb      	strb	r3, [r7, #7]
 8005434:	460b      	mov	r3, r1
 8005436:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <disk_ioctl+0x38>)
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	79fa      	ldrb	r2, [r7, #7]
 8005446:	4906      	ldr	r1, [pc, #24]	; (8005460 <disk_ioctl+0x38>)
 8005448:	440a      	add	r2, r1
 800544a:	7a10      	ldrb	r0, [r2, #8]
 800544c:	79b9      	ldrb	r1, [r7, #6]
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	4798      	blx	r3
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
  return res;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000498 	.word	0x20000498

08005464 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005478:	e007      	b.n	800548a <mem_cpy+0x26>
		*d++ = *s++;
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	1c53      	adds	r3, r2, #1
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	1c59      	adds	r1, r3, #1
 8005484:	6179      	str	r1, [r7, #20]
 8005486:	7812      	ldrb	r2, [r2, #0]
 8005488:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f2      	bne.n	800547a <mem_cpy+0x16>
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80054b0:	e005      	b.n	80054be <mem_set+0x1e>
		*d++ = (BYTE)val;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	617a      	str	r2, [r7, #20]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f4      	bne.n	80054b2 <mem_set+0x12>
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80054ec:	bf00      	nop
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	1e5a      	subs	r2, r3, #1
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00d      	beq.n	8005514 <mem_cmp+0x40>
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	61fa      	str	r2, [r7, #28]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	61ba      	str	r2, [r7, #24]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	1acb      	subs	r3, r1, r3
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ec      	beq.n	80054ee <mem_cmp+0x1a>
	return r;
 8005514:	697b      	ldr	r3, [r7, #20]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3724      	adds	r7, #36	; 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800552a:	e002      	b.n	8005532 <chk_chr+0x12>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3301      	adds	r3, #1
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <chk_chr+0x26>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	4293      	cmp	r3, r2
 8005544:	d1f2      	bne.n	800552c <chk_chr+0xc>
	return *str;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	781b      	ldrb	r3, [r3, #0]
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e038      	b.n	80055da <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005568:	492f      	ldr	r1, [pc, #188]	; (8005628 <chk_lock+0xd4>)
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d029      	beq.n	80055d0 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800557c:	492a      	ldr	r1, [pc, #168]	; (8005628 <chk_lock+0xd4>)
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4613      	mov	r3, r2
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005592:	429a      	cmp	r2, r3
 8005594:	d11e      	bne.n	80055d4 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8005596:	4924      	ldr	r1, [pc, #144]	; (8005628 <chk_lock+0xd4>)
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4613      	mov	r3, r2
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3304      	adds	r3, #4
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d110      	bne.n	80055d4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80055b2:	491d      	ldr	r1, [pc, #116]	; (8005628 <chk_lock+0xd4>)
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4613      	mov	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3308      	adds	r3, #8
 80055c2:	881a      	ldrh	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d102      	bne.n	80055d4 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80055ce:	e007      	b.n	80055e0 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80055d0:	2301      	movs	r3, #1
 80055d2:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d9c3      	bls.n	8005568 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d109      	bne.n	80055fa <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <chk_lock+0x9e>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d101      	bne.n	80055f6 <chk_lock+0xa2>
 80055f2:	2300      	movs	r3, #0
 80055f4:	e013      	b.n	800561e <chk_lock+0xca>
 80055f6:	2312      	movs	r3, #18
 80055f8:	e011      	b.n	800561e <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <chk_lock+0xc4>
 8005600:	4909      	ldr	r1, [pc, #36]	; (8005628 <chk_lock+0xd4>)
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	4613      	mov	r3, r2
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	330a      	adds	r3, #10
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005616:	d101      	bne.n	800561c <chk_lock+0xc8>
 8005618:	2310      	movs	r3, #16
 800561a:	e000      	b.n	800561e <chk_lock+0xca>
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	20000480 	.word	0x20000480

0800562c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005632:	2300      	movs	r3, #0
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	e002      	b.n	800563e <enq_lock+0x12>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3301      	adds	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d809      	bhi.n	8005658 <enq_lock+0x2c>
 8005644:	490a      	ldr	r1, [pc, #40]	; (8005670 <enq_lock+0x44>)
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1ef      	bne.n	8005638 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000480 	.word	0x20000480

08005674 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e02b      	b.n	80056dc <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8005684:	4955      	ldr	r1, [pc, #340]	; (80057dc <inc_lock+0x168>)
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4613      	mov	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800569a:	429a      	cmp	r2, r3
 800569c:	d11b      	bne.n	80056d6 <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 800569e:	494f      	ldr	r1, [pc, #316]	; (80057dc <inc_lock+0x168>)
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4613      	mov	r3, r2
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3304      	adds	r3, #4
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d10d      	bne.n	80056d6 <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80056ba:	4948      	ldr	r1, [pc, #288]	; (80057dc <inc_lock+0x168>)
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4613      	mov	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	440b      	add	r3, r1
 80056c8:	3308      	adds	r3, #8
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d006      	beq.n	80056e4 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	3301      	adds	r3, #1
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d9d0      	bls.n	8005684 <inc_lock+0x10>
 80056e2:	e000      	b.n	80056e6 <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80056e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d145      	bne.n	8005778 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80056ec:	2300      	movs	r3, #0
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e002      	b.n	80056f8 <inc_lock+0x84>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d809      	bhi.n	8005712 <inc_lock+0x9e>
 80056fe:	4937      	ldr	r1, [pc, #220]	; (80057dc <inc_lock+0x168>)
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4613      	mov	r3, r2
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1ef      	bne.n	80056f2 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d101      	bne.n	800571c <inc_lock+0xa8>
 8005718:	2300      	movs	r3, #0
 800571a:	e05a      	b.n	80057d2 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8005722:	482e      	ldr	r0, [pc, #184]	; (80057dc <inc_lock+0x168>)
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	4613      	mov	r3, r2
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4403      	add	r3, r0
 8005730:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8005738:	4828      	ldr	r0, [pc, #160]	; (80057dc <inc_lock+0x168>)
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4403      	add	r3, r0
 8005746:	3304      	adds	r3, #4
 8005748:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8005750:	4922      	ldr	r1, [pc, #136]	; (80057dc <inc_lock+0x168>)
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3308      	adds	r3, #8
 8005760:	4602      	mov	r2, r0
 8005762:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005764:	491d      	ldr	r1, [pc, #116]	; (80057dc <inc_lock+0x168>)
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	330a      	adds	r3, #10
 8005774:	2200      	movs	r2, #0
 8005776:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00c      	beq.n	8005798 <inc_lock+0x124>
 800577e:	4917      	ldr	r1, [pc, #92]	; (80057dc <inc_lock+0x168>)
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4613      	mov	r3, r2
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	4413      	add	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	330a      	adds	r3, #10
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <inc_lock+0x124>
 8005794:	2300      	movs	r3, #0
 8005796:	e01c      	b.n	80057d2 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <inc_lock+0x142>
 800579e:	490f      	ldr	r1, [pc, #60]	; (80057dc <inc_lock+0x168>)
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	330a      	adds	r3, #10
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	b299      	uxth	r1, r3
 80057b4:	e001      	b.n	80057ba <inc_lock+0x146>
 80057b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057ba:	4808      	ldr	r0, [pc, #32]	; (80057dc <inc_lock+0x168>)
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4403      	add	r3, r0
 80057c8:	330a      	adds	r3, #10
 80057ca:	460a      	mov	r2, r1
 80057cc:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3301      	adds	r3, #1
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	20000480 	.word	0x20000480

080057e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d82e      	bhi.n	8005852 <dec_lock+0x72>
		n = Files[i].ctr;
 80057f4:	491b      	ldr	r1, [pc, #108]	; (8005864 <dec_lock+0x84>)
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	440b      	add	r3, r1
 8005802:	330a      	adds	r3, #10
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005808:	89fb      	ldrh	r3, [r7, #14]
 800580a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800580e:	d101      	bne.n	8005814 <dec_lock+0x34>
 8005810:	2300      	movs	r3, #0
 8005812:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005814:	89fb      	ldrh	r3, [r7, #14]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <dec_lock+0x40>
 800581a:	89fb      	ldrh	r3, [r7, #14]
 800581c:	3b01      	subs	r3, #1
 800581e:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005820:	4910      	ldr	r1, [pc, #64]	; (8005864 <dec_lock+0x84>)
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	330a      	adds	r3, #10
 8005830:	89fa      	ldrh	r2, [r7, #14]
 8005832:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005834:	89fb      	ldrh	r3, [r7, #14]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d108      	bne.n	800584c <dec_lock+0x6c>
 800583a:	490a      	ldr	r1, [pc, #40]	; (8005864 <dec_lock+0x84>)
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	737b      	strb	r3, [r7, #13]
 8005850:	e001      	b.n	8005856 <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005852:	2302      	movs	r3, #2
 8005854:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005856:	7b7b      	ldrb	r3, [r7, #13]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000480 	.word	0x20000480

08005868 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e016      	b.n	80058a4 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005876:	4910      	ldr	r1, [pc, #64]	; (80058b8 <clear_lock+0x50>)
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4613      	mov	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	429a      	cmp	r2, r3
 800588a:	d108      	bne.n	800589e <clear_lock+0x36>
 800588c:	490a      	ldr	r1, [pc, #40]	; (80058b8 <clear_lock+0x50>)
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d9e5      	bls.n	8005876 <clear_lock+0xe>
	}
}
 80058aa:	bf00      	nop
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	20000480 	.word	0x20000480

080058bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d038      	beq.n	8005944 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80058d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	2301      	movs	r3, #1
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	f7ff fd7f 	bl	80053e8 <disk_write>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <sync_window+0x3a>
			res = FR_DISK_ERR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
 80058f4:	e026      	b.n	8005944 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800590e:	429a      	cmp	r2, r3
 8005910:	d218      	bcs.n	8005944 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e010      	b.n	800593e <sync_window+0x82>
					wsect += fs->fsize;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	2301      	movs	r3, #1
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	f7ff fd58 	bl	80053e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3b01      	subs	r3, #1
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d8eb      	bhi.n	800591c <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d01b      	beq.n	80059a0 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ffa7 	bl	80058bc <sync_window>
 800596e:	4603      	mov	r3, r0
 8005970:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d113      	bne.n	80059a0 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	2301      	movs	r3, #1
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	f7ff fd10 	bl	80053a8 <disk_read>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
 8005992:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7ff ff82 	bl	80058bc <sync_window>
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 809b 	bne.w	8005afa <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	f040 8088 	bne.w	8005ae0 <sync_fs+0x136>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	f040 8082 	bne.w	8005ae0 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e2:	2100      	movs	r1, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7ff fd5b 	bl	80054a0 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2255      	movs	r2, #85	; 0x55
 80059ee:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	22aa      	movs	r2, #170	; 0xaa
 80059f6:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2252      	movs	r2, #82	; 0x52
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2252      	movs	r2, #82	; 0x52
 8005a04:	705a      	strb	r2, [r3, #1]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2261      	movs	r2, #97	; 0x61
 8005a0a:	709a      	strb	r2, [r3, #2]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2241      	movs	r2, #65	; 0x41
 8005a10:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2272      	movs	r2, #114	; 0x72
 8005a16:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2272      	movs	r2, #114	; 0x72
 8005a1e:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2241      	movs	r2, #65	; 0x41
 8005a26:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2261      	movs	r2, #97	; 0x61
 8005a2e:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	0a1b      	lsrs	r3, r3, #8
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a5a:	0c1b      	lsrs	r3, r3, #16
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005a6a:	0e1b      	lsrs	r3, r3, #24
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	0a1b      	lsrs	r3, r3, #8
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005aac:	0e1b      	lsrs	r3, r3, #24
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f7ff fc88 	bl	80053e8 <disk_write>
			fs->fsi_flag = 0;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fc9c 	bl	8005428 <disk_ioctl>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d001      	beq.n	8005afa <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	3b02      	subs	r3, #2
 8005b12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b1a:	3b02      	subs	r3, #2
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d301      	bcc.n	8005b26 <clust2sect+0x22>
 8005b22:	2300      	movs	r3, #0
 8005b24:	e00a      	b.n	8005b3c <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	fb03 f202 	mul.w	r2, r3, r2
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8005b3a:	4413      	add	r3, r2
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d905      	bls.n	8005b62 <get_fat+0x1c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <get_fat+0x22>
		val = 1;	/* Internal error */
 8005b62:	2301      	movs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e0a3      	b.n	8005cb0 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d068      	beq.n	8005c4a <get_fat+0x104>
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	f300 808f 	bgt.w	8005c9c <get_fat+0x156>
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d002      	beq.n	8005b88 <get_fat+0x42>
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d040      	beq.n	8005c08 <get_fat+0xc2>
 8005b86:	e089      	b.n	8005c9c <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	0a5b      	lsrs	r3, r3, #9
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff fed2 	bl	800594e <move_window>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d178      	bne.n	8005ca2 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	60fa      	str	r2, [r7, #12]
 8005bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	5cd3      	ldrb	r3, [r2, r3]
 8005bbe:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	0a5b      	lsrs	r3, r3, #9
 8005bca:	4413      	add	r3, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff febd 	bl	800594e <move_window>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d165      	bne.n	8005ca6 <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	5cd3      	ldrb	r3, [r2, r3]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	461a      	mov	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <get_fat+0xb8>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	091b      	lsrs	r3, r3, #4
 8005bfc:	e002      	b.n	8005c04 <get_fat+0xbe>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c04:	617b      	str	r3, [r7, #20]
			break;
 8005c06:	e053      	b.n	8005cb0 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	0a1b      	lsrs	r3, r3, #8
 8005c12:	4413      	add	r3, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff fe99 	bl	800594e <move_window>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d143      	bne.n	8005caa <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	3301      	adds	r3, #1
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	b21a      	sxth	r2, r3
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	b21b      	sxth	r3, r3
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b21b      	sxth	r3, r3
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	617b      	str	r3, [r7, #20]
			break;
 8005c48:	e032      	b.n	8005cb0 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	09db      	lsrs	r3, r3, #7
 8005c54:	4413      	add	r3, r2
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fe78 	bl	800594e <move_window>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d124      	bne.n	8005cae <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	3303      	adds	r3, #3
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	061a      	lsls	r2, r3, #24
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	4313      	orrs	r3, r2
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	3201      	adds	r2, #1
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	0212      	lsls	r2, r2, #8
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c98:	617b      	str	r3, [r7, #20]
			break;
 8005c9a:	e009      	b.n	8005cb0 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	e006      	b.n	8005cb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ca2:	bf00      	nop
 8005ca4:	e004      	b.n	8005cb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005cae:	bf00      	nop
		}
	}

	return val;
 8005cb0:	697b      	ldr	r3, [r7, #20]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b088      	sub	sp, #32
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	60b9      	str	r1, [r7, #8]
 8005cc4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d905      	bls.n	8005cd8 <put_fat+0x1e>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <put_fat+0x24>
		res = FR_INT_ERR;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e0f6      	b.n	8005ecc <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	f000 809e 	beq.w	8005e26 <put_fat+0x16c>
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	f300 80e4 	bgt.w	8005eb8 <put_fat+0x1fe>
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d002      	beq.n	8005cfa <put_fat+0x40>
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d06f      	beq.n	8005dd8 <put_fat+0x11e>
 8005cf8:	e0de      	b.n	8005eb8 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	0a5b      	lsrs	r3, r3, #9
 8005d12:	4413      	add	r3, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fe19 	bl	800594e <move_window>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d20:	7ffb      	ldrb	r3, [r7, #31]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 80cb 	bne.w	8005ebe <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	617a      	str	r2, [r7, #20]
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4413      	add	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00d      	beq.n	8005d5e <put_fat+0xa4>
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	b25b      	sxtb	r3, r3
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	b25a      	sxtb	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	b25b      	sxtb	r3, r3
 8005d56:	4313      	orrs	r3, r2
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	e001      	b.n	8005d62 <put_fat+0xa8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	0a5b      	lsrs	r3, r3, #9
 8005d78:	4413      	add	r3, r2
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fde6 	bl	800594e <move_window>
 8005d82:	4603      	mov	r3, r0
 8005d84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005d86:	7ffb      	ldrb	r3, [r7, #31]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f040 809a 	bne.w	8005ec2 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <put_fat+0xf2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	e00e      	b.n	8005dca <put_fat+0x110>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	b25b      	sxtb	r3, r3
 8005db2:	f023 030f 	bic.w	r3, r3, #15
 8005db6:	b25a      	sxtb	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	b25b      	sxtb	r3, r3
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b25b      	sxtb	r3, r3
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005dd6:	e079      	b.n	8005ecc <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	4413      	add	r3, r2
 8005de4:	4619      	mov	r1, r3
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f7ff fdb1 	bl	800594e <move_window>
 8005dec:	4603      	mov	r3, r0
 8005dee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005df0:	7ffb      	ldrb	r3, [r7, #31]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d167      	bne.n	8005ec6 <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	0a1b      	lsrs	r3, r3, #8
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	3301      	adds	r3, #1
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005e24:	e052      	b.n	8005ecc <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	09db      	lsrs	r3, r3, #7
 8005e30:	4413      	add	r3, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff fd8a 	bl	800594e <move_window>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e3e:	7ffb      	ldrb	r3, [r7, #31]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d142      	bne.n	8005eca <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	3303      	adds	r3, #3
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	061a      	lsls	r2, r3, #24
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	4313      	orrs	r3, r2
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	3201      	adds	r2, #1
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	0212      	lsls	r2, r2, #8
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	0a1b      	lsrs	r3, r3, #8
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	3301      	adds	r3, #1
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	0c1a      	lsrs	r2, r3, #16
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	0e1a      	lsrs	r2, r3, #24
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8005eb6:	e009      	b.n	8005ecc <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e006      	b.n	8005ecc <put_fat+0x212>
			if (res != FR_OK) break;
 8005ebe:	bf00      	nop
 8005ec0:	e004      	b.n	8005ecc <put_fat+0x212>
			if (res != FR_OK) break;
 8005ec2:	bf00      	nop
 8005ec4:	e002      	b.n	8005ecc <put_fat+0x212>
			if (res != FR_OK) break;
 8005ec6:	bf00      	nop
 8005ec8:	e000      	b.n	8005ecc <put_fat+0x212>
			if (res != FR_OK) break;
 8005eca:	bf00      	nop
		}
	}

	return res;
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3720      	adds	r7, #32
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d905      	bls.n	8005ef2 <remove_chain+0x1c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <remove_chain+0x22>
		res = FR_INT_ERR;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	e043      	b.n	8005f80 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005efc:	e036      	b.n	8005f6c <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8005efe:	6839      	ldr	r1, [r7, #0]
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fe20 	bl	8005b46 <get_fat>
 8005f06:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d035      	beq.n	8005f7a <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d102      	bne.n	8005f1a <remove_chain+0x44>
 8005f14:	2302      	movs	r3, #2
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	e032      	b.n	8005f80 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f20:	d102      	bne.n	8005f28 <remove_chain+0x52>
 8005f22:	2301      	movs	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
 8005f26:	e02b      	b.n	8005f80 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005f28:	2200      	movs	r2, #0
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fec4 	bl	8005cba <put_fat>
 8005f32:	4603      	mov	r3, r0
 8005f34:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d120      	bne.n	8005f7e <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d00f      	beq.n	8005f68 <remove_chain+0x92>
				fs->free_clust++;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8005f5c:	f043 0301 	orr.w	r3, r3, #1
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d3c2      	bcc.n	8005efe <remove_chain+0x28>
 8005f78:	e002      	b.n	8005f80 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8005f7e:	bf00      	nop
		}
	}

	return res;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b086      	sub	sp, #24
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10f      	bne.n	8005fba <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8005fa0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <create_chain+0x2a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d31c      	bcc.n	8005fee <create_chain+0x64>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	e019      	b.n	8005fee <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fdc2 	bl	8005b46 <get_fat>
 8005fc2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d801      	bhi.n	8005fce <create_chain+0x44>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e076      	b.n	80060bc <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d101      	bne.n	8005fda <create_chain+0x50>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	e070      	b.n	80060bc <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d201      	bcs.n	8005fea <create_chain+0x60>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	e068      	b.n	80060bc <create_chain+0x132>
		scl = clst;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	429a      	cmp	r2, r3
 8006002:	d307      	bcc.n	8006014 <create_chain+0x8a>
			ncl = 2;
 8006004:	2302      	movs	r3, #2
 8006006:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	d901      	bls.n	8006014 <create_chain+0x8a>
 8006010:	2300      	movs	r3, #0
 8006012:	e053      	b.n	80060bc <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006014:	6979      	ldr	r1, [r7, #20]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fd95 	bl	8005b46 <get_fat>
 800601c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00e      	beq.n	8006042 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d002      	beq.n	8006032 <create_chain+0xa8>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <create_chain+0xac>
			return cs;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	e042      	b.n	80060bc <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	429a      	cmp	r2, r3
 800603c:	d1d9      	bne.n	8005ff2 <create_chain+0x68>
 800603e:	2300      	movs	r3, #0
 8006040:	e03c      	b.n	80060bc <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8006042:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006044:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fe35 	bl	8005cba <put_fat>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d109      	bne.n	800606e <create_chain+0xe4>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d006      	beq.n	800606e <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fe28 	bl	8005cba <put_fat>
 800606a:	4603      	mov	r3, r0
 800606c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11a      	bne.n	80060aa <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d018      	beq.n	80060ba <create_chain+0x130>
			fs->free_clust--;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800608e:	1e5a      	subs	r2, r3, #1
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80060a8:	e007      	b.n	80060ba <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d102      	bne.n	80060b6 <create_chain+0x12c>
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
 80060b4:	e000      	b.n	80060b8 <create_chain+0x12e>
 80060b6:	2301      	movs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80060ba:	697b      	ldr	r3, [r7, #20]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3718      	adds	r7, #24
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80060d4:	3304      	adds	r3, #4
 80060d6:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	0a5b      	lsrs	r3, r3, #9
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80060e2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80060e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ea:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1d1a      	adds	r2, r3, #4
 80060f0:	613a      	str	r2, [r7, #16]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <clmt_clust+0x3c>
 80060fc:	2300      	movs	r3, #0
 80060fe:	e010      	b.n	8006122 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	429a      	cmp	r2, r3
 8006106:	d307      	bcc.n	8006118 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	3304      	adds	r3, #4
 8006114:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006116:	e7e9      	b.n	80060ec <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006118:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	4413      	add	r3, r2
}
 8006122:	4618      	mov	r0, r3
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr

0800612c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8006146:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d007      	beq.n	800615e <dir_sdi+0x32>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006154:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	429a      	cmp	r2, r3
 800615c:	d301      	bcc.n	8006162 <dir_sdi+0x36>
		return FR_INT_ERR;
 800615e:	2302      	movs	r3, #2
 8006160:	e074      	b.n	800624c <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10c      	bne.n	8006182 <dir_sdi+0x56>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800616e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006172:	2b03      	cmp	r3, #3
 8006174:	d105      	bne.n	8006182 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800617c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8006180:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d111      	bne.n	80061ac <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800618e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006192:	461a      	mov	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	4293      	cmp	r3, r2
 8006198:	d301      	bcc.n	800619e <dir_sdi+0x72>
			return FR_INT_ERR;
 800619a:	2302      	movs	r3, #2
 800619c:	e056      	b.n	800624c <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061a4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e032      	b.n	8006212 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061b2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80061ba:	e01e      	b.n	80061fa <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061c2:	6979      	ldr	r1, [r7, #20]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fcbe 	bl	8005b46 <get_fat>
 80061ca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d101      	bne.n	80061d8 <dir_sdi+0xac>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e039      	b.n	800624c <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d907      	bls.n	80061ee <dir_sdi+0xc2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80061e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d301      	bcc.n	80061f2 <dir_sdi+0xc6>
				return FR_INT_ERR;
 80061ee:	2302      	movs	r3, #2
 80061f0:	e02c      	b.n	800624c <dir_sdi+0x120>
			idx -= ic;
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d2dc      	bcs.n	80061bc <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006208:	6979      	ldr	r1, [r7, #20]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fc7a 	bl	8005b04 <clust2sect>
 8006210:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <dir_sdi+0xf8>
 8006220:	2302      	movs	r3, #2
 8006222:	e013      	b.n	800624c <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	091a      	lsrs	r2, r3, #4
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	441a      	add	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006238:	461a      	mov	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	015b      	lsls	r3, r3, #5
 8006242:	441a      	add	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006254:	b590      	push	{r4, r7, lr}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <dir_next+0x26>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <dir_next+0x2a>
		return FR_NO_FILE;
 800627a:	2304      	movs	r3, #4
 800627c:	e0dd      	b.n	800643a <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	2b00      	cmp	r3, #0
 8006286:	f040 80c6 	bne.w	8006416 <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062a8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80062ac:	461a      	mov	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4293      	cmp	r3, r2
 80062b2:	f0c0 80b0 	bcc.w	8006416 <dir_next+0x1c2>
				return FR_NO_FILE;
 80062b6:	2304      	movs	r3, #4
 80062b8:	e0bf      	b.n	800643a <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	091b      	lsrs	r3, r3, #4
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80062c4:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80062c8:	3a01      	subs	r2, #1
 80062ca:	4013      	ands	r3, r2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 80a2 	bne.w	8006416 <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f7ff fc30 	bl	8005b46 <get_fat>
 80062e6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d801      	bhi.n	80062f2 <dir_next+0x9e>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e0a3      	b.n	800643a <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d101      	bne.n	80062fe <dir_next+0xaa>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e09d      	b.n	800643a <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006304:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	429a      	cmp	r2, r3
 800630c:	d374      	bcc.n	80063f8 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <dir_next+0xc4>
 8006314:	2304      	movs	r3, #4
 8006316:	e090      	b.n	800643a <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f7ff fe2f 	bl	8005f8a <create_chain>
 800632c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <dir_next+0xe4>
 8006334:	2307      	movs	r3, #7
 8006336:	e080      	b.n	800643a <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <dir_next+0xee>
 800633e:	2302      	movs	r3, #2
 8006340:	e07b      	b.n	800643a <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d101      	bne.n	800634e <dir_next+0xfa>
 800634a:	2301      	movs	r3, #1
 800634c:	e075      	b.n	800643a <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff fab1 	bl	80058bc <sync_window>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <dir_next+0x110>
 8006360:	2301      	movs	r3, #1
 8006362:	e06a      	b.n	800643a <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800636a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff f895 	bl	80054a0 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8006382:	6979      	ldr	r1, [r7, #20]
 8006384:	4610      	mov	r0, r2
 8006386:	f7ff fbbd 	bl	8005b04 <clust2sect>
 800638a:	4603      	mov	r3, r0
 800638c:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	e01b      	b.n	80063ce <dir_next+0x17a>
						dp->fs->wflag = 1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fa87 	bl	80058bc <sync_window>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <dir_next+0x164>
 80063b4:	2301      	movs	r3, #1
 80063b6:	e040      	b.n	800643a <dir_next+0x1e6>
						dp->fs->winsect++;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063be:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80063c2:	3201      	adds	r2, #1
 80063c4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	3301      	adds	r3, #1
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063d4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80063d8:	461a      	mov	r2, r3
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4293      	cmp	r3, r2
 80063de:	d3da      	bcc.n	8006396 <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063e6:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80063f0:	693a      	ldr	r2, [r7, #16]
 80063f2:	1a8a      	subs	r2, r1, r2
 80063f4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006406:	6979      	ldr	r1, [r7, #20]
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff fb7b 	bl	8005b04 <clust2sect>
 800640e:	4602      	mov	r2, r0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	b29a      	uxth	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	015b      	lsls	r3, r3, #5
 8006430:	441a      	add	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	bd90      	pop	{r4, r7, pc}

08006442 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800644c:	2100      	movs	r1, #0
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fe6c 	bl	800612c <dir_sdi>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d131      	bne.n	80064c2 <dir_alloc+0x80>
		n = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f7ff fa6c 	bl	800594e <move_window>
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11f      	bne.n	80064c0 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2be5      	cmp	r3, #229	; 0xe5
 800648a:	d005      	beq.n	8006498 <dir_alloc+0x56>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d107      	bne.n	80064a8 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3301      	adds	r3, #1
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d102      	bne.n	80064ac <dir_alloc+0x6a>
 80064a6:	e00c      	b.n	80064c2 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80064a8:	2300      	movs	r3, #0
 80064aa:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80064ac:	2101      	movs	r1, #1
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fed0 	bl	8006254 <dir_next>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0d1      	beq.n	8006462 <dir_alloc+0x20>
 80064be:	e000      	b.n	80064c2 <dir_alloc+0x80>
			if (res != FR_OK) break;
 80064c0:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d101      	bne.n	80064cc <dir_alloc+0x8a>
 80064c8:	2307      	movs	r3, #7
 80064ca:	73fb      	strb	r3, [r7, #15]
	return res;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	331b      	adds	r3, #27
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	b21a      	sxth	r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	331a      	adds	r3, #26
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	b21b      	sxth	r3, r3
 80064f2:	4313      	orrs	r3, r2
 80064f4:	b21b      	sxth	r3, r3
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006500:	2b03      	cmp	r3, #3
 8006502:	d10f      	bne.n	8006524 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	3315      	adds	r3, #21
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	b21a      	sxth	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	3314      	adds	r3, #20
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	b21b      	sxth	r3, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	b21b      	sxth	r3, r3
 800651a:	b29b      	uxth	r3, r3
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]

	return cl;
 8006524:	68fb      	ldr	r3, [r7, #12]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	331a      	adds	r3, #26
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	0a1b      	lsrs	r3, r3, #8
 800654a:	b29a      	uxth	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	331b      	adds	r3, #27
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	0c1a      	lsrs	r2, r3, #16
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3314      	adds	r3, #20
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	0c1b      	lsrs	r3, r3, #16
 8006564:	b29b      	uxth	r3, r3
 8006566:	0a1b      	lsrs	r3, r3, #8
 8006568:	b29a      	uxth	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3315      	adds	r3, #21
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006584:	2100      	movs	r1, #0
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fdd0 	bl	800612c <dir_sdi>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006590:	7dfb      	ldrb	r3, [r7, #23]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <dir_find+0x1e>
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	e03b      	b.n	8006612 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065a6:	4619      	mov	r1, r3
 80065a8:	4610      	mov	r0, r2
 80065aa:	f7ff f9d0 	bl	800594e <move_window>
 80065ae:	4603      	mov	r3, r0
 80065b0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80065b2:	7dfb      	ldrb	r3, [r7, #23]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d128      	bne.n	800660a <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065be:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <dir_find+0x56>
 80065cc:	2304      	movs	r3, #4
 80065ce:	75fb      	strb	r3, [r7, #23]
 80065d0:	e01e      	b.n	8006610 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	330b      	adds	r3, #11
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <dir_find+0x7a>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80065e6:	220b      	movs	r2, #11
 80065e8:	4619      	mov	r1, r3
 80065ea:	6938      	ldr	r0, [r7, #16]
 80065ec:	f7fe ff72 	bl	80054d4 <mem_cmp>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00b      	beq.n	800660e <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 80065f6:	2100      	movs	r1, #0
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fe2b 	bl	8006254 <dir_next>
 80065fe:	4603      	mov	r3, r0
 8006600:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0c8      	beq.n	800659a <dir_find+0x1e>
 8006608:	e002      	b.n	8006610 <dir_find+0x94>
		if (res != FR_OK) break;
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <dir_find+0x94>
			break;
 800660e:	bf00      	nop

	return res;
 8006610:	7dfb      	ldrb	r3, [r7, #23]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006622:	2101      	movs	r1, #1
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff ff0c 	bl	8006442 <dir_alloc>
 800662a:	4603      	mov	r3, r0
 800662c:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d126      	bne.n	8006682 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7ff f983 	bl	800594e <move_window>
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d117      	bne.n	8006682 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006658:	2220      	movs	r2, #32
 800665a:	2100      	movs	r1, #0
 800665c:	4618      	mov	r0, r3
 800665e:	f7fe ff1f 	bl	80054a0 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800666e:	220b      	movs	r2, #11
 8006670:	4619      	mov	r1, r3
 8006672:	f7fe fef7 	bl	8005464 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800667c:	2201      	movs	r2, #1
 800667e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e002      	b.n	80066a4 <create_name+0x18>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b2f      	cmp	r3, #47	; 0x2f
 80066aa:	d0f8      	beq.n	800669e <create_name+0x12>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b5c      	cmp	r3, #92	; 0x5c
 80066b2:	d0f4      	beq.n	800669e <create_name+0x12>
	sfn = dp->fn;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80066ba:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80066bc:	220b      	movs	r2, #11
 80066be:	2120      	movs	r1, #32
 80066c0:	68b8      	ldr	r0, [r7, #8]
 80066c2:	f7fe feed 	bl	80054a0 <mem_set>
	si = i = b = 0; ni = 8;
 80066c6:	2300      	movs	r3, #0
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	2308      	movs	r3, #8
 80066d4:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	617a      	str	r2, [r7, #20]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80066e4:	7fbb      	ldrb	r3, [r7, #30]
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d953      	bls.n	8006792 <create_name+0x106>
 80066ea:	7fbb      	ldrb	r3, [r7, #30]
 80066ec:	2b2f      	cmp	r3, #47	; 0x2f
 80066ee:	d050      	beq.n	8006792 <create_name+0x106>
 80066f0:	7fbb      	ldrb	r3, [r7, #30]
 80066f2:	2b5c      	cmp	r3, #92	; 0x5c
 80066f4:	d04d      	beq.n	8006792 <create_name+0x106>
		if (c == '.' || i >= ni) {
 80066f6:	7fbb      	ldrb	r3, [r7, #30]
 80066f8:	2b2e      	cmp	r3, #46	; 0x2e
 80066fa:	d003      	beq.n	8006704 <create_name+0x78>
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	d30f      	bcc.n	8006724 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	2b08      	cmp	r3, #8
 8006708:	d102      	bne.n	8006710 <create_name+0x84>
 800670a:	7fbb      	ldrb	r3, [r7, #30]
 800670c:	2b2e      	cmp	r3, #46	; 0x2e
 800670e:	d001      	beq.n	8006714 <create_name+0x88>
 8006710:	2306      	movs	r3, #6
 8006712:	e073      	b.n	80067fc <create_name+0x170>
			i = 8; ni = 11;
 8006714:	2308      	movs	r3, #8
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	230b      	movs	r3, #11
 800671a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800671c:	7ffb      	ldrb	r3, [r7, #31]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	77fb      	strb	r3, [r7, #31]
 8006722:	e035      	b.n	8006790 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006724:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da08      	bge.n	800673e <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800672c:	7ffb      	ldrb	r3, [r7, #31]
 800672e:	f043 0303 	orr.w	r3, r3, #3
 8006732:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006734:	7fbb      	ldrb	r3, [r7, #30]
 8006736:	3b80      	subs	r3, #128	; 0x80
 8006738:	4a32      	ldr	r2, [pc, #200]	; (8006804 <create_name+0x178>)
 800673a:	5cd3      	ldrb	r3, [r2, r3]
 800673c:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800673e:	7fbb      	ldrb	r3, [r7, #30]
 8006740:	4619      	mov	r1, r3
 8006742:	4831      	ldr	r0, [pc, #196]	; (8006808 <create_name+0x17c>)
 8006744:	f7fe feec 	bl	8005520 <chk_chr>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <create_name+0xc6>
				return FR_INVALID_NAME;
 800674e:	2306      	movs	r3, #6
 8006750:	e054      	b.n	80067fc <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8006752:	7fbb      	ldrb	r3, [r7, #30]
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d907      	bls.n	8006768 <create_name+0xdc>
 8006758:	7fbb      	ldrb	r3, [r7, #30]
 800675a:	2b5a      	cmp	r3, #90	; 0x5a
 800675c:	d804      	bhi.n	8006768 <create_name+0xdc>
				b |= 2;
 800675e:	7ffb      	ldrb	r3, [r7, #31]
 8006760:	f043 0302 	orr.w	r3, r3, #2
 8006764:	77fb      	strb	r3, [r7, #31]
 8006766:	e00c      	b.n	8006782 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006768:	7fbb      	ldrb	r3, [r7, #30]
 800676a:	2b60      	cmp	r3, #96	; 0x60
 800676c:	d909      	bls.n	8006782 <create_name+0xf6>
 800676e:	7fbb      	ldrb	r3, [r7, #30]
 8006770:	2b7a      	cmp	r3, #122	; 0x7a
 8006772:	d806      	bhi.n	8006782 <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006774:	7ffb      	ldrb	r3, [r7, #31]
 8006776:	f043 0301 	orr.w	r3, r3, #1
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	7fbb      	ldrb	r3, [r7, #30]
 800677e:	3b20      	subs	r3, #32
 8006780:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	613a      	str	r2, [r7, #16]
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	4413      	add	r3, r2
 800678c:	7fba      	ldrb	r2, [r7, #30]
 800678e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006790:	e7a1      	b.n	80066d6 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	441a      	add	r2, r3
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800679c:	7fbb      	ldrb	r3, [r7, #30]
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d801      	bhi.n	80067a6 <create_name+0x11a>
 80067a2:	2304      	movs	r3, #4
 80067a4:	e000      	b.n	80067a8 <create_name+0x11c>
 80067a6:	2300      	movs	r3, #0
 80067a8:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d101      	bne.n	80067b4 <create_name+0x128>
 80067b0:	2306      	movs	r3, #6
 80067b2:	e023      	b.n	80067fc <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2be5      	cmp	r3, #229	; 0xe5
 80067ba:	d102      	bne.n	80067c2 <create_name+0x136>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2205      	movs	r2, #5
 80067c0:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d102      	bne.n	80067ce <create_name+0x142>
 80067c8:	7ffb      	ldrb	r3, [r7, #31]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80067ce:	7ffb      	ldrb	r3, [r7, #31]
 80067d0:	f003 0303 	and.w	r3, r3, #3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d103      	bne.n	80067e0 <create_name+0x154>
 80067d8:	7fbb      	ldrb	r3, [r7, #30]
 80067da:	f043 0310 	orr.w	r3, r3, #16
 80067de:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d103      	bne.n	80067f2 <create_name+0x166>
 80067ea:	7fbb      	ldrb	r3, [r7, #30]
 80067ec:	f043 0308 	orr.w	r3, r3, #8
 80067f0:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	330b      	adds	r3, #11
 80067f6:	7fba      	ldrb	r2, [r7, #30]
 80067f8:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80067fa:	2300      	movs	r3, #0
#endif
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3720      	adds	r7, #32
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	0800b2e4 	.word	0x0800b2e4
 8006808:	0800b260 	.word	0x0800b260

0800680c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b2f      	cmp	r3, #47	; 0x2f
 800681c:	d003      	beq.n	8006826 <follow_path+0x1a>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b5c      	cmp	r3, #92	; 0x5c
 8006824:	d102      	bne.n	800682c <follow_path+0x20>
		path++;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b1f      	cmp	r3, #31
 800683a:	d80a      	bhi.n	8006852 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800683c:	2100      	movs	r1, #0
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fc74 	bl	800612c <dir_sdi>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006850:	e045      	b.n	80068de <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006852:	463b      	mov	r3, r7
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff ff18 	bl	800668c <create_name>
 800685c:	4603      	mov	r3, r0
 800685e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d136      	bne.n	80068d4 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff fe88 	bl	800657c <dir_find>
 800686c:	4603      	mov	r3, r0
 800686e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006876:	7adb      	ldrb	r3, [r3, #11]
 8006878:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b04      	cmp	r3, #4
 8006884:	d128      	bne.n	80068d8 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d123      	bne.n	80068d8 <follow_path+0xcc>
 8006890:	2305      	movs	r3, #5
 8006892:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006894:	e020      	b.n	80068d8 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d11d      	bne.n	80068dc <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80068a6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	330b      	adds	r3, #11
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 80068b6:	2305      	movs	r3, #5
 80068b8:	73fb      	strb	r3, [r7, #15]
 80068ba:	e010      	b.n	80068de <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fe06 	bl	80064d6 <ld_clust>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80068d2:	e7be      	b.n	8006852 <follow_path+0x46>
			if (res != FR_OK) break;
 80068d4:	bf00      	nop
 80068d6:	e002      	b.n	80068de <follow_path+0xd2>
				break;
 80068d8:	bf00      	nop
 80068da:	e000      	b.n	80068de <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80068dc:	bf00      	nop
		}
	}

	return res;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d031      	beq.n	8006962 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e002      	b.n	800690c <get_ldnumber+0x24>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	3301      	adds	r3, #1
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b20      	cmp	r3, #32
 8006912:	d903      	bls.n	800691c <get_ldnumber+0x34>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b3a      	cmp	r3, #58	; 0x3a
 800691a:	d1f4      	bne.n	8006906 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	2b3a      	cmp	r3, #58	; 0x3a
 8006922:	d11c      	bne.n	800695e <get_ldnumber+0x76>
			tp = *path;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	60fa      	str	r2, [r7, #12]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	3b30      	subs	r3, #48	; 0x30
 8006934:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b09      	cmp	r3, #9
 800693a:	d80e      	bhi.n	800695a <get_ldnumber+0x72>
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	d10a      	bne.n	800695a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d107      	bne.n	800695a <get_ldnumber+0x72>
					vol = (int)i;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	3301      	adds	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	e002      	b.n	8006964 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800695e:	2300      	movs	r3, #0
 8006960:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006962:	693b      	ldr	r3, [r7, #16]
}
 8006964:	4618      	mov	r0, r3
 8006966:	371c      	adds	r7, #28
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
	...

08006970 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe ffdd 	bl	800594e <move_window>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <check_fs+0x2e>
		return 3;
 800699a:	2303      	movs	r3, #3
 800699c:	e04a      	b.n	8006a34 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069a4:	3301      	adds	r3, #1
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	b21a      	sxth	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	4313      	orrs	r3, r2
 80069b6:	b21b      	sxth	r3, r3
 80069b8:	4a20      	ldr	r2, [pc, #128]	; (8006a3c <check_fs+0xcc>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d001      	beq.n	80069c2 <check_fs+0x52>
		return 2;
 80069be:	2302      	movs	r3, #2
 80069c0:	e038      	b.n	8006a34 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3336      	adds	r3, #54	; 0x36
 80069c6:	3303      	adds	r3, #3
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	061a      	lsls	r2, r3, #24
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3336      	adds	r3, #54	; 0x36
 80069d0:	3302      	adds	r3, #2
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	4313      	orrs	r3, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	3236      	adds	r2, #54	; 0x36
 80069dc:	3201      	adds	r2, #1
 80069de:	7812      	ldrb	r2, [r2, #0]
 80069e0:	0212      	lsls	r2, r2, #8
 80069e2:	4313      	orrs	r3, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069f0:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <check_fs+0xd0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <check_fs+0x8a>
		return 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e01c      	b.n	8006a34 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3352      	adds	r3, #82	; 0x52
 80069fe:	3303      	adds	r3, #3
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	061a      	lsls	r2, r3, #24
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3352      	adds	r3, #82	; 0x52
 8006a08:	3302      	adds	r3, #2
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	041b      	lsls	r3, r3, #16
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	3252      	adds	r2, #82	; 0x52
 8006a14:	3201      	adds	r2, #1
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	0212      	lsls	r2, r2, #8
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a28:	4a05      	ldr	r2, [pc, #20]	; (8006a40 <check_fs+0xd0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d101      	bne.n	8006a32 <check_fs+0xc2>
		return 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e000      	b.n	8006a34 <check_fs+0xc4>

	return 1;
 8006a32:	2301      	movs	r3, #1
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3708      	adds	r7, #8
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	ffffaa55 	.word	0xffffaa55
 8006a40:	00544146 	.word	0x00544146

08006a44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b096      	sub	sp, #88	; 0x58
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006a58:	68b8      	ldr	r0, [r7, #8]
 8006a5a:	f7ff ff45 	bl	80068e8 <get_ldnumber>
 8006a5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	da01      	bge.n	8006a6a <find_volume+0x26>
 8006a66:	230b      	movs	r3, #11
 8006a68:	e2a8      	b.n	8006fbc <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006a6a:	4a9d      	ldr	r2, [pc, #628]	; (8006ce0 <find_volume+0x29c>)
 8006a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <find_volume+0x3a>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	e29e      	b.n	8006fbc <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a82:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01b      	beq.n	8006ac6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fc47 	bl	8005328 <disk_status>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10c      	bne.n	8006ac6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <find_volume+0x7e>
 8006ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006abe:	230a      	movs	r3, #10
 8006ac0:	e27c      	b.n	8006fbc <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e27a      	b.n	8006fbc <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fc3c 	bl	800535c <disk_initialize>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006aea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006af6:	2303      	movs	r3, #3
 8006af8:	e260      	b.n	8006fbc <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d007      	beq.n	8006b10 <find_volume+0xcc>
 8006b00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b04:	f003 0304 	and.w	r3, r3, #4
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006b0c:	230a      	movs	r3, #10
 8006b0e:	e255      	b.n	8006fbc <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006b10:	2300      	movs	r3, #0
 8006b12:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006b14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b18:	f7ff ff2a 	bl	8006970 <check_fs>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d153      	bne.n	8006bd2 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b2e:	e028      	b.n	8006b82 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006b3a:	4413      	add	r3, r2
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	3304      	adds	r3, #4
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d012      	beq.n	8006b6e <find_volume+0x12a>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	330b      	adds	r3, #11
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	061a      	lsls	r2, r3, #24
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	330a      	adds	r3, #10
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5c:	3209      	adds	r2, #9
 8006b5e:	7812      	ldrb	r2, [r2, #0]
 8006b60:	0212      	lsls	r2, r2, #8
 8006b62:	4313      	orrs	r3, r2
 8006b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b66:	3208      	adds	r2, #8
 8006b68:	7812      	ldrb	r2, [r2, #0]
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	e000      	b.n	8006b70 <find_volume+0x12c>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	3358      	adds	r3, #88	; 0x58
 8006b76:	443b      	add	r3, r7
 8006b78:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7e:	3301      	adds	r3, #1
 8006b80:	643b      	str	r3, [r7, #64]	; 0x40
 8006b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d9d3      	bls.n	8006b30 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006b88:	2300      	movs	r3, #0
 8006b8a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d002      	beq.n	8006b98 <find_volume+0x154>
 8006b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b94:	3b01      	subs	r3, #1
 8006b96:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	3358      	adds	r3, #88	; 0x58
 8006b9e:	443b      	add	r3, r7
 8006ba0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ba4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <find_volume+0x174>
 8006bac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006bae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bb0:	f7ff fede 	bl	8006970 <check_fs>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	e000      	b.n	8006bba <find_volume+0x176>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <find_volume+0x18e>
 8006bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc8:	3301      	adds	r3, #1
 8006bca:	643b      	str	r3, [r7, #64]	; 0x40
 8006bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d9e2      	bls.n	8006b98 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006bd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d101      	bne.n	8006bde <find_volume+0x19a>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e1ee      	b.n	8006fbc <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006bde:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <find_volume+0x1a6>
 8006be6:	230d      	movs	r3, #13
 8006be8:	e1e8      	b.n	8006fbc <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	7b1b      	ldrb	r3, [r3, #12]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	b21a      	sxth	r2, r3
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	7adb      	ldrb	r3, [r3, #11]
 8006bf6:	b21b      	sxth	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b21b      	sxth	r3, r3
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c00:	d001      	beq.n	8006c06 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8006c02:	230d      	movs	r3, #13
 8006c04:	e1da      	b.n	8006fbc <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	7ddb      	ldrb	r3, [r3, #23]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	b21a      	sxth	r2, r3
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	7d9b      	ldrb	r3, [r3, #22]
 8006c12:	b21b      	sxth	r3, r3
 8006c14:	4313      	orrs	r3, r2
 8006c16:	b21b      	sxth	r3, r3
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d112      	bne.n	8006c48 <find_volume+0x204>
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006c28:	061a      	lsls	r2, r3, #24
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	4313      	orrs	r3, r2
 8006c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c36:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006c3a:	0212      	lsls	r2, r2, #8
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c40:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006c44:	4313      	orrs	r3, r2
 8006c46:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c4c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	7c1a      	ldrb	r2, [r3, #16]
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d006      	beq.n	8006c72 <find_volume+0x22e>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d001      	beq.n	8006c72 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8006c6e:	230d      	movs	r3, #13
 8006c70:	e1a4      	b.n	8006fbc <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8006c78:	461a      	mov	r2, r3
 8006c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c84:	7b5a      	ldrb	r2, [r3, #13]
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <find_volume+0x268>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8006cac:	230d      	movs	r3, #13
 8006cae:	e185      	b.n	8006fbc <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	7c9b      	ldrb	r3, [r3, #18]
 8006cb4:	021b      	lsls	r3, r3, #8
 8006cb6:	b21a      	sxth	r2, r3
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	7c5b      	ldrb	r3, [r3, #17]
 8006cbc:	b21b      	sxth	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b21b      	sxth	r3, r3
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc6:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ccc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006cd0:	f003 030f 	and.w	r3, r3, #15
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d004      	beq.n	8006ce4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006cda:	230d      	movs	r3, #13
 8006cdc:	e16e      	b.n	8006fbc <find_volume+0x578>
 8006cde:	bf00      	nop
 8006ce0:	20000478 	.word	0x20000478

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	7d1b      	ldrb	r3, [r3, #20]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	b21a      	sxth	r2, r3
 8006cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cee:	7cdb      	ldrb	r3, [r3, #19]
 8006cf0:	b21b      	sxth	r3, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	b21b      	sxth	r3, r3
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d112      	bne.n	8006d26 <find_volume+0x2e2>
 8006d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d02:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006d06:	061a      	lsls	r2, r3, #24
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006d0e:	041b      	lsls	r3, r3, #16
 8006d10:	4313      	orrs	r3, r2
 8006d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d14:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006d18:	0212      	lsls	r2, r2, #8
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	7bdb      	ldrb	r3, [r3, #15]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	b21a      	sxth	r2, r3
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d30:	7b9b      	ldrb	r3, [r3, #14]
 8006d32:	b21b      	sxth	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b21b      	sxth	r3, r3
 8006d38:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006d3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <find_volume+0x300>
 8006d40:	230d      	movs	r3, #13
 8006d42:	e13b      	b.n	8006fbc <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006d44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d48:	4413      	add	r3, r2
 8006d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d4c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8006d50:	0912      	lsrs	r2, r2, #4
 8006d52:	b292      	uxth	r2, r2
 8006d54:	4413      	add	r3, r2
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006d58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d201      	bcs.n	8006d64 <find_volume+0x320>
 8006d60:	230d      	movs	r3, #13
 8006d62:	e12b      	b.n	8006fbc <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d6c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8006d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <find_volume+0x33c>
 8006d7c:	230d      	movs	r3, #13
 8006d7e:	e11d      	b.n	8006fbc <find_volume+0x578>
	fmt = FS_FAT12;
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d902      	bls.n	8006d96 <find_volume+0x352>
 8006d90:	2302      	movs	r3, #2
 8006d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d902      	bls.n	8006da6 <find_volume+0x362>
 8006da0:	2303      	movs	r3, #3
 8006da2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	1c9a      	adds	r2, r3, #2
 8006daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006db4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006db8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dbc:	441a      	add	r2, r3
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006dc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	441a      	add	r2, r3
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8006dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d121      	bne.n	8006e1c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dda:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <find_volume+0x3a2>
 8006de2:	230d      	movs	r3, #13
 8006de4:	e0ea      	b.n	8006fbc <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006dec:	061a      	lsls	r2, r3, #24
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006df4:	041b      	lsls	r3, r3, #16
 8006df6:	4313      	orrs	r3, r2
 8006df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dfa:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006dfe:	0212      	lsls	r2, r2, #8
 8006e00:	4313      	orrs	r3, r2
 8006e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e04:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	647b      	str	r3, [r7, #68]	; 0x44
 8006e1a:	e025      	b.n	8006e68 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <find_volume+0x3e6>
 8006e26:	230d      	movs	r3, #13
 8006e28:	e0c8      	b.n	8006fbc <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	441a      	add	r2, r3
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d104      	bne.n	8006e4c <find_volume+0x408>
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	e00c      	b.n	8006e66 <find_volume+0x422>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	085a      	lsrs	r2, r3, #1
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8006e66:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8006e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006e74:	0a5b      	lsrs	r3, r3, #9
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d201      	bcs.n	8006e7e <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8006e7a:	230d      	movs	r3, #13
 8006e7c:	e09e      	b.n	8006fbc <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	2280      	movs	r2, #128	; 0x80
 8006e98:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8006e9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d177      	bne.n	8006f94 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	b21a      	sxth	r2, r3
 8006eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006eb4:	b21b      	sxth	r3, r3
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	b21b      	sxth	r3, r3
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d16a      	bne.n	8006f94 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8006ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ec6:	f7fe fd42 	bl	800594e <move_window>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d161      	bne.n	8006f94 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	b21a      	sxth	r2, r3
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee4:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006ee8:	b21b      	sxth	r3, r3
 8006eea:	4313      	orrs	r3, r2
 8006eec:	b21b      	sxth	r3, r3
 8006eee:	4a35      	ldr	r2, [pc, #212]	; (8006fc4 <find_volume+0x580>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d14f      	bne.n	8006f94 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	78db      	ldrb	r3, [r3, #3]
 8006ef8:	061a      	lsls	r2, r3, #24
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	789b      	ldrb	r3, [r3, #2]
 8006efe:	041b      	lsls	r3, r3, #16
 8006f00:	4313      	orrs	r3, r2
 8006f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f04:	7852      	ldrb	r2, [r2, #1]
 8006f06:	0212      	lsls	r2, r2, #8
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	4a2d      	ldr	r2, [pc, #180]	; (8006fc8 <find_volume+0x584>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d13e      	bne.n	8006f94 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8006f1c:	061a      	lsls	r2, r3, #24
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	4313      	orrs	r3, r2
 8006f28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f2a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8006f2e:	0212      	lsls	r2, r2, #8
 8006f30:	4313      	orrs	r3, r2
 8006f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f34:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	4a24      	ldr	r2, [pc, #144]	; (8006fcc <find_volume+0x588>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d129      	bne.n	8006f94 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8006f46:	061a      	lsls	r2, r3, #24
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8006f4e:	041b      	lsls	r3, r3, #16
 8006f50:	4313      	orrs	r3, r2
 8006f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f54:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8006f58:	0212      	lsls	r2, r2, #8
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f5e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8006f62:	431a      	orrs	r2, r3
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8006f70:	061a      	lsls	r2, r3, #24
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f7e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8006f82:	0212      	lsls	r2, r2, #8
 8006f84:	4313      	orrs	r3, r2
 8006f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f88:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f96:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006f9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <find_volume+0x58c>)
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <find_volume+0x58c>)
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	4b09      	ldr	r3, [pc, #36]	; (8006fd0 <find_volume+0x58c>)
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8006fb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006fb6:	f7fe fc57 	bl	8005868 <clear_lock>
#endif

	return FR_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3758      	adds	r7, #88	; 0x58
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	ffffaa55 	.word	0xffffaa55
 8006fc8:	41615252 	.word	0x41615252
 8006fcc:	61417272 	.word	0x61417272
 8006fd0:	2000047c 	.word	0x2000047c

08006fd4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d022      	beq.n	800702c <validate+0x58>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01d      	beq.n	800702c <validate+0x58>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ff6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d016      	beq.n	800702c <validate+0x58>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007004:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800700e:	429a      	cmp	r2, r3
 8007010:	d10c      	bne.n	800702c <validate+0x58>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007018:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe f983 	bl	8005328 <disk_status>
 8007022:	4603      	mov	r3, r0
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800702c:	2309      	movs	r3, #9
 800702e:	e000      	b.n	8007032 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b088      	sub	sp, #32
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	4613      	mov	r3, r2
 8007048:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800704e:	f107 0310 	add.w	r3, r7, #16
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fc48 	bl	80068e8 <get_ldnumber>
 8007058:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	2b00      	cmp	r3, #0
 800705e:	da01      	bge.n	8007064 <f_mount+0x28>
 8007060:	230b      	movs	r3, #11
 8007062:	e02d      	b.n	80070c0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007064:	4a18      	ldr	r2, [pc, #96]	; (80070c8 <f_mount+0x8c>)
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800706c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d006      	beq.n	8007082 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007074:	69b8      	ldr	r0, [r7, #24]
 8007076:	f7fe fbf7 	bl	8005868 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	490d      	ldr	r1, [pc, #52]	; (80070c8 <f_mount+0x8c>)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <f_mount+0x6a>
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <f_mount+0x6e>
 80070a6:	2300      	movs	r3, #0
 80070a8:	e00a      	b.n	80070c0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80070aa:	f107 0108 	add.w	r1, r7, #8
 80070ae:	f107 030c 	add.w	r3, r7, #12
 80070b2:	2200      	movs	r2, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fcc5 	bl	8006a44 <find_volume>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80070be:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20000478 	.word	0x20000478

080070cc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80070dc:	6018      	str	r0, [r3, #0]
 80070de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 80070e6:	6019      	str	r1, [r3, #0]
 80070e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ec:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80070f0:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80070f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <f_open+0x38>
 8007100:	2309      	movs	r3, #9
 8007102:	e257      	b.n	80075b4 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 8007104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007108:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007114:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007118:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800711c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007120:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	f002 021f 	and.w	r2, r2, #31
 800712a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800712c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007130:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	f107 0108 	add.w	r1, r7, #8
 8007140:	f107 0320 	add.w	r3, r7, #32
 8007144:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff fc7b 	bl	8006a44 <find_volume>
 800714e:	4603      	mov	r3, r0
 8007150:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007154:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007158:	2b00      	cmp	r3, #0
 800715a:	f040 8229 	bne.w	80075b0 <f_open+0x4e4>
		INIT_BUF(dj);
 800715e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007162:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007166:	f107 0214 	add.w	r2, r7, #20
 800716a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800716e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007172:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	f107 0320 	add.w	r3, r7, #32
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff fb44 	bl	800680c <follow_path>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800718a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800718e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007192:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007196:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800719a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d11d      	bne.n	80071de <f_open+0x112>
			if (!dir)	/* Default directory itself */
 80071a2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <f_open+0xe6>
				res = FR_INVALID_NAME;
 80071aa:	2306      	movs	r3, #6
 80071ac:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80071b0:	e015      	b.n	80071de <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f023 0301 	bic.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bf14      	ite	ne
 80071c4:	2301      	movne	r3, #1
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	f107 0320 	add.w	r3, r7, #32
 80071d0:	4611      	mov	r1, r2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe f9be 	bl	8005554 <chk_lock>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80071de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	f003 031c 	and.w	r3, r3, #28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80e6 	beq.w	80073be <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 80071f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d027      	beq.n	800724a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80071fa:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d10e      	bne.n	8007220 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007202:	f7fe fa13 	bl	800562c <enq_lock>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d006      	beq.n	800721a <f_open+0x14e>
 800720c:	f107 0320 	add.w	r3, r7, #32
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fa02 	bl	800661a <dir_register>
 8007216:	4603      	mov	r3, r0
 8007218:	e000      	b.n	800721c <f_open+0x150>
 800721a:	2312      	movs	r3, #18
 800721c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007224:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007228:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800722c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	f042 0208 	orr.w	r2, r2, #8
 8007236:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800723c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007240:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007244:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8007248:	e017      	b.n	800727a <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800724a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800724e:	330b      	adds	r3, #11
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 0311 	and.w	r3, r3, #17
 8007256:	2b00      	cmp	r3, #0
 8007258:	d003      	beq.n	8007262 <f_open+0x196>
					res = FR_DENIED;
 800725a:	2307      	movs	r3, #7
 800725c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 8007260:	e00b      	b.n	800727a <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8007262:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007266:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <f_open+0x1ae>
						res = FR_EXIST;
 8007274:	2308      	movs	r3, #8
 8007276:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800727a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800727e:	2b00      	cmp	r3, #0
 8007280:	f040 80c1 	bne.w	8007406 <f_open+0x33a>
 8007284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007288:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80b7 	beq.w	8007406 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 8007298:	f7fd fb12 	bl	80048c0 <get_fattime>
 800729c:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80072a0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072a4:	330e      	adds	r3, #14
 80072a6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072bc:	330f      	adds	r3, #15
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80072c6:	0c1a      	lsrs	r2, r3, #16
 80072c8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072cc:	3310      	adds	r3, #16
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80072d6:	0e1a      	lsrs	r2, r3, #24
 80072d8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072dc:	3311      	adds	r3, #17
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80072e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072e6:	330b      	adds	r3, #11
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80072ec:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072f0:	331c      	adds	r3, #28
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80072fa:	331d      	adds	r3, #29
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007304:	331e      	adds	r3, #30
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800730e:	331f      	adds	r3, #31
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007314:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007318:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800731c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007320:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff f8d6 	bl	80064d6 <ld_clust>
 800732a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800732e:	2100      	movs	r1, #0
 8007330:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8007334:	f7ff f8fc 	bl	8006530 <st_clust>
				dj.fs->wflag = 1;
 8007338:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800734a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800734e:	2b00      	cmp	r3, #0
 8007350:	d059      	beq.n	8007406 <f_open+0x33a>
					dw = dj.fs->winsect;
 8007352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007356:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800735a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800735e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8007362:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 8007366:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800736e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007372:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe fdad 	bl	8005ed6 <remove_chain>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 8007382:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8007386:	2b00      	cmp	r3, #0
 8007388:	d13d      	bne.n	8007406 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800738a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800738e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007392:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007396:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800739a:	3a01      	subs	r2, #1
 800739c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 80073a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80073a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073ac:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe facc 	bl	800594e <move_window>
 80073b6:	4603      	mov	r3, r0
 80073b8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80073bc:	e023      	b.n	8007406 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80073be:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d11f      	bne.n	8007406 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80073c6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073ca:	330b      	adds	r3, #11
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f003 0310 	and.w	r3, r3, #16
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <f_open+0x312>
					res = FR_NO_FILE;
 80073d6:	2304      	movs	r3, #4
 80073d8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 80073dc:	e013      	b.n	8007406 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80073de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e2:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <f_open+0x33a>
 80073f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80073f4:	330b      	adds	r3, #11
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <f_open+0x33a>
						res = FR_DENIED;
 8007400:	2307      	movs	r3, #7
 8007402:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 8007406:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800740a:	2b00      	cmp	r3, #0
 800740c:	d153      	bne.n	80074b6 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800740e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007412:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <f_open+0x36c>
				mode |= FA__WRITTEN;
 8007420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007424:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007428:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800742c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 8007430:	7812      	ldrb	r2, [r2, #0]
 8007432:	f042 0220 	orr.w	r2, r2, #32
 8007436:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007438:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800743c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8007440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007444:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800744c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 8007456:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800745a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007464:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007468:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800746c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f023 0301 	bic.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	bf14      	ite	ne
 800747a:	2301      	movne	r3, #1
 800747c:	2300      	moveq	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	f107 0320 	add.w	r3, r7, #32
 8007486:	4611      	mov	r1, r2
 8007488:	4618      	mov	r0, r3
 800748a:	f7fe f8f3 	bl	8005674 <inc_lock>
 800748e:	4602      	mov	r2, r0
 8007490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007494:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800749e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074a2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <f_open+0x3ea>
 80074b0:	2302      	movs	r3, #2
 80074b2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80074b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d178      	bne.n	80075b0 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 80074be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074cc:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 80074d0:	7812      	ldrb	r2, [r2, #0]
 80074d2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 80074d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80074e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ea:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80074ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074f2:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe ffed 	bl	80064d6 <ld_clust>
 80074fc:	4602      	mov	r2, r0
 80074fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007502:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800750c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8007510:	331f      	adds	r3, #31
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	061a      	lsls	r2, r3, #24
 8007516:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800751a:	331e      	adds	r3, #30
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	041b      	lsls	r3, r3, #16
 8007520:	4313      	orrs	r3, r2
 8007522:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007526:	321d      	adds	r2, #29
 8007528:	7812      	ldrb	r2, [r2, #0]
 800752a:	0212      	lsls	r2, r2, #8
 800752c:	4313      	orrs	r3, r2
 800752e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8007532:	321c      	adds	r2, #28
 8007534:	7812      	ldrb	r2, [r2, #0]
 8007536:	431a      	orrs	r2, r3
 8007538:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8007546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 8007556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2200      	movs	r2, #0
 8007562:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8007566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800756a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8007576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800757e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007586:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 8007590:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007594:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800759e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80075a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80075b0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b08a      	sub	sp, #40	; 0x28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff fcfc 	bl	8006fd4 <validate>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <f_write+0x2c>
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
 80075e8:	e192      	b.n	8007910 <f_write+0x352>
	if (fp->err)							/* Check error */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80075fa:	e189      	b.n	8007910 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800760a:	2307      	movs	r3, #7
 800760c:	e180      	b.n	8007910 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	441a      	add	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800761e:	429a      	cmp	r2, r3
 8007620:	f080 8158 	bcs.w	80078d4 <f_write+0x316>
 8007624:	2300      	movs	r3, #0
 8007626:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8007628:	e154      	b.n	80078d4 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007634:	2b00      	cmp	r3, #0
 8007636:	f040 8114 	bne.w	8007862 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007640:	0a5b      	lsrs	r3, r3, #9
 8007642:	b2da      	uxtb	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800764a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800764e:	3b01      	subs	r3, #1
 8007650:	b2db      	uxtb	r3, r3
 8007652:	4013      	ands	r3, r2
 8007654:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8007656:	7dbb      	ldrb	r3, [r7, #22]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d151      	bne.n	8007700 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10f      	bne.n	8007686 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d121      	bne.n	80076b8 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fc84 	bl	8005f8a <create_chain>
 8007682:	6278      	str	r0, [r7, #36]	; 0x24
 8007684:	e018      	b.n	80076b8 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800768c:	2b00      	cmp	r3, #0
 800768e:	d008      	beq.n	80076a2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007696:	4619      	mov	r1, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7fe fd13 	bl	80060c4 <clmt_clust>
 800769e:	6278      	str	r0, [r7, #36]	; 0x24
 80076a0:	e00a      	b.n	80076b8 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7fe fc6a 	bl	8005f8a <create_chain>
 80076b6:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 810f 	beq.w	80078de <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d105      	bne.n	80076d2 <f_write+0x114>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80076ce:	2302      	movs	r3, #2
 80076d0:	e11e      	b.n	8007910 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d105      	bne.n	80076e6 <f_write+0x128>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80076e2:	2301      	movs	r3, #1
 80076e4:	e114      	b.n	8007910 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d103      	bne.n	8007700 <f_write+0x142>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01d      	beq.n	800774a <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007714:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007718:	68f9      	ldr	r1, [r7, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007720:	2301      	movs	r3, #1
 8007722:	f7fd fe61 	bl	80053e8 <disk_write>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007734:	2301      	movs	r3, #1
 8007736:	e0eb      	b.n	8007910 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800773e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007742:	b2da      	uxtb	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f7fe f9d3 	bl	8005b04 <clust2sect>
 800775e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <f_write+0x1b4>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2202      	movs	r2, #2
 800776a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800776e:	2302      	movs	r3, #2
 8007770:	e0ce      	b.n	8007910 <f_write+0x352>
			sect += csect;
 8007772:	7dbb      	ldrb	r3, [r7, #22]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	0a5b      	lsrs	r3, r3, #9
 800777e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d048      	beq.n	8007818 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007786:	7dba      	ldrb	r2, [r7, #22]
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007792:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007796:	4293      	cmp	r3, r2
 8007798:	d908      	bls.n	80077ac <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077a0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80077a4:	461a      	mov	r2, r3
 80077a6:	7dbb      	ldrb	r3, [r7, #22]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077b2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	69b9      	ldr	r1, [r7, #24]
 80077bc:	f7fd fe14 	bl	80053e8 <disk_write>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d005      	beq.n	80077d2 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80077ce:	2301      	movs	r3, #1
 80077d0:	e09e      	b.n	8007910 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	69fa      	ldr	r2, [r7, #28]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d916      	bls.n	8007810 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	025b      	lsls	r3, r3, #9
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	4413      	add	r3, r2
 80077f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f8:	4619      	mov	r1, r3
 80077fa:	f7fd fe33 	bl	8005464 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007808:	b2da      	uxtb	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	025b      	lsls	r3, r3, #9
 8007814:	623b      	str	r3, [r7, #32]
				continue;
 8007816:	e047      	b.n	80078a8 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d01a      	beq.n	800785a <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007830:	429a      	cmp	r2, r3
 8007832:	d212      	bcs.n	800785a <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800783a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800783e:	68f9      	ldr	r1, [r7, #12]
 8007840:	2301      	movs	r3, #1
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	f7fd fdb0 	bl	80053a8 <disk_read>
 8007848:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007856:	2301      	movs	r3, #1
 8007858:	e05a      	b.n	8007910 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007870:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8007872:	6a3a      	ldr	r2, [r7, #32]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d901      	bls.n	800787e <f_write+0x2c0>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	69b9      	ldr	r1, [r7, #24]
 8007890:	4618      	mov	r0, r3
 8007892:	f7fd fde7 	bl	8005464 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800789c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	4413      	add	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	441a      	add	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	441a      	add	r2, r3
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f47f aea7 	bne.w	800762a <f_write+0x6c>
 80078dc:	e000      	b.n	80078e0 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078de:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d905      	bls.n	80078fc <f_write+0x33e>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007902:	f043 0320 	orr.w	r3, r3, #32
 8007906:	b2da      	uxtb	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3728      	adds	r7, #40	; 0x28
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fb57 	bl	8006fd4 <validate>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800792a:	7dfb      	ldrb	r3, [r7, #23]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 80a8 	bne.w	8007a82 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80a0 	beq.w	8007a82 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794c:	2b00      	cmp	r3, #0
 800794e:	d019      	beq.n	8007984 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007956:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007962:	2301      	movs	r3, #1
 8007964:	f7fd fd40 	bl	80053e8 <disk_write>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800796e:	2301      	movs	r3, #1
 8007970:	e088      	b.n	8007a84 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800797c:	b2da      	uxtb	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007990:	4619      	mov	r1, r3
 8007992:	4610      	mov	r0, r2
 8007994:	f7fd ffdb 	bl	800594e <move_window>
 8007998:	4603      	mov	r3, r0
 800799a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d16f      	bne.n	8007a82 <f_sync+0x16a>
				dir = fp->dir_ptr;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80079a8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	330b      	adds	r3, #11
 80079ae:	781a      	ldrb	r2, [r3, #0]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	330b      	adds	r3, #11
 80079b4:	f042 0220 	orr.w	r2, r2, #32
 80079b8:	b2d2      	uxtb	r2, r2
 80079ba:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	331c      	adds	r3, #28
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	b29a      	uxth	r2, r3
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	331d      	adds	r3, #29
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80079e4:	0c1a      	lsrs	r2, r3, #16
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	331e      	adds	r3, #30
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80079f4:	0e1a      	lsrs	r2, r3, #24
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	331f      	adds	r3, #31
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007a04:	4619      	mov	r1, r3
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f7fe fd92 	bl	8006530 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007a0c:	f7fc ff58 	bl	80048c0 <get_fattime>
 8007a10:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	3316      	adds	r3, #22
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	0a1b      	lsrs	r3, r3, #8
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	3317      	adds	r3, #23
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	0c1a      	lsrs	r2, r3, #16
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	3318      	adds	r3, #24
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	701a      	strb	r2, [r3, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	0e1a      	lsrs	r2, r3, #24
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	3319      	adds	r3, #25
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3312      	adds	r3, #18
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	3313      	adds	r3, #19
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007a5a:	f023 0320 	bic.w	r3, r3, #32
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fd ff96 	bl	80059aa <sync_fs>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff ff3f 	bl	8007918 <f_sync>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d116      	bne.n	8007ad2 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fa95 	bl	8006fd4 <validate>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10e      	bne.n	8007ad2 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fd fe90 	bl	80057e0 <dec_lock>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d103      	bne.n	8007ad2 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b090      	sub	sp, #64	; 0x40
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fa74 	bl	8006fd4 <validate>
 8007aec:	4603      	mov	r3, r0
 8007aee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8007af2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <f_lseek+0x24>
 8007afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007afe:	e247      	b.n	8007f90 <f_lseek+0x4b4>
	if (fp->err)						/* Check error */
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8007b10:	e23e      	b.n	8007f90 <f_lseek+0x4b4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80f2 	beq.w	8007d02 <f_lseek+0x226>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d164      	bne.n	8007bf0 <f_lseek+0x114>
			tbl = fp->cltbl;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	1d1a      	adds	r2, r3, #4
 8007b32:	627a      	str	r2, [r7, #36]	; 0x24
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	2302      	movs	r3, #2
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b42:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d041      	beq.n	8007bce <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b54:	3302      	adds	r3, #2
 8007b56:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	60fb      	str	r3, [r7, #12]
 8007b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5e:	3301      	adds	r3, #1
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fd ffeb 	bl	8005b46 <get_fat>
 8007b70:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d805      	bhi.n	8007b84 <f_lseek+0xa8>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b80:	2302      	movs	r3, #2
 8007b82:	e205      	b.n	8007f90 <f_lseek+0x4b4>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8a:	d105      	bne.n	8007b98 <f_lseek+0xbc>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007b94:	2301      	movs	r3, #1
 8007b96:	e1fb      	b.n	8007f90 <f_lseek+0x4b4>
					} while (cl == pcl + 1);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d0da      	beq.n	8007b58 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d809      	bhi.n	8007bbe <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1d1a      	adds	r2, r3, #4
 8007bae:	627a      	str	r2, [r7, #36]	; 0x24
 8007bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d3bd      	bcc.n	8007b4a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8007bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bd6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8007bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d803      	bhi.n	8007be8 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	2200      	movs	r2, #0
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e1d1      	b.n	8007f8c <f_lseek+0x4b0>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007be8:	2311      	movs	r3, #17
 8007bea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007bee:	e1cd      	b.n	8007f8c <f_lseek+0x4b0>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <f_lseek+0x128>
				ofs = fp->fsize;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007c02:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			if (ofs) {
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 81bc 	beq.w	8007f8c <f_lseek+0x4b0>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fe fa52 	bl	80060c4 <clmt_clust>
 8007c20:	4602      	mov	r2, r0
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				dsc = clust2sect(fp->fs, fp->clust);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fd ff64 	bl	8005b04 <clust2sect>
 8007c3c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <f_lseek+0x174>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	e19f      	b.n	8007f90 <f_lseek+0x4b4>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	0a5b      	lsrs	r3, r3, #9
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007c5c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007c60:	3a01      	subs	r2, #1
 8007c62:	4013      	ands	r3, r2
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	4413      	add	r3, r2
 8007c68:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f000 8189 	beq.w	8007f8c <f_lseek+0x4b0>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	f000 8182 	beq.w	8007f8c <f_lseek+0x4b0>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d01d      	beq.n	8007cd2 <f_lseek+0x1f6>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c9c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007ca8:	2301      	movs	r3, #1
 8007caa:	f7fd fb9d 	bl	80053e8 <disk_write>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <f_lseek+0x1e4>
							ABORT(fp->fs, FR_DISK_ERR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e167      	b.n	8007f90 <f_lseek+0x4b4>
						fp->flag &= ~FA__DIRTY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cd8:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	f7fd fb61 	bl	80053a8 <disk_read>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <f_lseek+0x21c>
						ABORT(fp->fs, FR_DISK_ERR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e14b      	b.n	8007f90 <f_lseek+0x4b4>
#endif
					fp->dsect = dsc;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8007d00:	e144      	b.n	8007f8c <f_lseek+0x4b0>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d90a      	bls.n	8007d24 <f_lseek+0x248>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007d14:	f003 0302 	and.w	r3, r3, #2
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d103      	bne.n	8007d24 <f_lseek+0x248>
#endif
			) ofs = fp->fsize;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007d22:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007d2a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		if (ofs) {
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 80c6 	beq.w	8007ecc <f_lseek+0x3f0>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007d46:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007d4a:	025b      	lsls	r3, r3, #9
 8007d4c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01e      	beq.n	8007d92 <f_lseek+0x2b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	1e5a      	subs	r2, r3, #1
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	1e59      	subs	r1, r3, #1
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d312      	bcc.n	8007d92 <f_lseek+0x2b6>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	1e5a      	subs	r2, r3, #1
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	425b      	negs	r3, r3
 8007d74:	401a      	ands	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				ofs -= fp->fptr;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d90:	e029      	b.n	8007de6 <f_lseek+0x30a>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11e      	bne.n	8007dde <f_lseek+0x302>
					clst = create_chain(fp->fs, 0);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007da6:	2100      	movs	r1, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe f8ee 	bl	8005f8a <create_chain>
 8007dae:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8007db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d105      	bne.n	8007dc2 <f_lseek+0x2e6>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2202      	movs	r2, #2
 8007dba:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e0e6      	b.n	8007f90 <f_lseek+0x4b4>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d105      	bne.n	8007dd6 <f_lseek+0x2fa>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e0dc      	b.n	8007f90 <f_lseek+0x4b4>
					fp->sclust = clst;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dda:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				}
#endif
				fp->clust = clst;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007de2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
			}
			if (clst != 0) {
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d06f      	beq.n	8007ecc <f_lseek+0x3f0>
				while (ofs > bcs) {						/* Cluster following loop */
 8007dec:	e047      	b.n	8007e7e <f_lseek+0x3a2>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00d      	beq.n	8007e18 <f_lseek+0x33c>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe f8c0 	bl	8005f8a <create_chain>
 8007e0a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <f_lseek+0x34c>
							ofs = bcs; break;
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	603b      	str	r3, [r7, #0]
 8007e16:	e036      	b.n	8007e86 <f_lseek+0x3aa>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fd fe90 	bl	8005b46 <get_fat>
 8007e26:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2e:	d105      	bne.n	8007e3c <f_lseek+0x360>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0a9      	b.n	8007f90 <f_lseek+0x4b4>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d907      	bls.n	8007e52 <f_lseek+0x376>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d305      	bcc.n	8007e5e <f_lseek+0x382>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2202      	movs	r2, #2
 8007e56:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e098      	b.n	8007f90 <f_lseek+0x4b4>
					fp->clust = clst;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
					fp->fptr += bcs;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	441a      	add	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
					ofs -= bcs;
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d8b3      	bhi.n	8007dee <f_lseek+0x312>
				}
				fp->fptr += ofs;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	441a      	add	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
				if (ofs % SS(fp->fs)) {
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d015      	beq.n	8007ecc <f_lseek+0x3f0>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fd fe2b 	bl	8005b04 <clust2sect>
 8007eae:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8007eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <f_lseek+0x3e6>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2202      	movs	r2, #2
 8007eba:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e066      	b.n	8007f90 <f_lseek+0x4b4>
					nsect += ofs / SS(fp->fs);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	0a5b      	lsrs	r3, r3, #9
 8007ec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ec8:	4413      	add	r3, r2
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8007ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d041      	beq.n	8007f5e <f_lseek+0x482>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d03b      	beq.n	8007f5e <f_lseek+0x482>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01d      	beq.n	8007f30 <f_lseek+0x454>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007efa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007f06:	2301      	movs	r3, #1
 8007f08:	f7fd fa6e 	bl	80053e8 <disk_write>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <f_lseek+0x442>
					ABORT(fp->fs, FR_DISK_ERR);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e038      	b.n	8007f90 <f_lseek+0x4b4>
				fp->flag &= ~FA__DIRTY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f36:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f40:	f7fd fa32 	bl	80053a8 <disk_read>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <f_lseek+0x47a>
				ABORT(fp->fs, FR_DISK_ERR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8007f52:	2301      	movs	r3, #1
 8007f54:	e01c      	b.n	8007f90 <f_lseek+0x4b4>
#endif
			fp->dsect = nsect;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d90e      	bls.n	8007f8c <f_lseek+0x4b0>
			fp->fsize = fp->fptr;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->flag |= FA__WRITTEN;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8007f80:	f043 0320 	orr.w	r3, r3, #32
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8007f8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3740      	adds	r7, #64	; 0x40
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007fae:	4b1e      	ldr	r3, [pc, #120]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fb0:	7a5b      	ldrb	r3, [r3, #9]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d831      	bhi.n	800801c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007fb8:	4b1b      	ldr	r3, [pc, #108]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fba:	7a5b      	ldrb	r3, [r3, #9]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007fc6:	4b18      	ldr	r3, [pc, #96]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fc8:	7a5b      	ldrb	r3, [r3, #9]
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4a16      	ldr	r2, [pc, #88]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fd8:	7a5b      	ldrb	r3, [r3, #9]
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fe0:	4413      	add	r3, r2
 8007fe2:	79fa      	ldrb	r2, [r7, #7]
 8007fe4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007fe6:	4b10      	ldr	r3, [pc, #64]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007fe8:	7a5b      	ldrb	r3, [r3, #9]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	1c5a      	adds	r2, r3, #1
 8007fee:	b2d1      	uxtb	r1, r2
 8007ff0:	4a0d      	ldr	r2, [pc, #52]	; (8008028 <FATFS_LinkDriverEx+0x90>)
 8007ff2:	7251      	strb	r1, [r2, #9]
 8007ff4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007ff6:	7dbb      	ldrb	r3, [r7, #22]
 8007ff8:	3330      	adds	r3, #48	; 0x30
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	3301      	adds	r3, #1
 8008004:	223a      	movs	r2, #58	; 0x3a
 8008006:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	3302      	adds	r3, #2
 800800c:	222f      	movs	r2, #47	; 0x2f
 800800e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	3303      	adds	r3, #3
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800801c:	7dfb      	ldrb	r3, [r7, #23]
}
 800801e:	4618      	mov	r0, r3
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr
 8008028:	20000498 	.word	0x20000498

0800802c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008036:	2200      	movs	r2, #0
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff ffac 	bl	8007f98 <FATFS_LinkDriverEx>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <__cvt>:
 800804a:	2b00      	cmp	r3, #0
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	461f      	mov	r7, r3
 8008052:	bfbb      	ittet	lt
 8008054:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008058:	461f      	movlt	r7, r3
 800805a:	2300      	movge	r3, #0
 800805c:	232d      	movlt	r3, #45	; 0x2d
 800805e:	b088      	sub	sp, #32
 8008060:	4614      	mov	r4, r2
 8008062:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008064:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008066:	7013      	strb	r3, [r2, #0]
 8008068:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800806a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800806e:	f023 0820 	bic.w	r8, r3, #32
 8008072:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008076:	d005      	beq.n	8008084 <__cvt+0x3a>
 8008078:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800807c:	d100      	bne.n	8008080 <__cvt+0x36>
 800807e:	3501      	adds	r5, #1
 8008080:	2302      	movs	r3, #2
 8008082:	e000      	b.n	8008086 <__cvt+0x3c>
 8008084:	2303      	movs	r3, #3
 8008086:	aa07      	add	r2, sp, #28
 8008088:	9204      	str	r2, [sp, #16]
 800808a:	aa06      	add	r2, sp, #24
 800808c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008090:	e9cd 3500 	strd	r3, r5, [sp]
 8008094:	4622      	mov	r2, r4
 8008096:	463b      	mov	r3, r7
 8008098:	f000 feae 	bl	8008df8 <_dtoa_r>
 800809c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080a0:	4606      	mov	r6, r0
 80080a2:	d102      	bne.n	80080aa <__cvt+0x60>
 80080a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80080a6:	07db      	lsls	r3, r3, #31
 80080a8:	d522      	bpl.n	80080f0 <__cvt+0xa6>
 80080aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080ae:	eb06 0905 	add.w	r9, r6, r5
 80080b2:	d110      	bne.n	80080d6 <__cvt+0x8c>
 80080b4:	7833      	ldrb	r3, [r6, #0]
 80080b6:	2b30      	cmp	r3, #48	; 0x30
 80080b8:	d10a      	bne.n	80080d0 <__cvt+0x86>
 80080ba:	2200      	movs	r2, #0
 80080bc:	2300      	movs	r3, #0
 80080be:	4620      	mov	r0, r4
 80080c0:	4639      	mov	r1, r7
 80080c2:	f7f8 fc71 	bl	80009a8 <__aeabi_dcmpeq>
 80080c6:	b918      	cbnz	r0, 80080d0 <__cvt+0x86>
 80080c8:	f1c5 0501 	rsb	r5, r5, #1
 80080cc:	f8ca 5000 	str.w	r5, [sl]
 80080d0:	f8da 3000 	ldr.w	r3, [sl]
 80080d4:	4499      	add	r9, r3
 80080d6:	2200      	movs	r2, #0
 80080d8:	2300      	movs	r3, #0
 80080da:	4620      	mov	r0, r4
 80080dc:	4639      	mov	r1, r7
 80080de:	f7f8 fc63 	bl	80009a8 <__aeabi_dcmpeq>
 80080e2:	b108      	cbz	r0, 80080e8 <__cvt+0x9e>
 80080e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80080e8:	2230      	movs	r2, #48	; 0x30
 80080ea:	9b07      	ldr	r3, [sp, #28]
 80080ec:	454b      	cmp	r3, r9
 80080ee:	d307      	bcc.n	8008100 <__cvt+0xb6>
 80080f0:	4630      	mov	r0, r6
 80080f2:	9b07      	ldr	r3, [sp, #28]
 80080f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80080f6:	1b9b      	subs	r3, r3, r6
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	b008      	add	sp, #32
 80080fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008100:	1c59      	adds	r1, r3, #1
 8008102:	9107      	str	r1, [sp, #28]
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	e7f0      	b.n	80080ea <__cvt+0xa0>

08008108 <__exponent>:
 8008108:	4603      	mov	r3, r0
 800810a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800810c:	2900      	cmp	r1, #0
 800810e:	f803 2b02 	strb.w	r2, [r3], #2
 8008112:	bfb6      	itet	lt
 8008114:	222d      	movlt	r2, #45	; 0x2d
 8008116:	222b      	movge	r2, #43	; 0x2b
 8008118:	4249      	neglt	r1, r1
 800811a:	2909      	cmp	r1, #9
 800811c:	7042      	strb	r2, [r0, #1]
 800811e:	dd2a      	ble.n	8008176 <__exponent+0x6e>
 8008120:	f10d 0207 	add.w	r2, sp, #7
 8008124:	4617      	mov	r7, r2
 8008126:	260a      	movs	r6, #10
 8008128:	fb91 f5f6 	sdiv	r5, r1, r6
 800812c:	4694      	mov	ip, r2
 800812e:	fb06 1415 	mls	r4, r6, r5, r1
 8008132:	3430      	adds	r4, #48	; 0x30
 8008134:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008138:	460c      	mov	r4, r1
 800813a:	2c63      	cmp	r4, #99	; 0x63
 800813c:	4629      	mov	r1, r5
 800813e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008142:	dcf1      	bgt.n	8008128 <__exponent+0x20>
 8008144:	3130      	adds	r1, #48	; 0x30
 8008146:	f1ac 0402 	sub.w	r4, ip, #2
 800814a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800814e:	4622      	mov	r2, r4
 8008150:	1c41      	adds	r1, r0, #1
 8008152:	42ba      	cmp	r2, r7
 8008154:	d30a      	bcc.n	800816c <__exponent+0x64>
 8008156:	f10d 0209 	add.w	r2, sp, #9
 800815a:	eba2 020c 	sub.w	r2, r2, ip
 800815e:	42bc      	cmp	r4, r7
 8008160:	bf88      	it	hi
 8008162:	2200      	movhi	r2, #0
 8008164:	4413      	add	r3, r2
 8008166:	1a18      	subs	r0, r3, r0
 8008168:	b003      	add	sp, #12
 800816a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800816c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008170:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008174:	e7ed      	b.n	8008152 <__exponent+0x4a>
 8008176:	2330      	movs	r3, #48	; 0x30
 8008178:	3130      	adds	r1, #48	; 0x30
 800817a:	7083      	strb	r3, [r0, #2]
 800817c:	70c1      	strb	r1, [r0, #3]
 800817e:	1d03      	adds	r3, r0, #4
 8008180:	e7f1      	b.n	8008166 <__exponent+0x5e>
	...

08008184 <_printf_float>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	b091      	sub	sp, #68	; 0x44
 800818a:	460c      	mov	r4, r1
 800818c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008190:	4616      	mov	r6, r2
 8008192:	461f      	mov	r7, r3
 8008194:	4605      	mov	r5, r0
 8008196:	f000 fd1f 	bl	8008bd8 <_localeconv_r>
 800819a:	6803      	ldr	r3, [r0, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	9309      	str	r3, [sp, #36]	; 0x24
 80081a0:	f7f7 ffd6 	bl	8000150 <strlen>
 80081a4:	2300      	movs	r3, #0
 80081a6:	930e      	str	r3, [sp, #56]	; 0x38
 80081a8:	f8d8 3000 	ldr.w	r3, [r8]
 80081ac:	900a      	str	r0, [sp, #40]	; 0x28
 80081ae:	3307      	adds	r3, #7
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	f103 0208 	add.w	r2, r3, #8
 80081b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80081bc:	f8d4 b000 	ldr.w	fp, [r4]
 80081c0:	f8c8 2000 	str.w	r2, [r8]
 80081c4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80081c8:	4652      	mov	r2, sl
 80081ca:	4643      	mov	r3, r8
 80081cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081d0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80081d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	4650      	mov	r0, sl
 80081dc:	4b9c      	ldr	r3, [pc, #624]	; (8008450 <_printf_float+0x2cc>)
 80081de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081e0:	f7f8 fc14 	bl	8000a0c <__aeabi_dcmpun>
 80081e4:	bb70      	cbnz	r0, 8008244 <_printf_float+0xc0>
 80081e6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ea:	4650      	mov	r0, sl
 80081ec:	4b98      	ldr	r3, [pc, #608]	; (8008450 <_printf_float+0x2cc>)
 80081ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081f0:	f7f8 fbee 	bl	80009d0 <__aeabi_dcmple>
 80081f4:	bb30      	cbnz	r0, 8008244 <_printf_float+0xc0>
 80081f6:	2200      	movs	r2, #0
 80081f8:	2300      	movs	r3, #0
 80081fa:	4650      	mov	r0, sl
 80081fc:	4641      	mov	r1, r8
 80081fe:	f7f8 fbdd 	bl	80009bc <__aeabi_dcmplt>
 8008202:	b110      	cbz	r0, 800820a <_printf_float+0x86>
 8008204:	232d      	movs	r3, #45	; 0x2d
 8008206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800820a:	4a92      	ldr	r2, [pc, #584]	; (8008454 <_printf_float+0x2d0>)
 800820c:	4b92      	ldr	r3, [pc, #584]	; (8008458 <_printf_float+0x2d4>)
 800820e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008212:	bf94      	ite	ls
 8008214:	4690      	movls	r8, r2
 8008216:	4698      	movhi	r8, r3
 8008218:	2303      	movs	r3, #3
 800821a:	f04f 0a00 	mov.w	sl, #0
 800821e:	6123      	str	r3, [r4, #16]
 8008220:	f02b 0304 	bic.w	r3, fp, #4
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	4633      	mov	r3, r6
 8008228:	4621      	mov	r1, r4
 800822a:	4628      	mov	r0, r5
 800822c:	9700      	str	r7, [sp, #0]
 800822e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008230:	f000 f9d6 	bl	80085e0 <_printf_common>
 8008234:	3001      	adds	r0, #1
 8008236:	f040 8090 	bne.w	800835a <_printf_float+0x1d6>
 800823a:	f04f 30ff 	mov.w	r0, #4294967295
 800823e:	b011      	add	sp, #68	; 0x44
 8008240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008244:	4652      	mov	r2, sl
 8008246:	4643      	mov	r3, r8
 8008248:	4650      	mov	r0, sl
 800824a:	4641      	mov	r1, r8
 800824c:	f7f8 fbde 	bl	8000a0c <__aeabi_dcmpun>
 8008250:	b148      	cbz	r0, 8008266 <_printf_float+0xe2>
 8008252:	f1b8 0f00 	cmp.w	r8, #0
 8008256:	bfb8      	it	lt
 8008258:	232d      	movlt	r3, #45	; 0x2d
 800825a:	4a80      	ldr	r2, [pc, #512]	; (800845c <_printf_float+0x2d8>)
 800825c:	bfb8      	it	lt
 800825e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008262:	4b7f      	ldr	r3, [pc, #508]	; (8008460 <_printf_float+0x2dc>)
 8008264:	e7d3      	b.n	800820e <_printf_float+0x8a>
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	d142      	bne.n	80082f6 <_printf_float+0x172>
 8008270:	2306      	movs	r3, #6
 8008272:	6063      	str	r3, [r4, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	9206      	str	r2, [sp, #24]
 8008278:	aa0e      	add	r2, sp, #56	; 0x38
 800827a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800827e:	aa0d      	add	r2, sp, #52	; 0x34
 8008280:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008284:	9203      	str	r2, [sp, #12]
 8008286:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800828a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	6863      	ldr	r3, [r4, #4]
 8008292:	4652      	mov	r2, sl
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	4628      	mov	r0, r5
 8008298:	4643      	mov	r3, r8
 800829a:	910b      	str	r1, [sp, #44]	; 0x2c
 800829c:	f7ff fed5 	bl	800804a <__cvt>
 80082a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80082a2:	4680      	mov	r8, r0
 80082a4:	2947      	cmp	r1, #71	; 0x47
 80082a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082a8:	d108      	bne.n	80082bc <_printf_float+0x138>
 80082aa:	1cc8      	adds	r0, r1, #3
 80082ac:	db02      	blt.n	80082b4 <_printf_float+0x130>
 80082ae:	6863      	ldr	r3, [r4, #4]
 80082b0:	4299      	cmp	r1, r3
 80082b2:	dd40      	ble.n	8008336 <_printf_float+0x1b2>
 80082b4:	f1a9 0902 	sub.w	r9, r9, #2
 80082b8:	fa5f f989 	uxtb.w	r9, r9
 80082bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082c0:	d81f      	bhi.n	8008302 <_printf_float+0x17e>
 80082c2:	464a      	mov	r2, r9
 80082c4:	3901      	subs	r1, #1
 80082c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082ca:	910d      	str	r1, [sp, #52]	; 0x34
 80082cc:	f7ff ff1c 	bl	8008108 <__exponent>
 80082d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082d2:	4682      	mov	sl, r0
 80082d4:	1813      	adds	r3, r2, r0
 80082d6:	2a01      	cmp	r2, #1
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	dc02      	bgt.n	80082e2 <_printf_float+0x15e>
 80082dc:	6822      	ldr	r2, [r4, #0]
 80082de:	07d2      	lsls	r2, r2, #31
 80082e0:	d501      	bpl.n	80082e6 <_printf_float+0x162>
 80082e2:	3301      	adds	r3, #1
 80082e4:	6123      	str	r3, [r4, #16]
 80082e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d09b      	beq.n	8008226 <_printf_float+0xa2>
 80082ee:	232d      	movs	r3, #45	; 0x2d
 80082f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082f4:	e797      	b.n	8008226 <_printf_float+0xa2>
 80082f6:	2947      	cmp	r1, #71	; 0x47
 80082f8:	d1bc      	bne.n	8008274 <_printf_float+0xf0>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d1ba      	bne.n	8008274 <_printf_float+0xf0>
 80082fe:	2301      	movs	r3, #1
 8008300:	e7b7      	b.n	8008272 <_printf_float+0xee>
 8008302:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008306:	d118      	bne.n	800833a <_printf_float+0x1b6>
 8008308:	2900      	cmp	r1, #0
 800830a:	6863      	ldr	r3, [r4, #4]
 800830c:	dd0b      	ble.n	8008326 <_printf_float+0x1a2>
 800830e:	6121      	str	r1, [r4, #16]
 8008310:	b913      	cbnz	r3, 8008318 <_printf_float+0x194>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	07d0      	lsls	r0, r2, #31
 8008316:	d502      	bpl.n	800831e <_printf_float+0x19a>
 8008318:	3301      	adds	r3, #1
 800831a:	440b      	add	r3, r1
 800831c:	6123      	str	r3, [r4, #16]
 800831e:	f04f 0a00 	mov.w	sl, #0
 8008322:	65a1      	str	r1, [r4, #88]	; 0x58
 8008324:	e7df      	b.n	80082e6 <_printf_float+0x162>
 8008326:	b913      	cbnz	r3, 800832e <_printf_float+0x1aa>
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	07d2      	lsls	r2, r2, #31
 800832c:	d501      	bpl.n	8008332 <_printf_float+0x1ae>
 800832e:	3302      	adds	r3, #2
 8008330:	e7f4      	b.n	800831c <_printf_float+0x198>
 8008332:	2301      	movs	r3, #1
 8008334:	e7f2      	b.n	800831c <_printf_float+0x198>
 8008336:	f04f 0967 	mov.w	r9, #103	; 0x67
 800833a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800833c:	4299      	cmp	r1, r3
 800833e:	db05      	blt.n	800834c <_printf_float+0x1c8>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	6121      	str	r1, [r4, #16]
 8008344:	07d8      	lsls	r0, r3, #31
 8008346:	d5ea      	bpl.n	800831e <_printf_float+0x19a>
 8008348:	1c4b      	adds	r3, r1, #1
 800834a:	e7e7      	b.n	800831c <_printf_float+0x198>
 800834c:	2900      	cmp	r1, #0
 800834e:	bfcc      	ite	gt
 8008350:	2201      	movgt	r2, #1
 8008352:	f1c1 0202 	rsble	r2, r1, #2
 8008356:	4413      	add	r3, r2
 8008358:	e7e0      	b.n	800831c <_printf_float+0x198>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	055a      	lsls	r2, r3, #21
 800835e:	d407      	bmi.n	8008370 <_printf_float+0x1ec>
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	4642      	mov	r2, r8
 8008364:	4631      	mov	r1, r6
 8008366:	4628      	mov	r0, r5
 8008368:	47b8      	blx	r7
 800836a:	3001      	adds	r0, #1
 800836c:	d12b      	bne.n	80083c6 <_printf_float+0x242>
 800836e:	e764      	b.n	800823a <_printf_float+0xb6>
 8008370:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008374:	f240 80dd 	bls.w	8008532 <_printf_float+0x3ae>
 8008378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800837c:	2200      	movs	r2, #0
 800837e:	2300      	movs	r3, #0
 8008380:	f7f8 fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8008384:	2800      	cmp	r0, #0
 8008386:	d033      	beq.n	80083f0 <_printf_float+0x26c>
 8008388:	2301      	movs	r3, #1
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	4a35      	ldr	r2, [pc, #212]	; (8008464 <_printf_float+0x2e0>)
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	f43f af51 	beq.w	800823a <_printf_float+0xb6>
 8008398:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800839c:	429a      	cmp	r2, r3
 800839e:	db02      	blt.n	80083a6 <_printf_float+0x222>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	07d8      	lsls	r0, r3, #31
 80083a4:	d50f      	bpl.n	80083c6 <_printf_float+0x242>
 80083a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b8      	blx	r7
 80083b0:	3001      	adds	r0, #1
 80083b2:	f43f af42 	beq.w	800823a <_printf_float+0xb6>
 80083b6:	f04f 0800 	mov.w	r8, #0
 80083ba:	f104 091a 	add.w	r9, r4, #26
 80083be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083c0:	3b01      	subs	r3, #1
 80083c2:	4543      	cmp	r3, r8
 80083c4:	dc09      	bgt.n	80083da <_printf_float+0x256>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	079b      	lsls	r3, r3, #30
 80083ca:	f100 8104 	bmi.w	80085d6 <_printf_float+0x452>
 80083ce:	68e0      	ldr	r0, [r4, #12]
 80083d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d2:	4298      	cmp	r0, r3
 80083d4:	bfb8      	it	lt
 80083d6:	4618      	movlt	r0, r3
 80083d8:	e731      	b.n	800823e <_printf_float+0xba>
 80083da:	2301      	movs	r3, #1
 80083dc:	464a      	mov	r2, r9
 80083de:	4631      	mov	r1, r6
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b8      	blx	r7
 80083e4:	3001      	adds	r0, #1
 80083e6:	f43f af28 	beq.w	800823a <_printf_float+0xb6>
 80083ea:	f108 0801 	add.w	r8, r8, #1
 80083ee:	e7e6      	b.n	80083be <_printf_float+0x23a>
 80083f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	dc38      	bgt.n	8008468 <_printf_float+0x2e4>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4631      	mov	r1, r6
 80083fa:	4628      	mov	r0, r5
 80083fc:	4a19      	ldr	r2, [pc, #100]	; (8008464 <_printf_float+0x2e0>)
 80083fe:	47b8      	blx	r7
 8008400:	3001      	adds	r0, #1
 8008402:	f43f af1a 	beq.w	800823a <_printf_float+0xb6>
 8008406:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800840a:	4313      	orrs	r3, r2
 800840c:	d102      	bne.n	8008414 <_printf_float+0x290>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	07d9      	lsls	r1, r3, #31
 8008412:	d5d8      	bpl.n	80083c6 <_printf_float+0x242>
 8008414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	f43f af0b 	beq.w	800823a <_printf_float+0xb6>
 8008424:	f04f 0900 	mov.w	r9, #0
 8008428:	f104 0a1a 	add.w	sl, r4, #26
 800842c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800842e:	425b      	negs	r3, r3
 8008430:	454b      	cmp	r3, r9
 8008432:	dc01      	bgt.n	8008438 <_printf_float+0x2b4>
 8008434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008436:	e794      	b.n	8008362 <_printf_float+0x1de>
 8008438:	2301      	movs	r3, #1
 800843a:	4652      	mov	r2, sl
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	f43f aef9 	beq.w	800823a <_printf_float+0xb6>
 8008448:	f109 0901 	add.w	r9, r9, #1
 800844c:	e7ee      	b.n	800842c <_printf_float+0x2a8>
 800844e:	bf00      	nop
 8008450:	7fefffff 	.word	0x7fefffff
 8008454:	0800b364 	.word	0x0800b364
 8008458:	0800b368 	.word	0x0800b368
 800845c:	0800b36c 	.word	0x0800b36c
 8008460:	0800b370 	.word	0x0800b370
 8008464:	0800b374 	.word	0x0800b374
 8008468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800846a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800846c:	429a      	cmp	r2, r3
 800846e:	bfa8      	it	ge
 8008470:	461a      	movge	r2, r3
 8008472:	2a00      	cmp	r2, #0
 8008474:	4691      	mov	r9, r2
 8008476:	dc37      	bgt.n	80084e8 <_printf_float+0x364>
 8008478:	f04f 0b00 	mov.w	fp, #0
 800847c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008480:	f104 021a 	add.w	r2, r4, #26
 8008484:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008488:	ebaa 0309 	sub.w	r3, sl, r9
 800848c:	455b      	cmp	r3, fp
 800848e:	dc33      	bgt.n	80084f8 <_printf_float+0x374>
 8008490:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008494:	429a      	cmp	r2, r3
 8008496:	db3b      	blt.n	8008510 <_printf_float+0x38c>
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	07da      	lsls	r2, r3, #31
 800849c:	d438      	bmi.n	8008510 <_printf_float+0x38c>
 800849e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80084a2:	eba2 0903 	sub.w	r9, r2, r3
 80084a6:	eba2 020a 	sub.w	r2, r2, sl
 80084aa:	4591      	cmp	r9, r2
 80084ac:	bfa8      	it	ge
 80084ae:	4691      	movge	r9, r2
 80084b0:	f1b9 0f00 	cmp.w	r9, #0
 80084b4:	dc34      	bgt.n	8008520 <_printf_float+0x39c>
 80084b6:	f04f 0800 	mov.w	r8, #0
 80084ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084be:	f104 0a1a 	add.w	sl, r4, #26
 80084c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084c6:	1a9b      	subs	r3, r3, r2
 80084c8:	eba3 0309 	sub.w	r3, r3, r9
 80084cc:	4543      	cmp	r3, r8
 80084ce:	f77f af7a 	ble.w	80083c6 <_printf_float+0x242>
 80084d2:	2301      	movs	r3, #1
 80084d4:	4652      	mov	r2, sl
 80084d6:	4631      	mov	r1, r6
 80084d8:	4628      	mov	r0, r5
 80084da:	47b8      	blx	r7
 80084dc:	3001      	adds	r0, #1
 80084de:	f43f aeac 	beq.w	800823a <_printf_float+0xb6>
 80084e2:	f108 0801 	add.w	r8, r8, #1
 80084e6:	e7ec      	b.n	80084c2 <_printf_float+0x33e>
 80084e8:	4613      	mov	r3, r2
 80084ea:	4631      	mov	r1, r6
 80084ec:	4642      	mov	r2, r8
 80084ee:	4628      	mov	r0, r5
 80084f0:	47b8      	blx	r7
 80084f2:	3001      	adds	r0, #1
 80084f4:	d1c0      	bne.n	8008478 <_printf_float+0x2f4>
 80084f6:	e6a0      	b.n	800823a <_printf_float+0xb6>
 80084f8:	2301      	movs	r3, #1
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8008500:	47b8      	blx	r7
 8008502:	3001      	adds	r0, #1
 8008504:	f43f ae99 	beq.w	800823a <_printf_float+0xb6>
 8008508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850a:	f10b 0b01 	add.w	fp, fp, #1
 800850e:	e7b9      	b.n	8008484 <_printf_float+0x300>
 8008510:	4631      	mov	r1, r6
 8008512:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	d1bf      	bne.n	800849e <_printf_float+0x31a>
 800851e:	e68c      	b.n	800823a <_printf_float+0xb6>
 8008520:	464b      	mov	r3, r9
 8008522:	4631      	mov	r1, r6
 8008524:	4628      	mov	r0, r5
 8008526:	eb08 020a 	add.w	r2, r8, sl
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	d1c2      	bne.n	80084b6 <_printf_float+0x332>
 8008530:	e683      	b.n	800823a <_printf_float+0xb6>
 8008532:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008534:	2a01      	cmp	r2, #1
 8008536:	dc01      	bgt.n	800853c <_printf_float+0x3b8>
 8008538:	07db      	lsls	r3, r3, #31
 800853a:	d539      	bpl.n	80085b0 <_printf_float+0x42c>
 800853c:	2301      	movs	r3, #1
 800853e:	4642      	mov	r2, r8
 8008540:	4631      	mov	r1, r6
 8008542:	4628      	mov	r0, r5
 8008544:	47b8      	blx	r7
 8008546:	3001      	adds	r0, #1
 8008548:	f43f ae77 	beq.w	800823a <_printf_float+0xb6>
 800854c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f ae6f 	beq.w	800823a <_printf_float+0xb6>
 800855c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008560:	2200      	movs	r2, #0
 8008562:	2300      	movs	r3, #0
 8008564:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008568:	f7f8 fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800856c:	b9d8      	cbnz	r0, 80085a6 <_printf_float+0x422>
 800856e:	f109 33ff 	add.w	r3, r9, #4294967295
 8008572:	f108 0201 	add.w	r2, r8, #1
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	d10e      	bne.n	800859e <_printf_float+0x41a>
 8008580:	e65b      	b.n	800823a <_printf_float+0xb6>
 8008582:	2301      	movs	r3, #1
 8008584:	464a      	mov	r2, r9
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	f43f ae54 	beq.w	800823a <_printf_float+0xb6>
 8008592:	f108 0801 	add.w	r8, r8, #1
 8008596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008598:	3b01      	subs	r3, #1
 800859a:	4543      	cmp	r3, r8
 800859c:	dcf1      	bgt.n	8008582 <_printf_float+0x3fe>
 800859e:	4653      	mov	r3, sl
 80085a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085a4:	e6de      	b.n	8008364 <_printf_float+0x1e0>
 80085a6:	f04f 0800 	mov.w	r8, #0
 80085aa:	f104 091a 	add.w	r9, r4, #26
 80085ae:	e7f2      	b.n	8008596 <_printf_float+0x412>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4642      	mov	r2, r8
 80085b4:	e7df      	b.n	8008576 <_printf_float+0x3f2>
 80085b6:	2301      	movs	r3, #1
 80085b8:	464a      	mov	r2, r9
 80085ba:	4631      	mov	r1, r6
 80085bc:	4628      	mov	r0, r5
 80085be:	47b8      	blx	r7
 80085c0:	3001      	adds	r0, #1
 80085c2:	f43f ae3a 	beq.w	800823a <_printf_float+0xb6>
 80085c6:	f108 0801 	add.w	r8, r8, #1
 80085ca:	68e3      	ldr	r3, [r4, #12]
 80085cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085ce:	1a5b      	subs	r3, r3, r1
 80085d0:	4543      	cmp	r3, r8
 80085d2:	dcf0      	bgt.n	80085b6 <_printf_float+0x432>
 80085d4:	e6fb      	b.n	80083ce <_printf_float+0x24a>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	f104 0919 	add.w	r9, r4, #25
 80085de:	e7f4      	b.n	80085ca <_printf_float+0x446>

080085e0 <_printf_common>:
 80085e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e4:	4616      	mov	r6, r2
 80085e6:	4699      	mov	r9, r3
 80085e8:	688a      	ldr	r2, [r1, #8]
 80085ea:	690b      	ldr	r3, [r1, #16]
 80085ec:	4607      	mov	r7, r0
 80085ee:	4293      	cmp	r3, r2
 80085f0:	bfb8      	it	lt
 80085f2:	4613      	movlt	r3, r2
 80085f4:	6033      	str	r3, [r6, #0]
 80085f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085fa:	460c      	mov	r4, r1
 80085fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008600:	b10a      	cbz	r2, 8008606 <_printf_common+0x26>
 8008602:	3301      	adds	r3, #1
 8008604:	6033      	str	r3, [r6, #0]
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	0699      	lsls	r1, r3, #26
 800860a:	bf42      	ittt	mi
 800860c:	6833      	ldrmi	r3, [r6, #0]
 800860e:	3302      	addmi	r3, #2
 8008610:	6033      	strmi	r3, [r6, #0]
 8008612:	6825      	ldr	r5, [r4, #0]
 8008614:	f015 0506 	ands.w	r5, r5, #6
 8008618:	d106      	bne.n	8008628 <_printf_common+0x48>
 800861a:	f104 0a19 	add.w	sl, r4, #25
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	6832      	ldr	r2, [r6, #0]
 8008622:	1a9b      	subs	r3, r3, r2
 8008624:	42ab      	cmp	r3, r5
 8008626:	dc2b      	bgt.n	8008680 <_printf_common+0xa0>
 8008628:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800862c:	1e13      	subs	r3, r2, #0
 800862e:	6822      	ldr	r2, [r4, #0]
 8008630:	bf18      	it	ne
 8008632:	2301      	movne	r3, #1
 8008634:	0692      	lsls	r2, r2, #26
 8008636:	d430      	bmi.n	800869a <_printf_common+0xba>
 8008638:	4649      	mov	r1, r9
 800863a:	4638      	mov	r0, r7
 800863c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008640:	47c0      	blx	r8
 8008642:	3001      	adds	r0, #1
 8008644:	d023      	beq.n	800868e <_printf_common+0xae>
 8008646:	6823      	ldr	r3, [r4, #0]
 8008648:	6922      	ldr	r2, [r4, #16]
 800864a:	f003 0306 	and.w	r3, r3, #6
 800864e:	2b04      	cmp	r3, #4
 8008650:	bf14      	ite	ne
 8008652:	2500      	movne	r5, #0
 8008654:	6833      	ldreq	r3, [r6, #0]
 8008656:	f04f 0600 	mov.w	r6, #0
 800865a:	bf08      	it	eq
 800865c:	68e5      	ldreq	r5, [r4, #12]
 800865e:	f104 041a 	add.w	r4, r4, #26
 8008662:	bf08      	it	eq
 8008664:	1aed      	subeq	r5, r5, r3
 8008666:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800866a:	bf08      	it	eq
 800866c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008670:	4293      	cmp	r3, r2
 8008672:	bfc4      	itt	gt
 8008674:	1a9b      	subgt	r3, r3, r2
 8008676:	18ed      	addgt	r5, r5, r3
 8008678:	42b5      	cmp	r5, r6
 800867a:	d11a      	bne.n	80086b2 <_printf_common+0xd2>
 800867c:	2000      	movs	r0, #0
 800867e:	e008      	b.n	8008692 <_printf_common+0xb2>
 8008680:	2301      	movs	r3, #1
 8008682:	4652      	mov	r2, sl
 8008684:	4649      	mov	r1, r9
 8008686:	4638      	mov	r0, r7
 8008688:	47c0      	blx	r8
 800868a:	3001      	adds	r0, #1
 800868c:	d103      	bne.n	8008696 <_printf_common+0xb6>
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
 8008692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008696:	3501      	adds	r5, #1
 8008698:	e7c1      	b.n	800861e <_printf_common+0x3e>
 800869a:	2030      	movs	r0, #48	; 0x30
 800869c:	18e1      	adds	r1, r4, r3
 800869e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086a2:	1c5a      	adds	r2, r3, #1
 80086a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086a8:	4422      	add	r2, r4
 80086aa:	3302      	adds	r3, #2
 80086ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086b0:	e7c2      	b.n	8008638 <_printf_common+0x58>
 80086b2:	2301      	movs	r3, #1
 80086b4:	4622      	mov	r2, r4
 80086b6:	4649      	mov	r1, r9
 80086b8:	4638      	mov	r0, r7
 80086ba:	47c0      	blx	r8
 80086bc:	3001      	adds	r0, #1
 80086be:	d0e6      	beq.n	800868e <_printf_common+0xae>
 80086c0:	3601      	adds	r6, #1
 80086c2:	e7d9      	b.n	8008678 <_printf_common+0x98>

080086c4 <_printf_i>:
 80086c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	7e0f      	ldrb	r7, [r1, #24]
 80086ca:	4691      	mov	r9, r2
 80086cc:	2f78      	cmp	r7, #120	; 0x78
 80086ce:	4680      	mov	r8, r0
 80086d0:	460c      	mov	r4, r1
 80086d2:	469a      	mov	sl, r3
 80086d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086da:	d807      	bhi.n	80086ec <_printf_i+0x28>
 80086dc:	2f62      	cmp	r7, #98	; 0x62
 80086de:	d80a      	bhi.n	80086f6 <_printf_i+0x32>
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	f000 80d5 	beq.w	8008890 <_printf_i+0x1cc>
 80086e6:	2f58      	cmp	r7, #88	; 0x58
 80086e8:	f000 80c1 	beq.w	800886e <_printf_i+0x1aa>
 80086ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086f4:	e03a      	b.n	800876c <_printf_i+0xa8>
 80086f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086fa:	2b15      	cmp	r3, #21
 80086fc:	d8f6      	bhi.n	80086ec <_printf_i+0x28>
 80086fe:	a101      	add	r1, pc, #4	; (adr r1, 8008704 <_printf_i+0x40>)
 8008700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008704:	0800875d 	.word	0x0800875d
 8008708:	08008771 	.word	0x08008771
 800870c:	080086ed 	.word	0x080086ed
 8008710:	080086ed 	.word	0x080086ed
 8008714:	080086ed 	.word	0x080086ed
 8008718:	080086ed 	.word	0x080086ed
 800871c:	08008771 	.word	0x08008771
 8008720:	080086ed 	.word	0x080086ed
 8008724:	080086ed 	.word	0x080086ed
 8008728:	080086ed 	.word	0x080086ed
 800872c:	080086ed 	.word	0x080086ed
 8008730:	08008877 	.word	0x08008877
 8008734:	0800879d 	.word	0x0800879d
 8008738:	08008831 	.word	0x08008831
 800873c:	080086ed 	.word	0x080086ed
 8008740:	080086ed 	.word	0x080086ed
 8008744:	08008899 	.word	0x08008899
 8008748:	080086ed 	.word	0x080086ed
 800874c:	0800879d 	.word	0x0800879d
 8008750:	080086ed 	.word	0x080086ed
 8008754:	080086ed 	.word	0x080086ed
 8008758:	08008839 	.word	0x08008839
 800875c:	682b      	ldr	r3, [r5, #0]
 800875e:	1d1a      	adds	r2, r3, #4
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	602a      	str	r2, [r5, #0]
 8008764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008768:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800876c:	2301      	movs	r3, #1
 800876e:	e0a0      	b.n	80088b2 <_printf_i+0x1ee>
 8008770:	6820      	ldr	r0, [r4, #0]
 8008772:	682b      	ldr	r3, [r5, #0]
 8008774:	0607      	lsls	r7, r0, #24
 8008776:	f103 0104 	add.w	r1, r3, #4
 800877a:	6029      	str	r1, [r5, #0]
 800877c:	d501      	bpl.n	8008782 <_printf_i+0xbe>
 800877e:	681e      	ldr	r6, [r3, #0]
 8008780:	e003      	b.n	800878a <_printf_i+0xc6>
 8008782:	0646      	lsls	r6, r0, #25
 8008784:	d5fb      	bpl.n	800877e <_printf_i+0xba>
 8008786:	f9b3 6000 	ldrsh.w	r6, [r3]
 800878a:	2e00      	cmp	r6, #0
 800878c:	da03      	bge.n	8008796 <_printf_i+0xd2>
 800878e:	232d      	movs	r3, #45	; 0x2d
 8008790:	4276      	negs	r6, r6
 8008792:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008796:	230a      	movs	r3, #10
 8008798:	4859      	ldr	r0, [pc, #356]	; (8008900 <_printf_i+0x23c>)
 800879a:	e012      	b.n	80087c2 <_printf_i+0xfe>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	1d19      	adds	r1, r3, #4
 80087a2:	6029      	str	r1, [r5, #0]
 80087a4:	0605      	lsls	r5, r0, #24
 80087a6:	d501      	bpl.n	80087ac <_printf_i+0xe8>
 80087a8:	681e      	ldr	r6, [r3, #0]
 80087aa:	e002      	b.n	80087b2 <_printf_i+0xee>
 80087ac:	0641      	lsls	r1, r0, #25
 80087ae:	d5fb      	bpl.n	80087a8 <_printf_i+0xe4>
 80087b0:	881e      	ldrh	r6, [r3, #0]
 80087b2:	2f6f      	cmp	r7, #111	; 0x6f
 80087b4:	bf0c      	ite	eq
 80087b6:	2308      	moveq	r3, #8
 80087b8:	230a      	movne	r3, #10
 80087ba:	4851      	ldr	r0, [pc, #324]	; (8008900 <_printf_i+0x23c>)
 80087bc:	2100      	movs	r1, #0
 80087be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087c2:	6865      	ldr	r5, [r4, #4]
 80087c4:	2d00      	cmp	r5, #0
 80087c6:	bfa8      	it	ge
 80087c8:	6821      	ldrge	r1, [r4, #0]
 80087ca:	60a5      	str	r5, [r4, #8]
 80087cc:	bfa4      	itt	ge
 80087ce:	f021 0104 	bicge.w	r1, r1, #4
 80087d2:	6021      	strge	r1, [r4, #0]
 80087d4:	b90e      	cbnz	r6, 80087da <_printf_i+0x116>
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	d04b      	beq.n	8008872 <_printf_i+0x1ae>
 80087da:	4615      	mov	r5, r2
 80087dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80087e0:	fb03 6711 	mls	r7, r3, r1, r6
 80087e4:	5dc7      	ldrb	r7, [r0, r7]
 80087e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087ea:	4637      	mov	r7, r6
 80087ec:	42bb      	cmp	r3, r7
 80087ee:	460e      	mov	r6, r1
 80087f0:	d9f4      	bls.n	80087dc <_printf_i+0x118>
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d10b      	bne.n	800880e <_printf_i+0x14a>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	07de      	lsls	r6, r3, #31
 80087fa:	d508      	bpl.n	800880e <_printf_i+0x14a>
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	6861      	ldr	r1, [r4, #4]
 8008800:	4299      	cmp	r1, r3
 8008802:	bfde      	ittt	le
 8008804:	2330      	movle	r3, #48	; 0x30
 8008806:	f805 3c01 	strble.w	r3, [r5, #-1]
 800880a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800880e:	1b52      	subs	r2, r2, r5
 8008810:	6122      	str	r2, [r4, #16]
 8008812:	464b      	mov	r3, r9
 8008814:	4621      	mov	r1, r4
 8008816:	4640      	mov	r0, r8
 8008818:	f8cd a000 	str.w	sl, [sp]
 800881c:	aa03      	add	r2, sp, #12
 800881e:	f7ff fedf 	bl	80085e0 <_printf_common>
 8008822:	3001      	adds	r0, #1
 8008824:	d14a      	bne.n	80088bc <_printf_i+0x1f8>
 8008826:	f04f 30ff 	mov.w	r0, #4294967295
 800882a:	b004      	add	sp, #16
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	f043 0320 	orr.w	r3, r3, #32
 8008836:	6023      	str	r3, [r4, #0]
 8008838:	2778      	movs	r7, #120	; 0x78
 800883a:	4832      	ldr	r0, [pc, #200]	; (8008904 <_printf_i+0x240>)
 800883c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	6829      	ldr	r1, [r5, #0]
 8008844:	061f      	lsls	r7, r3, #24
 8008846:	f851 6b04 	ldr.w	r6, [r1], #4
 800884a:	d402      	bmi.n	8008852 <_printf_i+0x18e>
 800884c:	065f      	lsls	r7, r3, #25
 800884e:	bf48      	it	mi
 8008850:	b2b6      	uxthmi	r6, r6
 8008852:	07df      	lsls	r7, r3, #31
 8008854:	bf48      	it	mi
 8008856:	f043 0320 	orrmi.w	r3, r3, #32
 800885a:	6029      	str	r1, [r5, #0]
 800885c:	bf48      	it	mi
 800885e:	6023      	strmi	r3, [r4, #0]
 8008860:	b91e      	cbnz	r6, 800886a <_printf_i+0x1a6>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f023 0320 	bic.w	r3, r3, #32
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2310      	movs	r3, #16
 800886c:	e7a6      	b.n	80087bc <_printf_i+0xf8>
 800886e:	4824      	ldr	r0, [pc, #144]	; (8008900 <_printf_i+0x23c>)
 8008870:	e7e4      	b.n	800883c <_printf_i+0x178>
 8008872:	4615      	mov	r5, r2
 8008874:	e7bd      	b.n	80087f2 <_printf_i+0x12e>
 8008876:	682b      	ldr	r3, [r5, #0]
 8008878:	6826      	ldr	r6, [r4, #0]
 800887a:	1d18      	adds	r0, r3, #4
 800887c:	6961      	ldr	r1, [r4, #20]
 800887e:	6028      	str	r0, [r5, #0]
 8008880:	0635      	lsls	r5, r6, #24
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	d501      	bpl.n	800888a <_printf_i+0x1c6>
 8008886:	6019      	str	r1, [r3, #0]
 8008888:	e002      	b.n	8008890 <_printf_i+0x1cc>
 800888a:	0670      	lsls	r0, r6, #25
 800888c:	d5fb      	bpl.n	8008886 <_printf_i+0x1c2>
 800888e:	8019      	strh	r1, [r3, #0]
 8008890:	2300      	movs	r3, #0
 8008892:	4615      	mov	r5, r2
 8008894:	6123      	str	r3, [r4, #16]
 8008896:	e7bc      	b.n	8008812 <_printf_i+0x14e>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	2100      	movs	r1, #0
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	602a      	str	r2, [r5, #0]
 80088a0:	681d      	ldr	r5, [r3, #0]
 80088a2:	6862      	ldr	r2, [r4, #4]
 80088a4:	4628      	mov	r0, r5
 80088a6:	f000 fa0d 	bl	8008cc4 <memchr>
 80088aa:	b108      	cbz	r0, 80088b0 <_printf_i+0x1ec>
 80088ac:	1b40      	subs	r0, r0, r5
 80088ae:	6060      	str	r0, [r4, #4]
 80088b0:	6863      	ldr	r3, [r4, #4]
 80088b2:	6123      	str	r3, [r4, #16]
 80088b4:	2300      	movs	r3, #0
 80088b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ba:	e7aa      	b.n	8008812 <_printf_i+0x14e>
 80088bc:	462a      	mov	r2, r5
 80088be:	4649      	mov	r1, r9
 80088c0:	4640      	mov	r0, r8
 80088c2:	6923      	ldr	r3, [r4, #16]
 80088c4:	47d0      	blx	sl
 80088c6:	3001      	adds	r0, #1
 80088c8:	d0ad      	beq.n	8008826 <_printf_i+0x162>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	079b      	lsls	r3, r3, #30
 80088ce:	d413      	bmi.n	80088f8 <_printf_i+0x234>
 80088d0:	68e0      	ldr	r0, [r4, #12]
 80088d2:	9b03      	ldr	r3, [sp, #12]
 80088d4:	4298      	cmp	r0, r3
 80088d6:	bfb8      	it	lt
 80088d8:	4618      	movlt	r0, r3
 80088da:	e7a6      	b.n	800882a <_printf_i+0x166>
 80088dc:	2301      	movs	r3, #1
 80088de:	4632      	mov	r2, r6
 80088e0:	4649      	mov	r1, r9
 80088e2:	4640      	mov	r0, r8
 80088e4:	47d0      	blx	sl
 80088e6:	3001      	adds	r0, #1
 80088e8:	d09d      	beq.n	8008826 <_printf_i+0x162>
 80088ea:	3501      	adds	r5, #1
 80088ec:	68e3      	ldr	r3, [r4, #12]
 80088ee:	9903      	ldr	r1, [sp, #12]
 80088f0:	1a5b      	subs	r3, r3, r1
 80088f2:	42ab      	cmp	r3, r5
 80088f4:	dcf2      	bgt.n	80088dc <_printf_i+0x218>
 80088f6:	e7eb      	b.n	80088d0 <_printf_i+0x20c>
 80088f8:	2500      	movs	r5, #0
 80088fa:	f104 0619 	add.w	r6, r4, #25
 80088fe:	e7f5      	b.n	80088ec <_printf_i+0x228>
 8008900:	0800b376 	.word	0x0800b376
 8008904:	0800b387 	.word	0x0800b387

08008908 <std>:
 8008908:	2300      	movs	r3, #0
 800890a:	b510      	push	{r4, lr}
 800890c:	4604      	mov	r4, r0
 800890e:	e9c0 3300 	strd	r3, r3, [r0]
 8008912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008916:	6083      	str	r3, [r0, #8]
 8008918:	8181      	strh	r1, [r0, #12]
 800891a:	6643      	str	r3, [r0, #100]	; 0x64
 800891c:	81c2      	strh	r2, [r0, #14]
 800891e:	6183      	str	r3, [r0, #24]
 8008920:	4619      	mov	r1, r3
 8008922:	2208      	movs	r2, #8
 8008924:	305c      	adds	r0, #92	; 0x5c
 8008926:	f000 f93b 	bl	8008ba0 <memset>
 800892a:	4b05      	ldr	r3, [pc, #20]	; (8008940 <std+0x38>)
 800892c:	6224      	str	r4, [r4, #32]
 800892e:	6263      	str	r3, [r4, #36]	; 0x24
 8008930:	4b04      	ldr	r3, [pc, #16]	; (8008944 <std+0x3c>)
 8008932:	62a3      	str	r3, [r4, #40]	; 0x28
 8008934:	4b04      	ldr	r3, [pc, #16]	; (8008948 <std+0x40>)
 8008936:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008938:	4b04      	ldr	r3, [pc, #16]	; (800894c <std+0x44>)
 800893a:	6323      	str	r3, [r4, #48]	; 0x30
 800893c:	bd10      	pop	{r4, pc}
 800893e:	bf00      	nop
 8008940:	08008aa9 	.word	0x08008aa9
 8008944:	08008acb 	.word	0x08008acb
 8008948:	08008b03 	.word	0x08008b03
 800894c:	08008b27 	.word	0x08008b27

08008950 <stdio_exit_handler>:
 8008950:	4a02      	ldr	r2, [pc, #8]	; (800895c <stdio_exit_handler+0xc>)
 8008952:	4903      	ldr	r1, [pc, #12]	; (8008960 <stdio_exit_handler+0x10>)
 8008954:	4803      	ldr	r0, [pc, #12]	; (8008964 <stdio_exit_handler+0x14>)
 8008956:	f000 b869 	b.w	8008a2c <_fwalk_sglue>
 800895a:	bf00      	nop
 800895c:	20000024 	.word	0x20000024
 8008960:	0800a65d 	.word	0x0800a65d
 8008964:	20000030 	.word	0x20000030

08008968 <cleanup_stdio>:
 8008968:	6841      	ldr	r1, [r0, #4]
 800896a:	4b0c      	ldr	r3, [pc, #48]	; (800899c <cleanup_stdio+0x34>)
 800896c:	b510      	push	{r4, lr}
 800896e:	4299      	cmp	r1, r3
 8008970:	4604      	mov	r4, r0
 8008972:	d001      	beq.n	8008978 <cleanup_stdio+0x10>
 8008974:	f001 fe72 	bl	800a65c <_fflush_r>
 8008978:	68a1      	ldr	r1, [r4, #8]
 800897a:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <cleanup_stdio+0x38>)
 800897c:	4299      	cmp	r1, r3
 800897e:	d002      	beq.n	8008986 <cleanup_stdio+0x1e>
 8008980:	4620      	mov	r0, r4
 8008982:	f001 fe6b 	bl	800a65c <_fflush_r>
 8008986:	68e1      	ldr	r1, [r4, #12]
 8008988:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <cleanup_stdio+0x3c>)
 800898a:	4299      	cmp	r1, r3
 800898c:	d004      	beq.n	8008998 <cleanup_stdio+0x30>
 800898e:	4620      	mov	r0, r4
 8008990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008994:	f001 be62 	b.w	800a65c <_fflush_r>
 8008998:	bd10      	pop	{r4, pc}
 800899a:	bf00      	nop
 800899c:	200004a4 	.word	0x200004a4
 80089a0:	2000050c 	.word	0x2000050c
 80089a4:	20000574 	.word	0x20000574

080089a8 <global_stdio_init.part.0>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <global_stdio_init.part.0+0x30>)
 80089ac:	4c0b      	ldr	r4, [pc, #44]	; (80089dc <global_stdio_init.part.0+0x34>)
 80089ae:	4a0c      	ldr	r2, [pc, #48]	; (80089e0 <global_stdio_init.part.0+0x38>)
 80089b0:	4620      	mov	r0, r4
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	2104      	movs	r1, #4
 80089b6:	2200      	movs	r2, #0
 80089b8:	f7ff ffa6 	bl	8008908 <std>
 80089bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80089c0:	2201      	movs	r2, #1
 80089c2:	2109      	movs	r1, #9
 80089c4:	f7ff ffa0 	bl	8008908 <std>
 80089c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80089cc:	2202      	movs	r2, #2
 80089ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d2:	2112      	movs	r1, #18
 80089d4:	f7ff bf98 	b.w	8008908 <std>
 80089d8:	200005dc 	.word	0x200005dc
 80089dc:	200004a4 	.word	0x200004a4
 80089e0:	08008951 	.word	0x08008951

080089e4 <__sfp_lock_acquire>:
 80089e4:	4801      	ldr	r0, [pc, #4]	; (80089ec <__sfp_lock_acquire+0x8>)
 80089e6:	f000 b96b 	b.w	8008cc0 <__retarget_lock_acquire_recursive>
 80089ea:	bf00      	nop
 80089ec:	200005e5 	.word	0x200005e5

080089f0 <__sfp_lock_release>:
 80089f0:	4801      	ldr	r0, [pc, #4]	; (80089f8 <__sfp_lock_release+0x8>)
 80089f2:	f000 b966 	b.w	8008cc2 <__retarget_lock_release_recursive>
 80089f6:	bf00      	nop
 80089f8:	200005e5 	.word	0x200005e5

080089fc <__sinit>:
 80089fc:	b510      	push	{r4, lr}
 80089fe:	4604      	mov	r4, r0
 8008a00:	f7ff fff0 	bl	80089e4 <__sfp_lock_acquire>
 8008a04:	6a23      	ldr	r3, [r4, #32]
 8008a06:	b11b      	cbz	r3, 8008a10 <__sinit+0x14>
 8008a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a0c:	f7ff bff0 	b.w	80089f0 <__sfp_lock_release>
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <__sinit+0x28>)
 8008a12:	6223      	str	r3, [r4, #32]
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <__sinit+0x2c>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f5      	bne.n	8008a08 <__sinit+0xc>
 8008a1c:	f7ff ffc4 	bl	80089a8 <global_stdio_init.part.0>
 8008a20:	e7f2      	b.n	8008a08 <__sinit+0xc>
 8008a22:	bf00      	nop
 8008a24:	08008969 	.word	0x08008969
 8008a28:	200005dc 	.word	0x200005dc

08008a2c <_fwalk_sglue>:
 8008a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a30:	4607      	mov	r7, r0
 8008a32:	4688      	mov	r8, r1
 8008a34:	4614      	mov	r4, r2
 8008a36:	2600      	movs	r6, #0
 8008a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a40:	d505      	bpl.n	8008a4e <_fwalk_sglue+0x22>
 8008a42:	6824      	ldr	r4, [r4, #0]
 8008a44:	2c00      	cmp	r4, #0
 8008a46:	d1f7      	bne.n	8008a38 <_fwalk_sglue+0xc>
 8008a48:	4630      	mov	r0, r6
 8008a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d907      	bls.n	8008a64 <_fwalk_sglue+0x38>
 8008a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	d003      	beq.n	8008a64 <_fwalk_sglue+0x38>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4638      	mov	r0, r7
 8008a60:	47c0      	blx	r8
 8008a62:	4306      	orrs	r6, r0
 8008a64:	3568      	adds	r5, #104	; 0x68
 8008a66:	e7e9      	b.n	8008a3c <_fwalk_sglue+0x10>

08008a68 <siprintf>:
 8008a68:	b40e      	push	{r1, r2, r3}
 8008a6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a6e:	b500      	push	{lr}
 8008a70:	b09c      	sub	sp, #112	; 0x70
 8008a72:	ab1d      	add	r3, sp, #116	; 0x74
 8008a74:	9002      	str	r0, [sp, #8]
 8008a76:	9006      	str	r0, [sp, #24]
 8008a78:	9107      	str	r1, [sp, #28]
 8008a7a:	9104      	str	r1, [sp, #16]
 8008a7c:	4808      	ldr	r0, [pc, #32]	; (8008aa0 <siprintf+0x38>)
 8008a7e:	4909      	ldr	r1, [pc, #36]	; (8008aa4 <siprintf+0x3c>)
 8008a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a84:	9105      	str	r1, [sp, #20]
 8008a86:	6800      	ldr	r0, [r0, #0]
 8008a88:	a902      	add	r1, sp, #8
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	f001 fc66 	bl	800a35c <_svfiprintf_r>
 8008a90:	2200      	movs	r2, #0
 8008a92:	9b02      	ldr	r3, [sp, #8]
 8008a94:	701a      	strb	r2, [r3, #0]
 8008a96:	b01c      	add	sp, #112	; 0x70
 8008a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a9c:	b003      	add	sp, #12
 8008a9e:	4770      	bx	lr
 8008aa0:	2000007c 	.word	0x2000007c
 8008aa4:	ffff0208 	.word	0xffff0208

08008aa8 <__sread>:
 8008aa8:	b510      	push	{r4, lr}
 8008aaa:	460c      	mov	r4, r1
 8008aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab0:	f000 f8b8 	bl	8008c24 <_read_r>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	bfab      	itete	ge
 8008ab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008aba:	89a3      	ldrhlt	r3, [r4, #12]
 8008abc:	181b      	addge	r3, r3, r0
 8008abe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ac2:	bfac      	ite	ge
 8008ac4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ac6:	81a3      	strhlt	r3, [r4, #12]
 8008ac8:	bd10      	pop	{r4, pc}

08008aca <__swrite>:
 8008aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ace:	461f      	mov	r7, r3
 8008ad0:	898b      	ldrh	r3, [r1, #12]
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	05db      	lsls	r3, r3, #23
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	4616      	mov	r6, r2
 8008ada:	d505      	bpl.n	8008ae8 <__swrite+0x1e>
 8008adc:	2302      	movs	r3, #2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae4:	f000 f88c 	bl	8008c00 <_lseek_r>
 8008ae8:	89a3      	ldrh	r3, [r4, #12]
 8008aea:	4632      	mov	r2, r6
 8008aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008af0:	81a3      	strh	r3, [r4, #12]
 8008af2:	4628      	mov	r0, r5
 8008af4:	463b      	mov	r3, r7
 8008af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008afe:	f000 b8a3 	b.w	8008c48 <_write_r>

08008b02 <__sseek>:
 8008b02:	b510      	push	{r4, lr}
 8008b04:	460c      	mov	r4, r1
 8008b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b0a:	f000 f879 	bl	8008c00 <_lseek_r>
 8008b0e:	1c43      	adds	r3, r0, #1
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	bf15      	itete	ne
 8008b14:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b1e:	81a3      	strheq	r3, [r4, #12]
 8008b20:	bf18      	it	ne
 8008b22:	81a3      	strhne	r3, [r4, #12]
 8008b24:	bd10      	pop	{r4, pc}

08008b26 <__sclose>:
 8008b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2a:	f000 b859 	b.w	8008be0 <_close_r>

08008b2e <_vsniprintf_r>:
 8008b2e:	b530      	push	{r4, r5, lr}
 8008b30:	4614      	mov	r4, r2
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	4605      	mov	r5, r0
 8008b36:	461a      	mov	r2, r3
 8008b38:	b09b      	sub	sp, #108	; 0x6c
 8008b3a:	da05      	bge.n	8008b48 <_vsniprintf_r+0x1a>
 8008b3c:	238b      	movs	r3, #139	; 0x8b
 8008b3e:	6003      	str	r3, [r0, #0]
 8008b40:	f04f 30ff 	mov.w	r0, #4294967295
 8008b44:	b01b      	add	sp, #108	; 0x6c
 8008b46:	bd30      	pop	{r4, r5, pc}
 8008b48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b4c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008b50:	bf0c      	ite	eq
 8008b52:	4623      	moveq	r3, r4
 8008b54:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b58:	9302      	str	r3, [sp, #8]
 8008b5a:	9305      	str	r3, [sp, #20]
 8008b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b60:	9100      	str	r1, [sp, #0]
 8008b62:	9104      	str	r1, [sp, #16]
 8008b64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008b68:	4669      	mov	r1, sp
 8008b6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008b6c:	f001 fbf6 	bl	800a35c <_svfiprintf_r>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	bfbc      	itt	lt
 8008b74:	238b      	movlt	r3, #139	; 0x8b
 8008b76:	602b      	strlt	r3, [r5, #0]
 8008b78:	2c00      	cmp	r4, #0
 8008b7a:	d0e3      	beq.n	8008b44 <_vsniprintf_r+0x16>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	9b00      	ldr	r3, [sp, #0]
 8008b80:	701a      	strb	r2, [r3, #0]
 8008b82:	e7df      	b.n	8008b44 <_vsniprintf_r+0x16>

08008b84 <vsniprintf>:
 8008b84:	b507      	push	{r0, r1, r2, lr}
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	4803      	ldr	r0, [pc, #12]	; (8008b9c <vsniprintf+0x18>)
 8008b90:	6800      	ldr	r0, [r0, #0]
 8008b92:	f7ff ffcc 	bl	8008b2e <_vsniprintf_r>
 8008b96:	b003      	add	sp, #12
 8008b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b9c:	2000007c 	.word	0x2000007c

08008ba0 <memset>:
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4402      	add	r2, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <strncpy>:
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	b510      	push	{r4, lr}
 8008bb4:	3901      	subs	r1, #1
 8008bb6:	b132      	cbz	r2, 8008bc6 <strncpy+0x16>
 8008bb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008bbc:	3a01      	subs	r2, #1
 8008bbe:	f803 4b01 	strb.w	r4, [r3], #1
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	d1f7      	bne.n	8008bb6 <strncpy+0x6>
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	441a      	add	r2, r3
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d100      	bne.n	8008bd0 <strncpy+0x20>
 8008bce:	bd10      	pop	{r4, pc}
 8008bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd4:	e7f9      	b.n	8008bca <strncpy+0x1a>
	...

08008bd8 <_localeconv_r>:
 8008bd8:	4800      	ldr	r0, [pc, #0]	; (8008bdc <_localeconv_r+0x4>)
 8008bda:	4770      	bx	lr
 8008bdc:	20000170 	.word	0x20000170

08008be0 <_close_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	2300      	movs	r3, #0
 8008be4:	4d05      	ldr	r5, [pc, #20]	; (8008bfc <_close_r+0x1c>)
 8008be6:	4604      	mov	r4, r0
 8008be8:	4608      	mov	r0, r1
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	f7f8 fcdb 	bl	80015a6 <_close>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_close_r+0x1a>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_close_r+0x1a>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	200005e0 	.word	0x200005e0

08008c00 <_lseek_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4d05      	ldr	r5, [pc, #20]	; (8008c20 <_lseek_r+0x20>)
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f7f8 fced 	bl	80015ee <_lseek>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_lseek_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_lseek_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	200005e0 	.word	0x200005e0

08008c24 <_read_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4d05      	ldr	r5, [pc, #20]	; (8008c44 <_read_r+0x20>)
 8008c30:	602a      	str	r2, [r5, #0]
 8008c32:	461a      	mov	r2, r3
 8008c34:	f7f8 fc7e 	bl	8001534 <_read>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_read_r+0x1e>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_read_r+0x1e>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	200005e0 	.word	0x200005e0

08008c48 <_write_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	2200      	movs	r2, #0
 8008c52:	4d05      	ldr	r5, [pc, #20]	; (8008c68 <_write_r+0x20>)
 8008c54:	602a      	str	r2, [r5, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f7f8 fc89 	bl	800156e <_write>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_write_r+0x1e>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_write_r+0x1e>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	200005e0 	.word	0x200005e0

08008c6c <__errno>:
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <__errno+0x8>)
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	2000007c 	.word	0x2000007c

08008c78 <__libc_init_array>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	4d0c      	ldr	r5, [pc, #48]	; (8008cb0 <__libc_init_array+0x38>)
 8008c7e:	4c0d      	ldr	r4, [pc, #52]	; (8008cb4 <__libc_init_array+0x3c>)
 8008c80:	1b64      	subs	r4, r4, r5
 8008c82:	10a4      	asrs	r4, r4, #2
 8008c84:	42a6      	cmp	r6, r4
 8008c86:	d109      	bne.n	8008c9c <__libc_init_array+0x24>
 8008c88:	f002 fa74 	bl	800b174 <_init>
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	4d0a      	ldr	r5, [pc, #40]	; (8008cb8 <__libc_init_array+0x40>)
 8008c90:	4c0a      	ldr	r4, [pc, #40]	; (8008cbc <__libc_init_array+0x44>)
 8008c92:	1b64      	subs	r4, r4, r5
 8008c94:	10a4      	asrs	r4, r4, #2
 8008c96:	42a6      	cmp	r6, r4
 8008c98:	d105      	bne.n	8008ca6 <__libc_init_array+0x2e>
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca0:	4798      	blx	r3
 8008ca2:	3601      	adds	r6, #1
 8008ca4:	e7ee      	b.n	8008c84 <__libc_init_array+0xc>
 8008ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008caa:	4798      	blx	r3
 8008cac:	3601      	adds	r6, #1
 8008cae:	e7f2      	b.n	8008c96 <__libc_init_array+0x1e>
 8008cb0:	0800b6d4 	.word	0x0800b6d4
 8008cb4:	0800b6d4 	.word	0x0800b6d4
 8008cb8:	0800b6d4 	.word	0x0800b6d4
 8008cbc:	0800b6d8 	.word	0x0800b6d8

08008cc0 <__retarget_lock_acquire_recursive>:
 8008cc0:	4770      	bx	lr

08008cc2 <__retarget_lock_release_recursive>:
 8008cc2:	4770      	bx	lr

08008cc4 <memchr>:
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	b510      	push	{r4, lr}
 8008cc8:	b2c9      	uxtb	r1, r1
 8008cca:	4402      	add	r2, r0
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	d101      	bne.n	8008cd6 <memchr+0x12>
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e003      	b.n	8008cde <memchr+0x1a>
 8008cd6:	7804      	ldrb	r4, [r0, #0]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	428c      	cmp	r4, r1
 8008cdc:	d1f6      	bne.n	8008ccc <memchr+0x8>
 8008cde:	bd10      	pop	{r4, pc}

08008ce0 <quorem>:
 8008ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	6903      	ldr	r3, [r0, #16]
 8008ce6:	690c      	ldr	r4, [r1, #16]
 8008ce8:	4607      	mov	r7, r0
 8008cea:	42a3      	cmp	r3, r4
 8008cec:	db7f      	blt.n	8008dee <quorem+0x10e>
 8008cee:	3c01      	subs	r4, #1
 8008cf0:	f100 0514 	add.w	r5, r0, #20
 8008cf4:	f101 0814 	add.w	r8, r1, #20
 8008cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d06:	3301      	adds	r3, #1
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d0e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d16:	d331      	bcc.n	8008d7c <quorem+0x9c>
 8008d18:	f04f 0e00 	mov.w	lr, #0
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	46ac      	mov	ip, r5
 8008d20:	46f2      	mov	sl, lr
 8008d22:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d26:	b293      	uxth	r3, r2
 8008d28:	fb06 e303 	mla	r3, r6, r3, lr
 8008d2c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d30:	0c1a      	lsrs	r2, r3, #16
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	fb06 220e 	mla	r2, r6, lr, r2
 8008d38:	ebaa 0303 	sub.w	r3, sl, r3
 8008d3c:	f8dc a000 	ldr.w	sl, [ip]
 8008d40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d44:	fa1f fa8a 	uxth.w	sl, sl
 8008d48:	4453      	add	r3, sl
 8008d4a:	f8dc a000 	ldr.w	sl, [ip]
 8008d4e:	b292      	uxth	r2, r2
 8008d50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d5e:	4581      	cmp	r9, r0
 8008d60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d64:	f84c 3b04 	str.w	r3, [ip], #4
 8008d68:	d2db      	bcs.n	8008d22 <quorem+0x42>
 8008d6a:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d6e:	b92b      	cbnz	r3, 8008d7c <quorem+0x9c>
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	3b04      	subs	r3, #4
 8008d74:	429d      	cmp	r5, r3
 8008d76:	461a      	mov	r2, r3
 8008d78:	d32d      	bcc.n	8008dd6 <quorem+0xf6>
 8008d7a:	613c      	str	r4, [r7, #16]
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f001 f995 	bl	800a0ac <__mcmp>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	db23      	blt.n	8008dce <quorem+0xee>
 8008d86:	4629      	mov	r1, r5
 8008d88:	2000      	movs	r0, #0
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d90:	f8d1 c000 	ldr.w	ip, [r1]
 8008d94:	b293      	uxth	r3, r2
 8008d96:	1ac3      	subs	r3, r0, r3
 8008d98:	0c12      	lsrs	r2, r2, #16
 8008d9a:	fa1f f08c 	uxth.w	r0, ip
 8008d9e:	4403      	add	r3, r0
 8008da0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dae:	45c1      	cmp	r9, r8
 8008db0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008db4:	f841 3b04 	str.w	r3, [r1], #4
 8008db8:	d2e8      	bcs.n	8008d8c <quorem+0xac>
 8008dba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dc2:	b922      	cbnz	r2, 8008dce <quorem+0xee>
 8008dc4:	3b04      	subs	r3, #4
 8008dc6:	429d      	cmp	r5, r3
 8008dc8:	461a      	mov	r2, r3
 8008dca:	d30a      	bcc.n	8008de2 <quorem+0x102>
 8008dcc:	613c      	str	r4, [r7, #16]
 8008dce:	4630      	mov	r0, r6
 8008dd0:	b003      	add	sp, #12
 8008dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd6:	6812      	ldr	r2, [r2, #0]
 8008dd8:	3b04      	subs	r3, #4
 8008dda:	2a00      	cmp	r2, #0
 8008ddc:	d1cd      	bne.n	8008d7a <quorem+0x9a>
 8008dde:	3c01      	subs	r4, #1
 8008de0:	e7c8      	b.n	8008d74 <quorem+0x94>
 8008de2:	6812      	ldr	r2, [r2, #0]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	2a00      	cmp	r2, #0
 8008de8:	d1f0      	bne.n	8008dcc <quorem+0xec>
 8008dea:	3c01      	subs	r4, #1
 8008dec:	e7eb      	b.n	8008dc6 <quorem+0xe6>
 8008dee:	2000      	movs	r0, #0
 8008df0:	e7ee      	b.n	8008dd0 <quorem+0xf0>
 8008df2:	0000      	movs	r0, r0
 8008df4:	0000      	movs	r0, r0
	...

08008df8 <_dtoa_r>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	4616      	mov	r6, r2
 8008dfe:	461f      	mov	r7, r3
 8008e00:	69c4      	ldr	r4, [r0, #28]
 8008e02:	b099      	sub	sp, #100	; 0x64
 8008e04:	4605      	mov	r5, r0
 8008e06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008e0a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008e0e:	b974      	cbnz	r4, 8008e2e <_dtoa_r+0x36>
 8008e10:	2010      	movs	r0, #16
 8008e12:	f000 fe1d 	bl	8009a50 <malloc>
 8008e16:	4602      	mov	r2, r0
 8008e18:	61e8      	str	r0, [r5, #28]
 8008e1a:	b920      	cbnz	r0, 8008e26 <_dtoa_r+0x2e>
 8008e1c:	21ef      	movs	r1, #239	; 0xef
 8008e1e:	4bac      	ldr	r3, [pc, #688]	; (80090d0 <_dtoa_r+0x2d8>)
 8008e20:	48ac      	ldr	r0, [pc, #688]	; (80090d4 <_dtoa_r+0x2dc>)
 8008e22:	f001 fc7b 	bl	800a71c <__assert_func>
 8008e26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e2a:	6004      	str	r4, [r0, #0]
 8008e2c:	60c4      	str	r4, [r0, #12]
 8008e2e:	69eb      	ldr	r3, [r5, #28]
 8008e30:	6819      	ldr	r1, [r3, #0]
 8008e32:	b151      	cbz	r1, 8008e4a <_dtoa_r+0x52>
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	2301      	movs	r3, #1
 8008e38:	4093      	lsls	r3, r2
 8008e3a:	604a      	str	r2, [r1, #4]
 8008e3c:	608b      	str	r3, [r1, #8]
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f000 fefa 	bl	8009c38 <_Bfree>
 8008e44:	2200      	movs	r2, #0
 8008e46:	69eb      	ldr	r3, [r5, #28]
 8008e48:	601a      	str	r2, [r3, #0]
 8008e4a:	1e3b      	subs	r3, r7, #0
 8008e4c:	bfaf      	iteee	ge
 8008e4e:	2300      	movge	r3, #0
 8008e50:	2201      	movlt	r2, #1
 8008e52:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e56:	9305      	strlt	r3, [sp, #20]
 8008e58:	bfa8      	it	ge
 8008e5a:	f8c8 3000 	strge.w	r3, [r8]
 8008e5e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008e62:	4b9d      	ldr	r3, [pc, #628]	; (80090d8 <_dtoa_r+0x2e0>)
 8008e64:	bfb8      	it	lt
 8008e66:	f8c8 2000 	strlt.w	r2, [r8]
 8008e6a:	ea33 0309 	bics.w	r3, r3, r9
 8008e6e:	d119      	bne.n	8008ea4 <_dtoa_r+0xac>
 8008e70:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e7c:	4333      	orrs	r3, r6
 8008e7e:	f000 8589 	beq.w	8009994 <_dtoa_r+0xb9c>
 8008e82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e84:	b953      	cbnz	r3, 8008e9c <_dtoa_r+0xa4>
 8008e86:	4b95      	ldr	r3, [pc, #596]	; (80090dc <_dtoa_r+0x2e4>)
 8008e88:	e023      	b.n	8008ed2 <_dtoa_r+0xda>
 8008e8a:	4b95      	ldr	r3, [pc, #596]	; (80090e0 <_dtoa_r+0x2e8>)
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	9803      	ldr	r0, [sp, #12]
 8008e96:	b019      	add	sp, #100	; 0x64
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	4b8f      	ldr	r3, [pc, #572]	; (80090dc <_dtoa_r+0x2e4>)
 8008e9e:	9303      	str	r3, [sp, #12]
 8008ea0:	3303      	adds	r3, #3
 8008ea2:	e7f5      	b.n	8008e90 <_dtoa_r+0x98>
 8008ea4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008ea8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008eac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f7f7 fd78 	bl	80009a8 <__aeabi_dcmpeq>
 8008eb8:	4680      	mov	r8, r0
 8008eba:	b160      	cbz	r0, 8008ed6 <_dtoa_r+0xde>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ec0:	6013      	str	r3, [r2, #0]
 8008ec2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 8562 	beq.w	800998e <_dtoa_r+0xb96>
 8008eca:	4b86      	ldr	r3, [pc, #536]	; (80090e4 <_dtoa_r+0x2ec>)
 8008ecc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	e7de      	b.n	8008e94 <_dtoa_r+0x9c>
 8008ed6:	ab16      	add	r3, sp, #88	; 0x58
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	ab17      	add	r3, sp, #92	; 0x5c
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	4628      	mov	r0, r5
 8008ee0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ee4:	f001 f98a 	bl	800a1fc <__d2b>
 8008ee8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008eec:	4682      	mov	sl, r0
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	d07e      	beq.n	8008ff0 <_dtoa_r+0x1f8>
 8008ef2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008f04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f08:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4b75      	ldr	r3, [pc, #468]	; (80090e8 <_dtoa_r+0x2f0>)
 8008f12:	f7f7 f929 	bl	8000168 <__aeabi_dsub>
 8008f16:	a368      	add	r3, pc, #416	; (adr r3, 80090b8 <_dtoa_r+0x2c0>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	f7f7 fadc 	bl	80004d8 <__aeabi_dmul>
 8008f20:	a367      	add	r3, pc, #412	; (adr r3, 80090c0 <_dtoa_r+0x2c8>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 f921 	bl	800016c <__adddf3>
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	460f      	mov	r7, r1
 8008f30:	f7f7 fa68 	bl	8000404 <__aeabi_i2d>
 8008f34:	a364      	add	r3, pc, #400	; (adr r3, 80090c8 <_dtoa_r+0x2d0>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 facd 	bl	80004d8 <__aeabi_dmul>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4630      	mov	r0, r6
 8008f44:	4639      	mov	r1, r7
 8008f46:	f7f7 f911 	bl	800016c <__adddf3>
 8008f4a:	4606      	mov	r6, r0
 8008f4c:	460f      	mov	r7, r1
 8008f4e:	f7f7 fd73 	bl	8000a38 <__aeabi_d2iz>
 8008f52:	2200      	movs	r2, #0
 8008f54:	4683      	mov	fp, r0
 8008f56:	2300      	movs	r3, #0
 8008f58:	4630      	mov	r0, r6
 8008f5a:	4639      	mov	r1, r7
 8008f5c:	f7f7 fd2e 	bl	80009bc <__aeabi_dcmplt>
 8008f60:	b148      	cbz	r0, 8008f76 <_dtoa_r+0x17e>
 8008f62:	4658      	mov	r0, fp
 8008f64:	f7f7 fa4e 	bl	8000404 <__aeabi_i2d>
 8008f68:	4632      	mov	r2, r6
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	f7f7 fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8008f70:	b908      	cbnz	r0, 8008f76 <_dtoa_r+0x17e>
 8008f72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f76:	f1bb 0f16 	cmp.w	fp, #22
 8008f7a:	d857      	bhi.n	800902c <_dtoa_r+0x234>
 8008f7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f80:	4b5a      	ldr	r3, [pc, #360]	; (80090ec <_dtoa_r+0x2f4>)
 8008f82:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8a:	f7f7 fd17 	bl	80009bc <__aeabi_dcmplt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d04e      	beq.n	8009030 <_dtoa_r+0x238>
 8008f92:	2300      	movs	r3, #0
 8008f94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f9c:	1b1b      	subs	r3, r3, r4
 8008f9e:	1e5a      	subs	r2, r3, #1
 8008fa0:	bf46      	itte	mi
 8008fa2:	f1c3 0901 	rsbmi	r9, r3, #1
 8008fa6:	2300      	movmi	r3, #0
 8008fa8:	f04f 0900 	movpl.w	r9, #0
 8008fac:	9209      	str	r2, [sp, #36]	; 0x24
 8008fae:	bf48      	it	mi
 8008fb0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008fb2:	f1bb 0f00 	cmp.w	fp, #0
 8008fb6:	db3d      	blt.n	8009034 <_dtoa_r+0x23c>
 8008fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008fbe:	445b      	add	r3, fp
 8008fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fc8:	2b09      	cmp	r3, #9
 8008fca:	d867      	bhi.n	800909c <_dtoa_r+0x2a4>
 8008fcc:	2b05      	cmp	r3, #5
 8008fce:	bfc4      	itt	gt
 8008fd0:	3b04      	subgt	r3, #4
 8008fd2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fd6:	bfc8      	it	gt
 8008fd8:	2400      	movgt	r4, #0
 8008fda:	f1a3 0302 	sub.w	r3, r3, #2
 8008fde:	bfd8      	it	le
 8008fe0:	2401      	movle	r4, #1
 8008fe2:	2b03      	cmp	r3, #3
 8008fe4:	f200 8086 	bhi.w	80090f4 <_dtoa_r+0x2fc>
 8008fe8:	e8df f003 	tbb	[pc, r3]
 8008fec:	5637392c 	.word	0x5637392c
 8008ff0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008ff4:	441c      	add	r4, r3
 8008ff6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	bfc1      	itttt	gt
 8008ffe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009002:	fa09 f903 	lslgt.w	r9, r9, r3
 8009006:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800900a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800900e:	bfd6      	itet	le
 8009010:	f1c3 0320 	rsble	r3, r3, #32
 8009014:	ea49 0003 	orrgt.w	r0, r9, r3
 8009018:	fa06 f003 	lslle.w	r0, r6, r3
 800901c:	f7f7 f9e2 	bl	80003e4 <__aeabi_ui2d>
 8009020:	2201      	movs	r2, #1
 8009022:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009026:	3c01      	subs	r4, #1
 8009028:	9213      	str	r2, [sp, #76]	; 0x4c
 800902a:	e76f      	b.n	8008f0c <_dtoa_r+0x114>
 800902c:	2301      	movs	r3, #1
 800902e:	e7b3      	b.n	8008f98 <_dtoa_r+0x1a0>
 8009030:	900f      	str	r0, [sp, #60]	; 0x3c
 8009032:	e7b2      	b.n	8008f9a <_dtoa_r+0x1a2>
 8009034:	f1cb 0300 	rsb	r3, fp, #0
 8009038:	930a      	str	r3, [sp, #40]	; 0x28
 800903a:	2300      	movs	r3, #0
 800903c:	eba9 090b 	sub.w	r9, r9, fp
 8009040:	930e      	str	r3, [sp, #56]	; 0x38
 8009042:	e7c0      	b.n	8008fc6 <_dtoa_r+0x1ce>
 8009044:	2300      	movs	r3, #0
 8009046:	930b      	str	r3, [sp, #44]	; 0x2c
 8009048:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800904a:	2b00      	cmp	r3, #0
 800904c:	dc55      	bgt.n	80090fa <_dtoa_r+0x302>
 800904e:	2301      	movs	r3, #1
 8009050:	461a      	mov	r2, r3
 8009052:	9306      	str	r3, [sp, #24]
 8009054:	9308      	str	r3, [sp, #32]
 8009056:	9223      	str	r2, [sp, #140]	; 0x8c
 8009058:	e00b      	b.n	8009072 <_dtoa_r+0x27a>
 800905a:	2301      	movs	r3, #1
 800905c:	e7f3      	b.n	8009046 <_dtoa_r+0x24e>
 800905e:	2300      	movs	r3, #0
 8009060:	930b      	str	r3, [sp, #44]	; 0x2c
 8009062:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009064:	445b      	add	r3, fp
 8009066:	9306      	str	r3, [sp, #24]
 8009068:	3301      	adds	r3, #1
 800906a:	2b01      	cmp	r3, #1
 800906c:	9308      	str	r3, [sp, #32]
 800906e:	bfb8      	it	lt
 8009070:	2301      	movlt	r3, #1
 8009072:	2100      	movs	r1, #0
 8009074:	2204      	movs	r2, #4
 8009076:	69e8      	ldr	r0, [r5, #28]
 8009078:	f102 0614 	add.w	r6, r2, #20
 800907c:	429e      	cmp	r6, r3
 800907e:	d940      	bls.n	8009102 <_dtoa_r+0x30a>
 8009080:	6041      	str	r1, [r0, #4]
 8009082:	4628      	mov	r0, r5
 8009084:	f000 fd98 	bl	8009bb8 <_Balloc>
 8009088:	9003      	str	r0, [sp, #12]
 800908a:	2800      	cmp	r0, #0
 800908c:	d13c      	bne.n	8009108 <_dtoa_r+0x310>
 800908e:	4602      	mov	r2, r0
 8009090:	f240 11af 	movw	r1, #431	; 0x1af
 8009094:	4b16      	ldr	r3, [pc, #88]	; (80090f0 <_dtoa_r+0x2f8>)
 8009096:	e6c3      	b.n	8008e20 <_dtoa_r+0x28>
 8009098:	2301      	movs	r3, #1
 800909a:	e7e1      	b.n	8009060 <_dtoa_r+0x268>
 800909c:	2401      	movs	r4, #1
 800909e:	2300      	movs	r3, #0
 80090a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80090a2:	9322      	str	r3, [sp, #136]	; 0x88
 80090a4:	f04f 33ff 	mov.w	r3, #4294967295
 80090a8:	2200      	movs	r2, #0
 80090aa:	9306      	str	r3, [sp, #24]
 80090ac:	9308      	str	r3, [sp, #32]
 80090ae:	2312      	movs	r3, #18
 80090b0:	e7d1      	b.n	8009056 <_dtoa_r+0x25e>
 80090b2:	bf00      	nop
 80090b4:	f3af 8000 	nop.w
 80090b8:	636f4361 	.word	0x636f4361
 80090bc:	3fd287a7 	.word	0x3fd287a7
 80090c0:	8b60c8b3 	.word	0x8b60c8b3
 80090c4:	3fc68a28 	.word	0x3fc68a28
 80090c8:	509f79fb 	.word	0x509f79fb
 80090cc:	3fd34413 	.word	0x3fd34413
 80090d0:	0800b3a5 	.word	0x0800b3a5
 80090d4:	0800b3bc 	.word	0x0800b3bc
 80090d8:	7ff00000 	.word	0x7ff00000
 80090dc:	0800b3a1 	.word	0x0800b3a1
 80090e0:	0800b398 	.word	0x0800b398
 80090e4:	0800b375 	.word	0x0800b375
 80090e8:	3ff80000 	.word	0x3ff80000
 80090ec:	0800b4a8 	.word	0x0800b4a8
 80090f0:	0800b414 	.word	0x0800b414
 80090f4:	2301      	movs	r3, #1
 80090f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80090f8:	e7d4      	b.n	80090a4 <_dtoa_r+0x2ac>
 80090fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090fc:	9306      	str	r3, [sp, #24]
 80090fe:	9308      	str	r3, [sp, #32]
 8009100:	e7b7      	b.n	8009072 <_dtoa_r+0x27a>
 8009102:	3101      	adds	r1, #1
 8009104:	0052      	lsls	r2, r2, #1
 8009106:	e7b7      	b.n	8009078 <_dtoa_r+0x280>
 8009108:	69eb      	ldr	r3, [r5, #28]
 800910a:	9a03      	ldr	r2, [sp, #12]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	2b0e      	cmp	r3, #14
 8009112:	f200 80a8 	bhi.w	8009266 <_dtoa_r+0x46e>
 8009116:	2c00      	cmp	r4, #0
 8009118:	f000 80a5 	beq.w	8009266 <_dtoa_r+0x46e>
 800911c:	f1bb 0f00 	cmp.w	fp, #0
 8009120:	dd34      	ble.n	800918c <_dtoa_r+0x394>
 8009122:	4b9a      	ldr	r3, [pc, #616]	; (800938c <_dtoa_r+0x594>)
 8009124:	f00b 020f 	and.w	r2, fp, #15
 8009128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800912c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009130:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009134:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009138:	ea4f 142b 	mov.w	r4, fp, asr #4
 800913c:	d016      	beq.n	800916c <_dtoa_r+0x374>
 800913e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009142:	4b93      	ldr	r3, [pc, #588]	; (8009390 <_dtoa_r+0x598>)
 8009144:	2703      	movs	r7, #3
 8009146:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800914a:	f7f7 faef 	bl	800072c <__aeabi_ddiv>
 800914e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009152:	f004 040f 	and.w	r4, r4, #15
 8009156:	4e8e      	ldr	r6, [pc, #568]	; (8009390 <_dtoa_r+0x598>)
 8009158:	b954      	cbnz	r4, 8009170 <_dtoa_r+0x378>
 800915a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800915e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009162:	f7f7 fae3 	bl	800072c <__aeabi_ddiv>
 8009166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800916a:	e029      	b.n	80091c0 <_dtoa_r+0x3c8>
 800916c:	2702      	movs	r7, #2
 800916e:	e7f2      	b.n	8009156 <_dtoa_r+0x35e>
 8009170:	07e1      	lsls	r1, r4, #31
 8009172:	d508      	bpl.n	8009186 <_dtoa_r+0x38e>
 8009174:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009178:	e9d6 2300 	ldrd	r2, r3, [r6]
 800917c:	f7f7 f9ac 	bl	80004d8 <__aeabi_dmul>
 8009180:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009184:	3701      	adds	r7, #1
 8009186:	1064      	asrs	r4, r4, #1
 8009188:	3608      	adds	r6, #8
 800918a:	e7e5      	b.n	8009158 <_dtoa_r+0x360>
 800918c:	f000 80a5 	beq.w	80092da <_dtoa_r+0x4e2>
 8009190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009194:	f1cb 0400 	rsb	r4, fp, #0
 8009198:	4b7c      	ldr	r3, [pc, #496]	; (800938c <_dtoa_r+0x594>)
 800919a:	f004 020f 	and.w	r2, r4, #15
 800919e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 f997 	bl	80004d8 <__aeabi_dmul>
 80091aa:	2702      	movs	r7, #2
 80091ac:	2300      	movs	r3, #0
 80091ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091b2:	4e77      	ldr	r6, [pc, #476]	; (8009390 <_dtoa_r+0x598>)
 80091b4:	1124      	asrs	r4, r4, #4
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	f040 8084 	bne.w	80092c4 <_dtoa_r+0x4cc>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1d2      	bne.n	8009166 <_dtoa_r+0x36e>
 80091c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80091c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80091c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 8087 	beq.w	80092de <_dtoa_r+0x4e6>
 80091d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091d4:	2200      	movs	r2, #0
 80091d6:	4b6f      	ldr	r3, [pc, #444]	; (8009394 <_dtoa_r+0x59c>)
 80091d8:	f7f7 fbf0 	bl	80009bc <__aeabi_dcmplt>
 80091dc:	2800      	cmp	r0, #0
 80091de:	d07e      	beq.n	80092de <_dtoa_r+0x4e6>
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d07b      	beq.n	80092de <_dtoa_r+0x4e6>
 80091e6:	9b06      	ldr	r3, [sp, #24]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dd38      	ble.n	800925e <_dtoa_r+0x466>
 80091ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091f0:	2200      	movs	r2, #0
 80091f2:	4b69      	ldr	r3, [pc, #420]	; (8009398 <_dtoa_r+0x5a0>)
 80091f4:	f7f7 f970 	bl	80004d8 <__aeabi_dmul>
 80091f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091fc:	9c06      	ldr	r4, [sp, #24]
 80091fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009202:	3701      	adds	r7, #1
 8009204:	4638      	mov	r0, r7
 8009206:	f7f7 f8fd 	bl	8000404 <__aeabi_i2d>
 800920a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800920e:	f7f7 f963 	bl	80004d8 <__aeabi_dmul>
 8009212:	2200      	movs	r2, #0
 8009214:	4b61      	ldr	r3, [pc, #388]	; (800939c <_dtoa_r+0x5a4>)
 8009216:	f7f6 ffa9 	bl	800016c <__adddf3>
 800921a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800921e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009222:	9611      	str	r6, [sp, #68]	; 0x44
 8009224:	2c00      	cmp	r4, #0
 8009226:	d15d      	bne.n	80092e4 <_dtoa_r+0x4ec>
 8009228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800922c:	2200      	movs	r2, #0
 800922e:	4b5c      	ldr	r3, [pc, #368]	; (80093a0 <_dtoa_r+0x5a8>)
 8009230:	f7f6 ff9a 	bl	8000168 <__aeabi_dsub>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800923c:	4633      	mov	r3, r6
 800923e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009240:	f7f7 fbda 	bl	80009f8 <__aeabi_dcmpgt>
 8009244:	2800      	cmp	r0, #0
 8009246:	f040 8295 	bne.w	8009774 <_dtoa_r+0x97c>
 800924a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800924e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009250:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009254:	f7f7 fbb2 	bl	80009bc <__aeabi_dcmplt>
 8009258:	2800      	cmp	r0, #0
 800925a:	f040 8289 	bne.w	8009770 <_dtoa_r+0x978>
 800925e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009262:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009266:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009268:	2b00      	cmp	r3, #0
 800926a:	f2c0 8151 	blt.w	8009510 <_dtoa_r+0x718>
 800926e:	f1bb 0f0e 	cmp.w	fp, #14
 8009272:	f300 814d 	bgt.w	8009510 <_dtoa_r+0x718>
 8009276:	4b45      	ldr	r3, [pc, #276]	; (800938c <_dtoa_r+0x594>)
 8009278:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800927c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009280:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009284:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009286:	2b00      	cmp	r3, #0
 8009288:	f280 80da 	bge.w	8009440 <_dtoa_r+0x648>
 800928c:	9b08      	ldr	r3, [sp, #32]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f300 80d6 	bgt.w	8009440 <_dtoa_r+0x648>
 8009294:	f040 826b 	bne.w	800976e <_dtoa_r+0x976>
 8009298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800929c:	2200      	movs	r2, #0
 800929e:	4b40      	ldr	r3, [pc, #256]	; (80093a0 <_dtoa_r+0x5a8>)
 80092a0:	f7f7 f91a 	bl	80004d8 <__aeabi_dmul>
 80092a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092a8:	f7f7 fb9c 	bl	80009e4 <__aeabi_dcmpge>
 80092ac:	9c08      	ldr	r4, [sp, #32]
 80092ae:	4626      	mov	r6, r4
 80092b0:	2800      	cmp	r0, #0
 80092b2:	f040 8241 	bne.w	8009738 <_dtoa_r+0x940>
 80092b6:	2331      	movs	r3, #49	; 0x31
 80092b8:	9f03      	ldr	r7, [sp, #12]
 80092ba:	f10b 0b01 	add.w	fp, fp, #1
 80092be:	f807 3b01 	strb.w	r3, [r7], #1
 80092c2:	e23d      	b.n	8009740 <_dtoa_r+0x948>
 80092c4:	07e2      	lsls	r2, r4, #31
 80092c6:	d505      	bpl.n	80092d4 <_dtoa_r+0x4dc>
 80092c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092cc:	f7f7 f904 	bl	80004d8 <__aeabi_dmul>
 80092d0:	2301      	movs	r3, #1
 80092d2:	3701      	adds	r7, #1
 80092d4:	1064      	asrs	r4, r4, #1
 80092d6:	3608      	adds	r6, #8
 80092d8:	e76d      	b.n	80091b6 <_dtoa_r+0x3be>
 80092da:	2702      	movs	r7, #2
 80092dc:	e770      	b.n	80091c0 <_dtoa_r+0x3c8>
 80092de:	46d8      	mov	r8, fp
 80092e0:	9c08      	ldr	r4, [sp, #32]
 80092e2:	e78f      	b.n	8009204 <_dtoa_r+0x40c>
 80092e4:	9903      	ldr	r1, [sp, #12]
 80092e6:	4b29      	ldr	r3, [pc, #164]	; (800938c <_dtoa_r+0x594>)
 80092e8:	4421      	add	r1, r4
 80092ea:	9112      	str	r1, [sp, #72]	; 0x48
 80092ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80092f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d054      	beq.n	80093a8 <_dtoa_r+0x5b0>
 80092fe:	2000      	movs	r0, #0
 8009300:	4928      	ldr	r1, [pc, #160]	; (80093a4 <_dtoa_r+0x5ac>)
 8009302:	f7f7 fa13 	bl	800072c <__aeabi_ddiv>
 8009306:	463b      	mov	r3, r7
 8009308:	4632      	mov	r2, r6
 800930a:	f7f6 ff2d 	bl	8000168 <__aeabi_dsub>
 800930e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009312:	9f03      	ldr	r7, [sp, #12]
 8009314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009318:	f7f7 fb8e 	bl	8000a38 <__aeabi_d2iz>
 800931c:	4604      	mov	r4, r0
 800931e:	f7f7 f871 	bl	8000404 <__aeabi_i2d>
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800932a:	f7f6 ff1d 	bl	8000168 <__aeabi_dsub>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	3430      	adds	r4, #48	; 0x30
 8009334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009338:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800933c:	f807 4b01 	strb.w	r4, [r7], #1
 8009340:	f7f7 fb3c 	bl	80009bc <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	d173      	bne.n	8009430 <_dtoa_r+0x638>
 8009348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800934c:	2000      	movs	r0, #0
 800934e:	4911      	ldr	r1, [pc, #68]	; (8009394 <_dtoa_r+0x59c>)
 8009350:	f7f6 ff0a 	bl	8000168 <__aeabi_dsub>
 8009354:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009358:	f7f7 fb30 	bl	80009bc <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f040 80b6 	bne.w	80094ce <_dtoa_r+0x6d6>
 8009362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009364:	429f      	cmp	r7, r3
 8009366:	f43f af7a 	beq.w	800925e <_dtoa_r+0x466>
 800936a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800936e:	2200      	movs	r2, #0
 8009370:	4b09      	ldr	r3, [pc, #36]	; (8009398 <_dtoa_r+0x5a0>)
 8009372:	f7f7 f8b1 	bl	80004d8 <__aeabi_dmul>
 8009376:	2200      	movs	r2, #0
 8009378:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800937c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <_dtoa_r+0x5a0>)
 8009382:	f7f7 f8a9 	bl	80004d8 <__aeabi_dmul>
 8009386:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800938a:	e7c3      	b.n	8009314 <_dtoa_r+0x51c>
 800938c:	0800b4a8 	.word	0x0800b4a8
 8009390:	0800b480 	.word	0x0800b480
 8009394:	3ff00000 	.word	0x3ff00000
 8009398:	40240000 	.word	0x40240000
 800939c:	401c0000 	.word	0x401c0000
 80093a0:	40140000 	.word	0x40140000
 80093a4:	3fe00000 	.word	0x3fe00000
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f7 f894 	bl	80004d8 <__aeabi_dmul>
 80093b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093b6:	9c03      	ldr	r4, [sp, #12]
 80093b8:	9314      	str	r3, [sp, #80]	; 0x50
 80093ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093be:	f7f7 fb3b 	bl	8000a38 <__aeabi_d2iz>
 80093c2:	9015      	str	r0, [sp, #84]	; 0x54
 80093c4:	f7f7 f81e 	bl	8000404 <__aeabi_i2d>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093d0:	f7f6 feca 	bl	8000168 <__aeabi_dsub>
 80093d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d6:	4606      	mov	r6, r0
 80093d8:	3330      	adds	r3, #48	; 0x30
 80093da:	f804 3b01 	strb.w	r3, [r4], #1
 80093de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093e0:	460f      	mov	r7, r1
 80093e2:	429c      	cmp	r4, r3
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	d124      	bne.n	8009434 <_dtoa_r+0x63c>
 80093ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093ee:	4baf      	ldr	r3, [pc, #700]	; (80096ac <_dtoa_r+0x8b4>)
 80093f0:	f7f6 febc 	bl	800016c <__adddf3>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f7 fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8009400:	2800      	cmp	r0, #0
 8009402:	d163      	bne.n	80094cc <_dtoa_r+0x6d4>
 8009404:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009408:	2000      	movs	r0, #0
 800940a:	49a8      	ldr	r1, [pc, #672]	; (80096ac <_dtoa_r+0x8b4>)
 800940c:	f7f6 feac 	bl	8000168 <__aeabi_dsub>
 8009410:	4602      	mov	r2, r0
 8009412:	460b      	mov	r3, r1
 8009414:	4630      	mov	r0, r6
 8009416:	4639      	mov	r1, r7
 8009418:	f7f7 fad0 	bl	80009bc <__aeabi_dcmplt>
 800941c:	2800      	cmp	r0, #0
 800941e:	f43f af1e 	beq.w	800925e <_dtoa_r+0x466>
 8009422:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009424:	1e7b      	subs	r3, r7, #1
 8009426:	9314      	str	r3, [sp, #80]	; 0x50
 8009428:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800942c:	2b30      	cmp	r3, #48	; 0x30
 800942e:	d0f8      	beq.n	8009422 <_dtoa_r+0x62a>
 8009430:	46c3      	mov	fp, r8
 8009432:	e03b      	b.n	80094ac <_dtoa_r+0x6b4>
 8009434:	4b9e      	ldr	r3, [pc, #632]	; (80096b0 <_dtoa_r+0x8b8>)
 8009436:	f7f7 f84f 	bl	80004d8 <__aeabi_dmul>
 800943a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800943e:	e7bc      	b.n	80093ba <_dtoa_r+0x5c2>
 8009440:	9f03      	ldr	r7, [sp, #12]
 8009442:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009446:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800944a:	4640      	mov	r0, r8
 800944c:	4649      	mov	r1, r9
 800944e:	f7f7 f96d 	bl	800072c <__aeabi_ddiv>
 8009452:	f7f7 faf1 	bl	8000a38 <__aeabi_d2iz>
 8009456:	4604      	mov	r4, r0
 8009458:	f7f6 ffd4 	bl	8000404 <__aeabi_i2d>
 800945c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009460:	f7f7 f83a 	bl	80004d8 <__aeabi_dmul>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4640      	mov	r0, r8
 800946a:	4649      	mov	r1, r9
 800946c:	f7f6 fe7c 	bl	8000168 <__aeabi_dsub>
 8009470:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009474:	f807 6b01 	strb.w	r6, [r7], #1
 8009478:	9e03      	ldr	r6, [sp, #12]
 800947a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800947e:	1bbe      	subs	r6, r7, r6
 8009480:	45b4      	cmp	ip, r6
 8009482:	4602      	mov	r2, r0
 8009484:	460b      	mov	r3, r1
 8009486:	d136      	bne.n	80094f6 <_dtoa_r+0x6fe>
 8009488:	f7f6 fe70 	bl	800016c <__adddf3>
 800948c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009490:	4680      	mov	r8, r0
 8009492:	4689      	mov	r9, r1
 8009494:	f7f7 fab0 	bl	80009f8 <__aeabi_dcmpgt>
 8009498:	bb58      	cbnz	r0, 80094f2 <_dtoa_r+0x6fa>
 800949a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800949e:	4640      	mov	r0, r8
 80094a0:	4649      	mov	r1, r9
 80094a2:	f7f7 fa81 	bl	80009a8 <__aeabi_dcmpeq>
 80094a6:	b108      	cbz	r0, 80094ac <_dtoa_r+0x6b4>
 80094a8:	07e3      	lsls	r3, r4, #31
 80094aa:	d422      	bmi.n	80094f2 <_dtoa_r+0x6fa>
 80094ac:	4651      	mov	r1, sl
 80094ae:	4628      	mov	r0, r5
 80094b0:	f000 fbc2 	bl	8009c38 <_Bfree>
 80094b4:	2300      	movs	r3, #0
 80094b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80094b8:	703b      	strb	r3, [r7, #0]
 80094ba:	f10b 0301 	add.w	r3, fp, #1
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f43f ace6 	beq.w	8008e94 <_dtoa_r+0x9c>
 80094c8:	601f      	str	r7, [r3, #0]
 80094ca:	e4e3      	b.n	8008e94 <_dtoa_r+0x9c>
 80094cc:	4627      	mov	r7, r4
 80094ce:	463b      	mov	r3, r7
 80094d0:	461f      	mov	r7, r3
 80094d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094d6:	2a39      	cmp	r2, #57	; 0x39
 80094d8:	d107      	bne.n	80094ea <_dtoa_r+0x6f2>
 80094da:	9a03      	ldr	r2, [sp, #12]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d1f7      	bne.n	80094d0 <_dtoa_r+0x6d8>
 80094e0:	2230      	movs	r2, #48	; 0x30
 80094e2:	9903      	ldr	r1, [sp, #12]
 80094e4:	f108 0801 	add.w	r8, r8, #1
 80094e8:	700a      	strb	r2, [r1, #0]
 80094ea:	781a      	ldrb	r2, [r3, #0]
 80094ec:	3201      	adds	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	e79e      	b.n	8009430 <_dtoa_r+0x638>
 80094f2:	46d8      	mov	r8, fp
 80094f4:	e7eb      	b.n	80094ce <_dtoa_r+0x6d6>
 80094f6:	2200      	movs	r2, #0
 80094f8:	4b6d      	ldr	r3, [pc, #436]	; (80096b0 <_dtoa_r+0x8b8>)
 80094fa:	f7f6 ffed 	bl	80004d8 <__aeabi_dmul>
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	4680      	mov	r8, r0
 8009504:	4689      	mov	r9, r1
 8009506:	f7f7 fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800950a:	2800      	cmp	r0, #0
 800950c:	d09b      	beq.n	8009446 <_dtoa_r+0x64e>
 800950e:	e7cd      	b.n	80094ac <_dtoa_r+0x6b4>
 8009510:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009512:	2a00      	cmp	r2, #0
 8009514:	f000 80c4 	beq.w	80096a0 <_dtoa_r+0x8a8>
 8009518:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800951a:	2a01      	cmp	r2, #1
 800951c:	f300 80a8 	bgt.w	8009670 <_dtoa_r+0x878>
 8009520:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009522:	2a00      	cmp	r2, #0
 8009524:	f000 80a0 	beq.w	8009668 <_dtoa_r+0x870>
 8009528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800952c:	464f      	mov	r7, r9
 800952e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009532:	2101      	movs	r1, #1
 8009534:	441a      	add	r2, r3
 8009536:	4628      	mov	r0, r5
 8009538:	4499      	add	r9, r3
 800953a:	9209      	str	r2, [sp, #36]	; 0x24
 800953c:	f000 fc32 	bl	8009da4 <__i2b>
 8009540:	4606      	mov	r6, r0
 8009542:	b15f      	cbz	r7, 800955c <_dtoa_r+0x764>
 8009544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd08      	ble.n	800955c <_dtoa_r+0x764>
 800954a:	42bb      	cmp	r3, r7
 800954c:	bfa8      	it	ge
 800954e:	463b      	movge	r3, r7
 8009550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009552:	eba9 0903 	sub.w	r9, r9, r3
 8009556:	1aff      	subs	r7, r7, r3
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	9309      	str	r3, [sp, #36]	; 0x24
 800955c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955e:	b1f3      	cbz	r3, 800959e <_dtoa_r+0x7a6>
 8009560:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80a0 	beq.w	80096a8 <_dtoa_r+0x8b0>
 8009568:	2c00      	cmp	r4, #0
 800956a:	dd10      	ble.n	800958e <_dtoa_r+0x796>
 800956c:	4631      	mov	r1, r6
 800956e:	4622      	mov	r2, r4
 8009570:	4628      	mov	r0, r5
 8009572:	f000 fcd5 	bl	8009f20 <__pow5mult>
 8009576:	4652      	mov	r2, sl
 8009578:	4601      	mov	r1, r0
 800957a:	4606      	mov	r6, r0
 800957c:	4628      	mov	r0, r5
 800957e:	f000 fc27 	bl	8009dd0 <__multiply>
 8009582:	4680      	mov	r8, r0
 8009584:	4651      	mov	r1, sl
 8009586:	4628      	mov	r0, r5
 8009588:	f000 fb56 	bl	8009c38 <_Bfree>
 800958c:	46c2      	mov	sl, r8
 800958e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009590:	1b1a      	subs	r2, r3, r4
 8009592:	d004      	beq.n	800959e <_dtoa_r+0x7a6>
 8009594:	4651      	mov	r1, sl
 8009596:	4628      	mov	r0, r5
 8009598:	f000 fcc2 	bl	8009f20 <__pow5mult>
 800959c:	4682      	mov	sl, r0
 800959e:	2101      	movs	r1, #1
 80095a0:	4628      	mov	r0, r5
 80095a2:	f000 fbff 	bl	8009da4 <__i2b>
 80095a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095a8:	4604      	mov	r4, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f340 8082 	ble.w	80096b4 <_dtoa_r+0x8bc>
 80095b0:	461a      	mov	r2, r3
 80095b2:	4601      	mov	r1, r0
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 fcb3 	bl	8009f20 <__pow5mult>
 80095ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095bc:	4604      	mov	r4, r0
 80095be:	2b01      	cmp	r3, #1
 80095c0:	dd7b      	ble.n	80096ba <_dtoa_r+0x8c2>
 80095c2:	f04f 0800 	mov.w	r8, #0
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095cc:	6918      	ldr	r0, [r3, #16]
 80095ce:	f000 fb9b 	bl	8009d08 <__hi0bits>
 80095d2:	f1c0 0020 	rsb	r0, r0, #32
 80095d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d8:	4418      	add	r0, r3
 80095da:	f010 001f 	ands.w	r0, r0, #31
 80095de:	f000 8092 	beq.w	8009706 <_dtoa_r+0x90e>
 80095e2:	f1c0 0320 	rsb	r3, r0, #32
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	f340 8085 	ble.w	80096f6 <_dtoa_r+0x8fe>
 80095ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ee:	f1c0 001c 	rsb	r0, r0, #28
 80095f2:	4403      	add	r3, r0
 80095f4:	4481      	add	r9, r0
 80095f6:	4407      	add	r7, r0
 80095f8:	9309      	str	r3, [sp, #36]	; 0x24
 80095fa:	f1b9 0f00 	cmp.w	r9, #0
 80095fe:	dd05      	ble.n	800960c <_dtoa_r+0x814>
 8009600:	4651      	mov	r1, sl
 8009602:	464a      	mov	r2, r9
 8009604:	4628      	mov	r0, r5
 8009606:	f000 fce5 	bl	8009fd4 <__lshift>
 800960a:	4682      	mov	sl, r0
 800960c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960e:	2b00      	cmp	r3, #0
 8009610:	dd05      	ble.n	800961e <_dtoa_r+0x826>
 8009612:	4621      	mov	r1, r4
 8009614:	461a      	mov	r2, r3
 8009616:	4628      	mov	r0, r5
 8009618:	f000 fcdc 	bl	8009fd4 <__lshift>
 800961c:	4604      	mov	r4, r0
 800961e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d072      	beq.n	800970a <_dtoa_r+0x912>
 8009624:	4621      	mov	r1, r4
 8009626:	4650      	mov	r0, sl
 8009628:	f000 fd40 	bl	800a0ac <__mcmp>
 800962c:	2800      	cmp	r0, #0
 800962e:	da6c      	bge.n	800970a <_dtoa_r+0x912>
 8009630:	2300      	movs	r3, #0
 8009632:	4651      	mov	r1, sl
 8009634:	220a      	movs	r2, #10
 8009636:	4628      	mov	r0, r5
 8009638:	f000 fb20 	bl	8009c7c <__multadd>
 800963c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800963e:	4682      	mov	sl, r0
 8009640:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 81ac 	beq.w	80099a2 <_dtoa_r+0xbaa>
 800964a:	2300      	movs	r3, #0
 800964c:	4631      	mov	r1, r6
 800964e:	220a      	movs	r2, #10
 8009650:	4628      	mov	r0, r5
 8009652:	f000 fb13 	bl	8009c7c <__multadd>
 8009656:	9b06      	ldr	r3, [sp, #24]
 8009658:	4606      	mov	r6, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	f300 8093 	bgt.w	8009786 <_dtoa_r+0x98e>
 8009660:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009662:	2b02      	cmp	r3, #2
 8009664:	dc59      	bgt.n	800971a <_dtoa_r+0x922>
 8009666:	e08e      	b.n	8009786 <_dtoa_r+0x98e>
 8009668:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800966a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800966e:	e75d      	b.n	800952c <_dtoa_r+0x734>
 8009670:	9b08      	ldr	r3, [sp, #32]
 8009672:	1e5c      	subs	r4, r3, #1
 8009674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009676:	42a3      	cmp	r3, r4
 8009678:	bfbf      	itttt	lt
 800967a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800967c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800967e:	1ae3      	sublt	r3, r4, r3
 8009680:	18d2      	addlt	r2, r2, r3
 8009682:	bfa8      	it	ge
 8009684:	1b1c      	subge	r4, r3, r4
 8009686:	9b08      	ldr	r3, [sp, #32]
 8009688:	bfbe      	ittt	lt
 800968a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800968c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800968e:	2400      	movlt	r4, #0
 8009690:	2b00      	cmp	r3, #0
 8009692:	bfb5      	itete	lt
 8009694:	eba9 0703 	sublt.w	r7, r9, r3
 8009698:	464f      	movge	r7, r9
 800969a:	2300      	movlt	r3, #0
 800969c:	9b08      	ldrge	r3, [sp, #32]
 800969e:	e747      	b.n	8009530 <_dtoa_r+0x738>
 80096a0:	464f      	mov	r7, r9
 80096a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80096a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80096a6:	e74c      	b.n	8009542 <_dtoa_r+0x74a>
 80096a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096aa:	e773      	b.n	8009594 <_dtoa_r+0x79c>
 80096ac:	3fe00000 	.word	0x3fe00000
 80096b0:	40240000 	.word	0x40240000
 80096b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	dc18      	bgt.n	80096ec <_dtoa_r+0x8f4>
 80096ba:	9b04      	ldr	r3, [sp, #16]
 80096bc:	b9b3      	cbnz	r3, 80096ec <_dtoa_r+0x8f4>
 80096be:	9b05      	ldr	r3, [sp, #20]
 80096c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096c4:	b993      	cbnz	r3, 80096ec <_dtoa_r+0x8f4>
 80096c6:	9b05      	ldr	r3, [sp, #20]
 80096c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096cc:	0d1b      	lsrs	r3, r3, #20
 80096ce:	051b      	lsls	r3, r3, #20
 80096d0:	b17b      	cbz	r3, 80096f2 <_dtoa_r+0x8fa>
 80096d2:	f04f 0801 	mov.w	r8, #1
 80096d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d8:	f109 0901 	add.w	r9, r9, #1
 80096dc:	3301      	adds	r3, #1
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f47f af6f 	bne.w	80095c6 <_dtoa_r+0x7ce>
 80096e8:	2001      	movs	r0, #1
 80096ea:	e774      	b.n	80095d6 <_dtoa_r+0x7de>
 80096ec:	f04f 0800 	mov.w	r8, #0
 80096f0:	e7f6      	b.n	80096e0 <_dtoa_r+0x8e8>
 80096f2:	4698      	mov	r8, r3
 80096f4:	e7f4      	b.n	80096e0 <_dtoa_r+0x8e8>
 80096f6:	d080      	beq.n	80095fa <_dtoa_r+0x802>
 80096f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fa:	331c      	adds	r3, #28
 80096fc:	441a      	add	r2, r3
 80096fe:	4499      	add	r9, r3
 8009700:	441f      	add	r7, r3
 8009702:	9209      	str	r2, [sp, #36]	; 0x24
 8009704:	e779      	b.n	80095fa <_dtoa_r+0x802>
 8009706:	4603      	mov	r3, r0
 8009708:	e7f6      	b.n	80096f8 <_dtoa_r+0x900>
 800970a:	9b08      	ldr	r3, [sp, #32]
 800970c:	2b00      	cmp	r3, #0
 800970e:	dc34      	bgt.n	800977a <_dtoa_r+0x982>
 8009710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009712:	2b02      	cmp	r3, #2
 8009714:	dd31      	ble.n	800977a <_dtoa_r+0x982>
 8009716:	9b08      	ldr	r3, [sp, #32]
 8009718:	9306      	str	r3, [sp, #24]
 800971a:	9b06      	ldr	r3, [sp, #24]
 800971c:	b963      	cbnz	r3, 8009738 <_dtoa_r+0x940>
 800971e:	4621      	mov	r1, r4
 8009720:	2205      	movs	r2, #5
 8009722:	4628      	mov	r0, r5
 8009724:	f000 faaa 	bl	8009c7c <__multadd>
 8009728:	4601      	mov	r1, r0
 800972a:	4604      	mov	r4, r0
 800972c:	4650      	mov	r0, sl
 800972e:	f000 fcbd 	bl	800a0ac <__mcmp>
 8009732:	2800      	cmp	r0, #0
 8009734:	f73f adbf 	bgt.w	80092b6 <_dtoa_r+0x4be>
 8009738:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800973a:	9f03      	ldr	r7, [sp, #12]
 800973c:	ea6f 0b03 	mvn.w	fp, r3
 8009740:	f04f 0800 	mov.w	r8, #0
 8009744:	4621      	mov	r1, r4
 8009746:	4628      	mov	r0, r5
 8009748:	f000 fa76 	bl	8009c38 <_Bfree>
 800974c:	2e00      	cmp	r6, #0
 800974e:	f43f aead 	beq.w	80094ac <_dtoa_r+0x6b4>
 8009752:	f1b8 0f00 	cmp.w	r8, #0
 8009756:	d005      	beq.n	8009764 <_dtoa_r+0x96c>
 8009758:	45b0      	cmp	r8, r6
 800975a:	d003      	beq.n	8009764 <_dtoa_r+0x96c>
 800975c:	4641      	mov	r1, r8
 800975e:	4628      	mov	r0, r5
 8009760:	f000 fa6a 	bl	8009c38 <_Bfree>
 8009764:	4631      	mov	r1, r6
 8009766:	4628      	mov	r0, r5
 8009768:	f000 fa66 	bl	8009c38 <_Bfree>
 800976c:	e69e      	b.n	80094ac <_dtoa_r+0x6b4>
 800976e:	2400      	movs	r4, #0
 8009770:	4626      	mov	r6, r4
 8009772:	e7e1      	b.n	8009738 <_dtoa_r+0x940>
 8009774:	46c3      	mov	fp, r8
 8009776:	4626      	mov	r6, r4
 8009778:	e59d      	b.n	80092b6 <_dtoa_r+0x4be>
 800977a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 80c8 	beq.w	8009912 <_dtoa_r+0xb1a>
 8009782:	9b08      	ldr	r3, [sp, #32]
 8009784:	9306      	str	r3, [sp, #24]
 8009786:	2f00      	cmp	r7, #0
 8009788:	dd05      	ble.n	8009796 <_dtoa_r+0x99e>
 800978a:	4631      	mov	r1, r6
 800978c:	463a      	mov	r2, r7
 800978e:	4628      	mov	r0, r5
 8009790:	f000 fc20 	bl	8009fd4 <__lshift>
 8009794:	4606      	mov	r6, r0
 8009796:	f1b8 0f00 	cmp.w	r8, #0
 800979a:	d05b      	beq.n	8009854 <_dtoa_r+0xa5c>
 800979c:	4628      	mov	r0, r5
 800979e:	6871      	ldr	r1, [r6, #4]
 80097a0:	f000 fa0a 	bl	8009bb8 <_Balloc>
 80097a4:	4607      	mov	r7, r0
 80097a6:	b928      	cbnz	r0, 80097b4 <_dtoa_r+0x9bc>
 80097a8:	4602      	mov	r2, r0
 80097aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80097ae:	4b81      	ldr	r3, [pc, #516]	; (80099b4 <_dtoa_r+0xbbc>)
 80097b0:	f7ff bb36 	b.w	8008e20 <_dtoa_r+0x28>
 80097b4:	6932      	ldr	r2, [r6, #16]
 80097b6:	f106 010c 	add.w	r1, r6, #12
 80097ba:	3202      	adds	r2, #2
 80097bc:	0092      	lsls	r2, r2, #2
 80097be:	300c      	adds	r0, #12
 80097c0:	f000 ff9e 	bl	800a700 <memcpy>
 80097c4:	2201      	movs	r2, #1
 80097c6:	4639      	mov	r1, r7
 80097c8:	4628      	mov	r0, r5
 80097ca:	f000 fc03 	bl	8009fd4 <__lshift>
 80097ce:	46b0      	mov	r8, r6
 80097d0:	4606      	mov	r6, r0
 80097d2:	9b03      	ldr	r3, [sp, #12]
 80097d4:	9a03      	ldr	r2, [sp, #12]
 80097d6:	3301      	adds	r3, #1
 80097d8:	9308      	str	r3, [sp, #32]
 80097da:	9b06      	ldr	r3, [sp, #24]
 80097dc:	4413      	add	r3, r2
 80097de:	930b      	str	r3, [sp, #44]	; 0x2c
 80097e0:	9b04      	ldr	r3, [sp, #16]
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	930a      	str	r3, [sp, #40]	; 0x28
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	4621      	mov	r1, r4
 80097ec:	3b01      	subs	r3, #1
 80097ee:	4650      	mov	r0, sl
 80097f0:	9304      	str	r3, [sp, #16]
 80097f2:	f7ff fa75 	bl	8008ce0 <quorem>
 80097f6:	4641      	mov	r1, r8
 80097f8:	9006      	str	r0, [sp, #24]
 80097fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80097fe:	4650      	mov	r0, sl
 8009800:	f000 fc54 	bl	800a0ac <__mcmp>
 8009804:	4632      	mov	r2, r6
 8009806:	9009      	str	r0, [sp, #36]	; 0x24
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f000 fc6a 	bl	800a0e4 <__mdiff>
 8009810:	68c2      	ldr	r2, [r0, #12]
 8009812:	4607      	mov	r7, r0
 8009814:	bb02      	cbnz	r2, 8009858 <_dtoa_r+0xa60>
 8009816:	4601      	mov	r1, r0
 8009818:	4650      	mov	r0, sl
 800981a:	f000 fc47 	bl	800a0ac <__mcmp>
 800981e:	4602      	mov	r2, r0
 8009820:	4639      	mov	r1, r7
 8009822:	4628      	mov	r0, r5
 8009824:	920c      	str	r2, [sp, #48]	; 0x30
 8009826:	f000 fa07 	bl	8009c38 <_Bfree>
 800982a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800982c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800982e:	9f08      	ldr	r7, [sp, #32]
 8009830:	ea43 0102 	orr.w	r1, r3, r2
 8009834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009836:	4319      	orrs	r1, r3
 8009838:	d110      	bne.n	800985c <_dtoa_r+0xa64>
 800983a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800983e:	d029      	beq.n	8009894 <_dtoa_r+0xa9c>
 8009840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009842:	2b00      	cmp	r3, #0
 8009844:	dd02      	ble.n	800984c <_dtoa_r+0xa54>
 8009846:	9b06      	ldr	r3, [sp, #24]
 8009848:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800984c:	9b04      	ldr	r3, [sp, #16]
 800984e:	f883 9000 	strb.w	r9, [r3]
 8009852:	e777      	b.n	8009744 <_dtoa_r+0x94c>
 8009854:	4630      	mov	r0, r6
 8009856:	e7ba      	b.n	80097ce <_dtoa_r+0x9d6>
 8009858:	2201      	movs	r2, #1
 800985a:	e7e1      	b.n	8009820 <_dtoa_r+0xa28>
 800985c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	db04      	blt.n	800986c <_dtoa_r+0xa74>
 8009862:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009864:	430b      	orrs	r3, r1
 8009866:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009868:	430b      	orrs	r3, r1
 800986a:	d120      	bne.n	80098ae <_dtoa_r+0xab6>
 800986c:	2a00      	cmp	r2, #0
 800986e:	dded      	ble.n	800984c <_dtoa_r+0xa54>
 8009870:	4651      	mov	r1, sl
 8009872:	2201      	movs	r2, #1
 8009874:	4628      	mov	r0, r5
 8009876:	f000 fbad 	bl	8009fd4 <__lshift>
 800987a:	4621      	mov	r1, r4
 800987c:	4682      	mov	sl, r0
 800987e:	f000 fc15 	bl	800a0ac <__mcmp>
 8009882:	2800      	cmp	r0, #0
 8009884:	dc03      	bgt.n	800988e <_dtoa_r+0xa96>
 8009886:	d1e1      	bne.n	800984c <_dtoa_r+0xa54>
 8009888:	f019 0f01 	tst.w	r9, #1
 800988c:	d0de      	beq.n	800984c <_dtoa_r+0xa54>
 800988e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009892:	d1d8      	bne.n	8009846 <_dtoa_r+0xa4e>
 8009894:	2339      	movs	r3, #57	; 0x39
 8009896:	9a04      	ldr	r2, [sp, #16]
 8009898:	7013      	strb	r3, [r2, #0]
 800989a:	463b      	mov	r3, r7
 800989c:	461f      	mov	r7, r3
 800989e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	2a39      	cmp	r2, #57	; 0x39
 80098a6:	d06b      	beq.n	8009980 <_dtoa_r+0xb88>
 80098a8:	3201      	adds	r2, #1
 80098aa:	701a      	strb	r2, [r3, #0]
 80098ac:	e74a      	b.n	8009744 <_dtoa_r+0x94c>
 80098ae:	2a00      	cmp	r2, #0
 80098b0:	dd07      	ble.n	80098c2 <_dtoa_r+0xaca>
 80098b2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80098b6:	d0ed      	beq.n	8009894 <_dtoa_r+0xa9c>
 80098b8:	9a04      	ldr	r2, [sp, #16]
 80098ba:	f109 0301 	add.w	r3, r9, #1
 80098be:	7013      	strb	r3, [r2, #0]
 80098c0:	e740      	b.n	8009744 <_dtoa_r+0x94c>
 80098c2:	9b08      	ldr	r3, [sp, #32]
 80098c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098c6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d042      	beq.n	8009954 <_dtoa_r+0xb5c>
 80098ce:	4651      	mov	r1, sl
 80098d0:	2300      	movs	r3, #0
 80098d2:	220a      	movs	r2, #10
 80098d4:	4628      	mov	r0, r5
 80098d6:	f000 f9d1 	bl	8009c7c <__multadd>
 80098da:	45b0      	cmp	r8, r6
 80098dc:	4682      	mov	sl, r0
 80098de:	f04f 0300 	mov.w	r3, #0
 80098e2:	f04f 020a 	mov.w	r2, #10
 80098e6:	4641      	mov	r1, r8
 80098e8:	4628      	mov	r0, r5
 80098ea:	d107      	bne.n	80098fc <_dtoa_r+0xb04>
 80098ec:	f000 f9c6 	bl	8009c7c <__multadd>
 80098f0:	4680      	mov	r8, r0
 80098f2:	4606      	mov	r6, r0
 80098f4:	9b08      	ldr	r3, [sp, #32]
 80098f6:	3301      	adds	r3, #1
 80098f8:	9308      	str	r3, [sp, #32]
 80098fa:	e775      	b.n	80097e8 <_dtoa_r+0x9f0>
 80098fc:	f000 f9be 	bl	8009c7c <__multadd>
 8009900:	4631      	mov	r1, r6
 8009902:	4680      	mov	r8, r0
 8009904:	2300      	movs	r3, #0
 8009906:	220a      	movs	r2, #10
 8009908:	4628      	mov	r0, r5
 800990a:	f000 f9b7 	bl	8009c7c <__multadd>
 800990e:	4606      	mov	r6, r0
 8009910:	e7f0      	b.n	80098f4 <_dtoa_r+0xafc>
 8009912:	9b08      	ldr	r3, [sp, #32]
 8009914:	9306      	str	r3, [sp, #24]
 8009916:	9f03      	ldr	r7, [sp, #12]
 8009918:	4621      	mov	r1, r4
 800991a:	4650      	mov	r0, sl
 800991c:	f7ff f9e0 	bl	8008ce0 <quorem>
 8009920:	9b03      	ldr	r3, [sp, #12]
 8009922:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009926:	f807 9b01 	strb.w	r9, [r7], #1
 800992a:	1afa      	subs	r2, r7, r3
 800992c:	9b06      	ldr	r3, [sp, #24]
 800992e:	4293      	cmp	r3, r2
 8009930:	dd07      	ble.n	8009942 <_dtoa_r+0xb4a>
 8009932:	4651      	mov	r1, sl
 8009934:	2300      	movs	r3, #0
 8009936:	220a      	movs	r2, #10
 8009938:	4628      	mov	r0, r5
 800993a:	f000 f99f 	bl	8009c7c <__multadd>
 800993e:	4682      	mov	sl, r0
 8009940:	e7ea      	b.n	8009918 <_dtoa_r+0xb20>
 8009942:	9b06      	ldr	r3, [sp, #24]
 8009944:	f04f 0800 	mov.w	r8, #0
 8009948:	2b00      	cmp	r3, #0
 800994a:	bfcc      	ite	gt
 800994c:	461f      	movgt	r7, r3
 800994e:	2701      	movle	r7, #1
 8009950:	9b03      	ldr	r3, [sp, #12]
 8009952:	441f      	add	r7, r3
 8009954:	4651      	mov	r1, sl
 8009956:	2201      	movs	r2, #1
 8009958:	4628      	mov	r0, r5
 800995a:	f000 fb3b 	bl	8009fd4 <__lshift>
 800995e:	4621      	mov	r1, r4
 8009960:	4682      	mov	sl, r0
 8009962:	f000 fba3 	bl	800a0ac <__mcmp>
 8009966:	2800      	cmp	r0, #0
 8009968:	dc97      	bgt.n	800989a <_dtoa_r+0xaa2>
 800996a:	d102      	bne.n	8009972 <_dtoa_r+0xb7a>
 800996c:	f019 0f01 	tst.w	r9, #1
 8009970:	d193      	bne.n	800989a <_dtoa_r+0xaa2>
 8009972:	463b      	mov	r3, r7
 8009974:	461f      	mov	r7, r3
 8009976:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800997a:	2a30      	cmp	r2, #48	; 0x30
 800997c:	d0fa      	beq.n	8009974 <_dtoa_r+0xb7c>
 800997e:	e6e1      	b.n	8009744 <_dtoa_r+0x94c>
 8009980:	9a03      	ldr	r2, [sp, #12]
 8009982:	429a      	cmp	r2, r3
 8009984:	d18a      	bne.n	800989c <_dtoa_r+0xaa4>
 8009986:	2331      	movs	r3, #49	; 0x31
 8009988:	f10b 0b01 	add.w	fp, fp, #1
 800998c:	e797      	b.n	80098be <_dtoa_r+0xac6>
 800998e:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <_dtoa_r+0xbc0>)
 8009990:	f7ff ba9f 	b.w	8008ed2 <_dtoa_r+0xda>
 8009994:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009996:	2b00      	cmp	r3, #0
 8009998:	f47f aa77 	bne.w	8008e8a <_dtoa_r+0x92>
 800999c:	4b07      	ldr	r3, [pc, #28]	; (80099bc <_dtoa_r+0xbc4>)
 800999e:	f7ff ba98 	b.w	8008ed2 <_dtoa_r+0xda>
 80099a2:	9b06      	ldr	r3, [sp, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	dcb6      	bgt.n	8009916 <_dtoa_r+0xb1e>
 80099a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	f73f aeb5 	bgt.w	800971a <_dtoa_r+0x922>
 80099b0:	e7b1      	b.n	8009916 <_dtoa_r+0xb1e>
 80099b2:	bf00      	nop
 80099b4:	0800b414 	.word	0x0800b414
 80099b8:	0800b374 	.word	0x0800b374
 80099bc:	0800b398 	.word	0x0800b398

080099c0 <_free_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4605      	mov	r5, r0
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d040      	beq.n	8009a4a <_free_r+0x8a>
 80099c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099cc:	1f0c      	subs	r4, r1, #4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	bfb8      	it	lt
 80099d2:	18e4      	addlt	r4, r4, r3
 80099d4:	f000 f8e4 	bl	8009ba0 <__malloc_lock>
 80099d8:	4a1c      	ldr	r2, [pc, #112]	; (8009a4c <_free_r+0x8c>)
 80099da:	6813      	ldr	r3, [r2, #0]
 80099dc:	b933      	cbnz	r3, 80099ec <_free_r+0x2c>
 80099de:	6063      	str	r3, [r4, #4]
 80099e0:	6014      	str	r4, [r2, #0]
 80099e2:	4628      	mov	r0, r5
 80099e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099e8:	f000 b8e0 	b.w	8009bac <__malloc_unlock>
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	d908      	bls.n	8009a02 <_free_r+0x42>
 80099f0:	6820      	ldr	r0, [r4, #0]
 80099f2:	1821      	adds	r1, r4, r0
 80099f4:	428b      	cmp	r3, r1
 80099f6:	bf01      	itttt	eq
 80099f8:	6819      	ldreq	r1, [r3, #0]
 80099fa:	685b      	ldreq	r3, [r3, #4]
 80099fc:	1809      	addeq	r1, r1, r0
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	e7ed      	b.n	80099de <_free_r+0x1e>
 8009a02:	461a      	mov	r2, r3
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	b10b      	cbz	r3, 8009a0c <_free_r+0x4c>
 8009a08:	42a3      	cmp	r3, r4
 8009a0a:	d9fa      	bls.n	8009a02 <_free_r+0x42>
 8009a0c:	6811      	ldr	r1, [r2, #0]
 8009a0e:	1850      	adds	r0, r2, r1
 8009a10:	42a0      	cmp	r0, r4
 8009a12:	d10b      	bne.n	8009a2c <_free_r+0x6c>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	4401      	add	r1, r0
 8009a18:	1850      	adds	r0, r2, r1
 8009a1a:	4283      	cmp	r3, r0
 8009a1c:	6011      	str	r1, [r2, #0]
 8009a1e:	d1e0      	bne.n	80099e2 <_free_r+0x22>
 8009a20:	6818      	ldr	r0, [r3, #0]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	4408      	add	r0, r1
 8009a26:	6010      	str	r0, [r2, #0]
 8009a28:	6053      	str	r3, [r2, #4]
 8009a2a:	e7da      	b.n	80099e2 <_free_r+0x22>
 8009a2c:	d902      	bls.n	8009a34 <_free_r+0x74>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	602b      	str	r3, [r5, #0]
 8009a32:	e7d6      	b.n	80099e2 <_free_r+0x22>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	1821      	adds	r1, r4, r0
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf01      	itttt	eq
 8009a3c:	6819      	ldreq	r1, [r3, #0]
 8009a3e:	685b      	ldreq	r3, [r3, #4]
 8009a40:	1809      	addeq	r1, r1, r0
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	6063      	str	r3, [r4, #4]
 8009a46:	6054      	str	r4, [r2, #4]
 8009a48:	e7cb      	b.n	80099e2 <_free_r+0x22>
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	200005e8 	.word	0x200005e8

08009a50 <malloc>:
 8009a50:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <malloc+0xc>)
 8009a52:	4601      	mov	r1, r0
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f000 b823 	b.w	8009aa0 <_malloc_r>
 8009a5a:	bf00      	nop
 8009a5c:	2000007c 	.word	0x2000007c

08009a60 <sbrk_aligned>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4e0e      	ldr	r6, [pc, #56]	; (8009a9c <sbrk_aligned+0x3c>)
 8009a64:	460c      	mov	r4, r1
 8009a66:	6831      	ldr	r1, [r6, #0]
 8009a68:	4605      	mov	r5, r0
 8009a6a:	b911      	cbnz	r1, 8009a72 <sbrk_aligned+0x12>
 8009a6c:	f000 fe38 	bl	800a6e0 <_sbrk_r>
 8009a70:	6030      	str	r0, [r6, #0]
 8009a72:	4621      	mov	r1, r4
 8009a74:	4628      	mov	r0, r5
 8009a76:	f000 fe33 	bl	800a6e0 <_sbrk_r>
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	d00a      	beq.n	8009a94 <sbrk_aligned+0x34>
 8009a7e:	1cc4      	adds	r4, r0, #3
 8009a80:	f024 0403 	bic.w	r4, r4, #3
 8009a84:	42a0      	cmp	r0, r4
 8009a86:	d007      	beq.n	8009a98 <sbrk_aligned+0x38>
 8009a88:	1a21      	subs	r1, r4, r0
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 fe28 	bl	800a6e0 <_sbrk_r>
 8009a90:	3001      	adds	r0, #1
 8009a92:	d101      	bne.n	8009a98 <sbrk_aligned+0x38>
 8009a94:	f04f 34ff 	mov.w	r4, #4294967295
 8009a98:	4620      	mov	r0, r4
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	200005ec 	.word	0x200005ec

08009aa0 <_malloc_r>:
 8009aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009aa4:	1ccd      	adds	r5, r1, #3
 8009aa6:	f025 0503 	bic.w	r5, r5, #3
 8009aaa:	3508      	adds	r5, #8
 8009aac:	2d0c      	cmp	r5, #12
 8009aae:	bf38      	it	cc
 8009ab0:	250c      	movcc	r5, #12
 8009ab2:	2d00      	cmp	r5, #0
 8009ab4:	4607      	mov	r7, r0
 8009ab6:	db01      	blt.n	8009abc <_malloc_r+0x1c>
 8009ab8:	42a9      	cmp	r1, r5
 8009aba:	d905      	bls.n	8009ac8 <_malloc_r+0x28>
 8009abc:	230c      	movs	r3, #12
 8009abe:	2600      	movs	r6, #0
 8009ac0:	603b      	str	r3, [r7, #0]
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009b9c <_malloc_r+0xfc>
 8009acc:	f000 f868 	bl	8009ba0 <__malloc_lock>
 8009ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	bb5c      	cbnz	r4, 8009b30 <_malloc_r+0x90>
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4638      	mov	r0, r7
 8009adc:	f7ff ffc0 	bl	8009a60 <sbrk_aligned>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	d155      	bne.n	8009b92 <_malloc_r+0xf2>
 8009ae6:	f8d8 4000 	ldr.w	r4, [r8]
 8009aea:	4626      	mov	r6, r4
 8009aec:	2e00      	cmp	r6, #0
 8009aee:	d145      	bne.n	8009b7c <_malloc_r+0xdc>
 8009af0:	2c00      	cmp	r4, #0
 8009af2:	d048      	beq.n	8009b86 <_malloc_r+0xe6>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	4631      	mov	r1, r6
 8009af8:	4638      	mov	r0, r7
 8009afa:	eb04 0903 	add.w	r9, r4, r3
 8009afe:	f000 fdef 	bl	800a6e0 <_sbrk_r>
 8009b02:	4581      	cmp	r9, r0
 8009b04:	d13f      	bne.n	8009b86 <_malloc_r+0xe6>
 8009b06:	6821      	ldr	r1, [r4, #0]
 8009b08:	4638      	mov	r0, r7
 8009b0a:	1a6d      	subs	r5, r5, r1
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	f7ff ffa7 	bl	8009a60 <sbrk_aligned>
 8009b12:	3001      	adds	r0, #1
 8009b14:	d037      	beq.n	8009b86 <_malloc_r+0xe6>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	442b      	add	r3, r5
 8009b1a:	6023      	str	r3, [r4, #0]
 8009b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d038      	beq.n	8009b96 <_malloc_r+0xf6>
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	42a2      	cmp	r2, r4
 8009b28:	d12b      	bne.n	8009b82 <_malloc_r+0xe2>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	e00f      	b.n	8009b50 <_malloc_r+0xb0>
 8009b30:	6822      	ldr	r2, [r4, #0]
 8009b32:	1b52      	subs	r2, r2, r5
 8009b34:	d41f      	bmi.n	8009b76 <_malloc_r+0xd6>
 8009b36:	2a0b      	cmp	r2, #11
 8009b38:	d917      	bls.n	8009b6a <_malloc_r+0xca>
 8009b3a:	1961      	adds	r1, r4, r5
 8009b3c:	42a3      	cmp	r3, r4
 8009b3e:	6025      	str	r5, [r4, #0]
 8009b40:	bf18      	it	ne
 8009b42:	6059      	strne	r1, [r3, #4]
 8009b44:	6863      	ldr	r3, [r4, #4]
 8009b46:	bf08      	it	eq
 8009b48:	f8c8 1000 	streq.w	r1, [r8]
 8009b4c:	5162      	str	r2, [r4, r5]
 8009b4e:	604b      	str	r3, [r1, #4]
 8009b50:	4638      	mov	r0, r7
 8009b52:	f104 060b 	add.w	r6, r4, #11
 8009b56:	f000 f829 	bl	8009bac <__malloc_unlock>
 8009b5a:	f026 0607 	bic.w	r6, r6, #7
 8009b5e:	1d23      	adds	r3, r4, #4
 8009b60:	1af2      	subs	r2, r6, r3
 8009b62:	d0ae      	beq.n	8009ac2 <_malloc_r+0x22>
 8009b64:	1b9b      	subs	r3, r3, r6
 8009b66:	50a3      	str	r3, [r4, r2]
 8009b68:	e7ab      	b.n	8009ac2 <_malloc_r+0x22>
 8009b6a:	42a3      	cmp	r3, r4
 8009b6c:	6862      	ldr	r2, [r4, #4]
 8009b6e:	d1dd      	bne.n	8009b2c <_malloc_r+0x8c>
 8009b70:	f8c8 2000 	str.w	r2, [r8]
 8009b74:	e7ec      	b.n	8009b50 <_malloc_r+0xb0>
 8009b76:	4623      	mov	r3, r4
 8009b78:	6864      	ldr	r4, [r4, #4]
 8009b7a:	e7ac      	b.n	8009ad6 <_malloc_r+0x36>
 8009b7c:	4634      	mov	r4, r6
 8009b7e:	6876      	ldr	r6, [r6, #4]
 8009b80:	e7b4      	b.n	8009aec <_malloc_r+0x4c>
 8009b82:	4613      	mov	r3, r2
 8009b84:	e7cc      	b.n	8009b20 <_malloc_r+0x80>
 8009b86:	230c      	movs	r3, #12
 8009b88:	4638      	mov	r0, r7
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	f000 f80e 	bl	8009bac <__malloc_unlock>
 8009b90:	e797      	b.n	8009ac2 <_malloc_r+0x22>
 8009b92:	6025      	str	r5, [r4, #0]
 8009b94:	e7dc      	b.n	8009b50 <_malloc_r+0xb0>
 8009b96:	605b      	str	r3, [r3, #4]
 8009b98:	deff      	udf	#255	; 0xff
 8009b9a:	bf00      	nop
 8009b9c:	200005e8 	.word	0x200005e8

08009ba0 <__malloc_lock>:
 8009ba0:	4801      	ldr	r0, [pc, #4]	; (8009ba8 <__malloc_lock+0x8>)
 8009ba2:	f7ff b88d 	b.w	8008cc0 <__retarget_lock_acquire_recursive>
 8009ba6:	bf00      	nop
 8009ba8:	200005e4 	.word	0x200005e4

08009bac <__malloc_unlock>:
 8009bac:	4801      	ldr	r0, [pc, #4]	; (8009bb4 <__malloc_unlock+0x8>)
 8009bae:	f7ff b888 	b.w	8008cc2 <__retarget_lock_release_recursive>
 8009bb2:	bf00      	nop
 8009bb4:	200005e4 	.word	0x200005e4

08009bb8 <_Balloc>:
 8009bb8:	b570      	push	{r4, r5, r6, lr}
 8009bba:	69c6      	ldr	r6, [r0, #28]
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	460d      	mov	r5, r1
 8009bc0:	b976      	cbnz	r6, 8009be0 <_Balloc+0x28>
 8009bc2:	2010      	movs	r0, #16
 8009bc4:	f7ff ff44 	bl	8009a50 <malloc>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	61e0      	str	r0, [r4, #28]
 8009bcc:	b920      	cbnz	r0, 8009bd8 <_Balloc+0x20>
 8009bce:	216b      	movs	r1, #107	; 0x6b
 8009bd0:	4b17      	ldr	r3, [pc, #92]	; (8009c30 <_Balloc+0x78>)
 8009bd2:	4818      	ldr	r0, [pc, #96]	; (8009c34 <_Balloc+0x7c>)
 8009bd4:	f000 fda2 	bl	800a71c <__assert_func>
 8009bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bdc:	6006      	str	r6, [r0, #0]
 8009bde:	60c6      	str	r6, [r0, #12]
 8009be0:	69e6      	ldr	r6, [r4, #28]
 8009be2:	68f3      	ldr	r3, [r6, #12]
 8009be4:	b183      	cbz	r3, 8009c08 <_Balloc+0x50>
 8009be6:	69e3      	ldr	r3, [r4, #28]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bee:	b9b8      	cbnz	r0, 8009c20 <_Balloc+0x68>
 8009bf0:	2101      	movs	r1, #1
 8009bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8009bf6:	1d72      	adds	r2, r6, #5
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	0092      	lsls	r2, r2, #2
 8009bfc:	f000 fdac 	bl	800a758 <_calloc_r>
 8009c00:	b160      	cbz	r0, 8009c1c <_Balloc+0x64>
 8009c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c06:	e00e      	b.n	8009c26 <_Balloc+0x6e>
 8009c08:	2221      	movs	r2, #33	; 0x21
 8009c0a:	2104      	movs	r1, #4
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	f000 fda3 	bl	800a758 <_calloc_r>
 8009c12:	69e3      	ldr	r3, [r4, #28]
 8009c14:	60f0      	str	r0, [r6, #12]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1e4      	bne.n	8009be6 <_Balloc+0x2e>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	bd70      	pop	{r4, r5, r6, pc}
 8009c20:	6802      	ldr	r2, [r0, #0]
 8009c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c26:	2300      	movs	r3, #0
 8009c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c2c:	e7f7      	b.n	8009c1e <_Balloc+0x66>
 8009c2e:	bf00      	nop
 8009c30:	0800b3a5 	.word	0x0800b3a5
 8009c34:	0800b425 	.word	0x0800b425

08009c38 <_Bfree>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	69c6      	ldr	r6, [r0, #28]
 8009c3c:	4605      	mov	r5, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	b976      	cbnz	r6, 8009c60 <_Bfree+0x28>
 8009c42:	2010      	movs	r0, #16
 8009c44:	f7ff ff04 	bl	8009a50 <malloc>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	61e8      	str	r0, [r5, #28]
 8009c4c:	b920      	cbnz	r0, 8009c58 <_Bfree+0x20>
 8009c4e:	218f      	movs	r1, #143	; 0x8f
 8009c50:	4b08      	ldr	r3, [pc, #32]	; (8009c74 <_Bfree+0x3c>)
 8009c52:	4809      	ldr	r0, [pc, #36]	; (8009c78 <_Bfree+0x40>)
 8009c54:	f000 fd62 	bl	800a71c <__assert_func>
 8009c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c5c:	6006      	str	r6, [r0, #0]
 8009c5e:	60c6      	str	r6, [r0, #12]
 8009c60:	b13c      	cbz	r4, 8009c72 <_Bfree+0x3a>
 8009c62:	69eb      	ldr	r3, [r5, #28]
 8009c64:	6862      	ldr	r2, [r4, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c6c:	6021      	str	r1, [r4, #0]
 8009c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c72:	bd70      	pop	{r4, r5, r6, pc}
 8009c74:	0800b3a5 	.word	0x0800b3a5
 8009c78:	0800b425 	.word	0x0800b425

08009c7c <__multadd>:
 8009c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c80:	4607      	mov	r7, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	461e      	mov	r6, r3
 8009c86:	2000      	movs	r0, #0
 8009c88:	690d      	ldr	r5, [r1, #16]
 8009c8a:	f101 0c14 	add.w	ip, r1, #20
 8009c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c92:	3001      	adds	r0, #1
 8009c94:	b299      	uxth	r1, r3
 8009c96:	fb02 6101 	mla	r1, r2, r1, r6
 8009c9a:	0c1e      	lsrs	r6, r3, #16
 8009c9c:	0c0b      	lsrs	r3, r1, #16
 8009c9e:	fb02 3306 	mla	r3, r2, r6, r3
 8009ca2:	b289      	uxth	r1, r1
 8009ca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ca8:	4285      	cmp	r5, r0
 8009caa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cae:	f84c 1b04 	str.w	r1, [ip], #4
 8009cb2:	dcec      	bgt.n	8009c8e <__multadd+0x12>
 8009cb4:	b30e      	cbz	r6, 8009cfa <__multadd+0x7e>
 8009cb6:	68a3      	ldr	r3, [r4, #8]
 8009cb8:	42ab      	cmp	r3, r5
 8009cba:	dc19      	bgt.n	8009cf0 <__multadd+0x74>
 8009cbc:	6861      	ldr	r1, [r4, #4]
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	3101      	adds	r1, #1
 8009cc2:	f7ff ff79 	bl	8009bb8 <_Balloc>
 8009cc6:	4680      	mov	r8, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <__multadd+0x5a>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	21ba      	movs	r1, #186	; 0xba
 8009cce:	4b0c      	ldr	r3, [pc, #48]	; (8009d00 <__multadd+0x84>)
 8009cd0:	480c      	ldr	r0, [pc, #48]	; (8009d04 <__multadd+0x88>)
 8009cd2:	f000 fd23 	bl	800a71c <__assert_func>
 8009cd6:	6922      	ldr	r2, [r4, #16]
 8009cd8:	f104 010c 	add.w	r1, r4, #12
 8009cdc:	3202      	adds	r2, #2
 8009cde:	0092      	lsls	r2, r2, #2
 8009ce0:	300c      	adds	r0, #12
 8009ce2:	f000 fd0d 	bl	800a700 <memcpy>
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff ffa5 	bl	8009c38 <_Bfree>
 8009cee:	4644      	mov	r4, r8
 8009cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	615e      	str	r6, [r3, #20]
 8009cf8:	6125      	str	r5, [r4, #16]
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d00:	0800b414 	.word	0x0800b414
 8009d04:	0800b425 	.word	0x0800b425

08009d08 <__hi0bits>:
 8009d08:	0c02      	lsrs	r2, r0, #16
 8009d0a:	0412      	lsls	r2, r2, #16
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	b9ca      	cbnz	r2, 8009d44 <__hi0bits+0x3c>
 8009d10:	0403      	lsls	r3, r0, #16
 8009d12:	2010      	movs	r0, #16
 8009d14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d18:	bf04      	itt	eq
 8009d1a:	021b      	lsleq	r3, r3, #8
 8009d1c:	3008      	addeq	r0, #8
 8009d1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d22:	bf04      	itt	eq
 8009d24:	011b      	lsleq	r3, r3, #4
 8009d26:	3004      	addeq	r0, #4
 8009d28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d2c:	bf04      	itt	eq
 8009d2e:	009b      	lsleq	r3, r3, #2
 8009d30:	3002      	addeq	r0, #2
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	db05      	blt.n	8009d42 <__hi0bits+0x3a>
 8009d36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009d3a:	f100 0001 	add.w	r0, r0, #1
 8009d3e:	bf08      	it	eq
 8009d40:	2020      	moveq	r0, #32
 8009d42:	4770      	bx	lr
 8009d44:	2000      	movs	r0, #0
 8009d46:	e7e5      	b.n	8009d14 <__hi0bits+0xc>

08009d48 <__lo0bits>:
 8009d48:	6803      	ldr	r3, [r0, #0]
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	f013 0007 	ands.w	r0, r3, #7
 8009d50:	d00b      	beq.n	8009d6a <__lo0bits+0x22>
 8009d52:	07d9      	lsls	r1, r3, #31
 8009d54:	d421      	bmi.n	8009d9a <__lo0bits+0x52>
 8009d56:	0798      	lsls	r0, r3, #30
 8009d58:	bf49      	itett	mi
 8009d5a:	085b      	lsrmi	r3, r3, #1
 8009d5c:	089b      	lsrpl	r3, r3, #2
 8009d5e:	2001      	movmi	r0, #1
 8009d60:	6013      	strmi	r3, [r2, #0]
 8009d62:	bf5c      	itt	pl
 8009d64:	2002      	movpl	r0, #2
 8009d66:	6013      	strpl	r3, [r2, #0]
 8009d68:	4770      	bx	lr
 8009d6a:	b299      	uxth	r1, r3
 8009d6c:	b909      	cbnz	r1, 8009d72 <__lo0bits+0x2a>
 8009d6e:	2010      	movs	r0, #16
 8009d70:	0c1b      	lsrs	r3, r3, #16
 8009d72:	b2d9      	uxtb	r1, r3
 8009d74:	b909      	cbnz	r1, 8009d7a <__lo0bits+0x32>
 8009d76:	3008      	adds	r0, #8
 8009d78:	0a1b      	lsrs	r3, r3, #8
 8009d7a:	0719      	lsls	r1, r3, #28
 8009d7c:	bf04      	itt	eq
 8009d7e:	091b      	lsreq	r3, r3, #4
 8009d80:	3004      	addeq	r0, #4
 8009d82:	0799      	lsls	r1, r3, #30
 8009d84:	bf04      	itt	eq
 8009d86:	089b      	lsreq	r3, r3, #2
 8009d88:	3002      	addeq	r0, #2
 8009d8a:	07d9      	lsls	r1, r3, #31
 8009d8c:	d403      	bmi.n	8009d96 <__lo0bits+0x4e>
 8009d8e:	085b      	lsrs	r3, r3, #1
 8009d90:	f100 0001 	add.w	r0, r0, #1
 8009d94:	d003      	beq.n	8009d9e <__lo0bits+0x56>
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	4770      	bx	lr
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	4770      	bx	lr
 8009d9e:	2020      	movs	r0, #32
 8009da0:	4770      	bx	lr
	...

08009da4 <__i2b>:
 8009da4:	b510      	push	{r4, lr}
 8009da6:	460c      	mov	r4, r1
 8009da8:	2101      	movs	r1, #1
 8009daa:	f7ff ff05 	bl	8009bb8 <_Balloc>
 8009dae:	4602      	mov	r2, r0
 8009db0:	b928      	cbnz	r0, 8009dbe <__i2b+0x1a>
 8009db2:	f240 1145 	movw	r1, #325	; 0x145
 8009db6:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <__i2b+0x24>)
 8009db8:	4804      	ldr	r0, [pc, #16]	; (8009dcc <__i2b+0x28>)
 8009dba:	f000 fcaf 	bl	800a71c <__assert_func>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	6144      	str	r4, [r0, #20]
 8009dc2:	6103      	str	r3, [r0, #16]
 8009dc4:	bd10      	pop	{r4, pc}
 8009dc6:	bf00      	nop
 8009dc8:	0800b414 	.word	0x0800b414
 8009dcc:	0800b425 	.word	0x0800b425

08009dd0 <__multiply>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	4691      	mov	r9, r2
 8009dd6:	690a      	ldr	r2, [r1, #16]
 8009dd8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ddc:	460c      	mov	r4, r1
 8009dde:	429a      	cmp	r2, r3
 8009de0:	bfbe      	ittt	lt
 8009de2:	460b      	movlt	r3, r1
 8009de4:	464c      	movlt	r4, r9
 8009de6:	4699      	movlt	r9, r3
 8009de8:	6927      	ldr	r7, [r4, #16]
 8009dea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009dee:	68a3      	ldr	r3, [r4, #8]
 8009df0:	6861      	ldr	r1, [r4, #4]
 8009df2:	eb07 060a 	add.w	r6, r7, sl
 8009df6:	42b3      	cmp	r3, r6
 8009df8:	b085      	sub	sp, #20
 8009dfa:	bfb8      	it	lt
 8009dfc:	3101      	addlt	r1, #1
 8009dfe:	f7ff fedb 	bl	8009bb8 <_Balloc>
 8009e02:	b930      	cbnz	r0, 8009e12 <__multiply+0x42>
 8009e04:	4602      	mov	r2, r0
 8009e06:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009e0a:	4b43      	ldr	r3, [pc, #268]	; (8009f18 <__multiply+0x148>)
 8009e0c:	4843      	ldr	r0, [pc, #268]	; (8009f1c <__multiply+0x14c>)
 8009e0e:	f000 fc85 	bl	800a71c <__assert_func>
 8009e12:	f100 0514 	add.w	r5, r0, #20
 8009e16:	462b      	mov	r3, r5
 8009e18:	2200      	movs	r2, #0
 8009e1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e1e:	4543      	cmp	r3, r8
 8009e20:	d321      	bcc.n	8009e66 <__multiply+0x96>
 8009e22:	f104 0314 	add.w	r3, r4, #20
 8009e26:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e2a:	f109 0314 	add.w	r3, r9, #20
 8009e2e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e32:	9202      	str	r2, [sp, #8]
 8009e34:	1b3a      	subs	r2, r7, r4
 8009e36:	3a15      	subs	r2, #21
 8009e38:	f022 0203 	bic.w	r2, r2, #3
 8009e3c:	3204      	adds	r2, #4
 8009e3e:	f104 0115 	add.w	r1, r4, #21
 8009e42:	428f      	cmp	r7, r1
 8009e44:	bf38      	it	cc
 8009e46:	2204      	movcc	r2, #4
 8009e48:	9201      	str	r2, [sp, #4]
 8009e4a:	9a02      	ldr	r2, [sp, #8]
 8009e4c:	9303      	str	r3, [sp, #12]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d80c      	bhi.n	8009e6c <__multiply+0x9c>
 8009e52:	2e00      	cmp	r6, #0
 8009e54:	dd03      	ble.n	8009e5e <__multiply+0x8e>
 8009e56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d05a      	beq.n	8009f14 <__multiply+0x144>
 8009e5e:	6106      	str	r6, [r0, #16]
 8009e60:	b005      	add	sp, #20
 8009e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e66:	f843 2b04 	str.w	r2, [r3], #4
 8009e6a:	e7d8      	b.n	8009e1e <__multiply+0x4e>
 8009e6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e70:	f1ba 0f00 	cmp.w	sl, #0
 8009e74:	d023      	beq.n	8009ebe <__multiply+0xee>
 8009e76:	46a9      	mov	r9, r5
 8009e78:	f04f 0c00 	mov.w	ip, #0
 8009e7c:	f104 0e14 	add.w	lr, r4, #20
 8009e80:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e84:	f8d9 1000 	ldr.w	r1, [r9]
 8009e88:	fa1f fb82 	uxth.w	fp, r2
 8009e8c:	b289      	uxth	r1, r1
 8009e8e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e92:	4461      	add	r1, ip
 8009e94:	f8d9 c000 	ldr.w	ip, [r9]
 8009e98:	0c12      	lsrs	r2, r2, #16
 8009e9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009e9e:	fb0a c202 	mla	r2, sl, r2, ip
 8009ea2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ea6:	b289      	uxth	r1, r1
 8009ea8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009eac:	4577      	cmp	r7, lr
 8009eae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009eb2:	f849 1b04 	str.w	r1, [r9], #4
 8009eb6:	d8e3      	bhi.n	8009e80 <__multiply+0xb0>
 8009eb8:	9a01      	ldr	r2, [sp, #4]
 8009eba:	f845 c002 	str.w	ip, [r5, r2]
 8009ebe:	9a03      	ldr	r2, [sp, #12]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ec6:	f1b9 0f00 	cmp.w	r9, #0
 8009eca:	d021      	beq.n	8009f10 <__multiply+0x140>
 8009ecc:	46ae      	mov	lr, r5
 8009ece:	f04f 0a00 	mov.w	sl, #0
 8009ed2:	6829      	ldr	r1, [r5, #0]
 8009ed4:	f104 0c14 	add.w	ip, r4, #20
 8009ed8:	f8bc b000 	ldrh.w	fp, [ip]
 8009edc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ee0:	b289      	uxth	r1, r1
 8009ee2:	fb09 220b 	mla	r2, r9, fp, r2
 8009ee6:	4452      	add	r2, sl
 8009ee8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009eec:	f84e 1b04 	str.w	r1, [lr], #4
 8009ef0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009ef4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ef8:	f8be 1000 	ldrh.w	r1, [lr]
 8009efc:	4567      	cmp	r7, ip
 8009efe:	fb09 110a 	mla	r1, r9, sl, r1
 8009f02:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009f06:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f0a:	d8e5      	bhi.n	8009ed8 <__multiply+0x108>
 8009f0c:	9a01      	ldr	r2, [sp, #4]
 8009f0e:	50a9      	str	r1, [r5, r2]
 8009f10:	3504      	adds	r5, #4
 8009f12:	e79a      	b.n	8009e4a <__multiply+0x7a>
 8009f14:	3e01      	subs	r6, #1
 8009f16:	e79c      	b.n	8009e52 <__multiply+0x82>
 8009f18:	0800b414 	.word	0x0800b414
 8009f1c:	0800b425 	.word	0x0800b425

08009f20 <__pow5mult>:
 8009f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f24:	4615      	mov	r5, r2
 8009f26:	f012 0203 	ands.w	r2, r2, #3
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460f      	mov	r7, r1
 8009f2e:	d007      	beq.n	8009f40 <__pow5mult+0x20>
 8009f30:	4c25      	ldr	r4, [pc, #148]	; (8009fc8 <__pow5mult+0xa8>)
 8009f32:	3a01      	subs	r2, #1
 8009f34:	2300      	movs	r3, #0
 8009f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f3a:	f7ff fe9f 	bl	8009c7c <__multadd>
 8009f3e:	4607      	mov	r7, r0
 8009f40:	10ad      	asrs	r5, r5, #2
 8009f42:	d03d      	beq.n	8009fc0 <__pow5mult+0xa0>
 8009f44:	69f4      	ldr	r4, [r6, #28]
 8009f46:	b97c      	cbnz	r4, 8009f68 <__pow5mult+0x48>
 8009f48:	2010      	movs	r0, #16
 8009f4a:	f7ff fd81 	bl	8009a50 <malloc>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	61f0      	str	r0, [r6, #28]
 8009f52:	b928      	cbnz	r0, 8009f60 <__pow5mult+0x40>
 8009f54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009f58:	4b1c      	ldr	r3, [pc, #112]	; (8009fcc <__pow5mult+0xac>)
 8009f5a:	481d      	ldr	r0, [pc, #116]	; (8009fd0 <__pow5mult+0xb0>)
 8009f5c:	f000 fbde 	bl	800a71c <__assert_func>
 8009f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f64:	6004      	str	r4, [r0, #0]
 8009f66:	60c4      	str	r4, [r0, #12]
 8009f68:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009f6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f70:	b94c      	cbnz	r4, 8009f86 <__pow5mult+0x66>
 8009f72:	f240 2171 	movw	r1, #625	; 0x271
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7ff ff14 	bl	8009da4 <__i2b>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f84:	6003      	str	r3, [r0, #0]
 8009f86:	f04f 0900 	mov.w	r9, #0
 8009f8a:	07eb      	lsls	r3, r5, #31
 8009f8c:	d50a      	bpl.n	8009fa4 <__pow5mult+0x84>
 8009f8e:	4639      	mov	r1, r7
 8009f90:	4622      	mov	r2, r4
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff ff1c 	bl	8009dd0 <__multiply>
 8009f98:	4680      	mov	r8, r0
 8009f9a:	4639      	mov	r1, r7
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f7ff fe4b 	bl	8009c38 <_Bfree>
 8009fa2:	4647      	mov	r7, r8
 8009fa4:	106d      	asrs	r5, r5, #1
 8009fa6:	d00b      	beq.n	8009fc0 <__pow5mult+0xa0>
 8009fa8:	6820      	ldr	r0, [r4, #0]
 8009faa:	b938      	cbnz	r0, 8009fbc <__pow5mult+0x9c>
 8009fac:	4622      	mov	r2, r4
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7ff ff0d 	bl	8009dd0 <__multiply>
 8009fb6:	6020      	str	r0, [r4, #0]
 8009fb8:	f8c0 9000 	str.w	r9, [r0]
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	e7e4      	b.n	8009f8a <__pow5mult+0x6a>
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fc6:	bf00      	nop
 8009fc8:	0800b570 	.word	0x0800b570
 8009fcc:	0800b3a5 	.word	0x0800b3a5
 8009fd0:	0800b425 	.word	0x0800b425

08009fd4 <__lshift>:
 8009fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	460c      	mov	r4, r1
 8009fda:	4607      	mov	r7, r0
 8009fdc:	4691      	mov	r9, r2
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	6849      	ldr	r1, [r1, #4]
 8009fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fec:	f108 0601 	add.w	r6, r8, #1
 8009ff0:	42b3      	cmp	r3, r6
 8009ff2:	db0b      	blt.n	800a00c <__lshift+0x38>
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff fddf 	bl	8009bb8 <_Balloc>
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	b948      	cbnz	r0, 800a012 <__lshift+0x3e>
 8009ffe:	4602      	mov	r2, r0
 800a000:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a004:	4b27      	ldr	r3, [pc, #156]	; (800a0a4 <__lshift+0xd0>)
 800a006:	4828      	ldr	r0, [pc, #160]	; (800a0a8 <__lshift+0xd4>)
 800a008:	f000 fb88 	bl	800a71c <__assert_func>
 800a00c:	3101      	adds	r1, #1
 800a00e:	005b      	lsls	r3, r3, #1
 800a010:	e7ee      	b.n	8009ff0 <__lshift+0x1c>
 800a012:	2300      	movs	r3, #0
 800a014:	f100 0114 	add.w	r1, r0, #20
 800a018:	f100 0210 	add.w	r2, r0, #16
 800a01c:	4618      	mov	r0, r3
 800a01e:	4553      	cmp	r3, sl
 800a020:	db33      	blt.n	800a08a <__lshift+0xb6>
 800a022:	6920      	ldr	r0, [r4, #16]
 800a024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a028:	f104 0314 	add.w	r3, r4, #20
 800a02c:	f019 091f 	ands.w	r9, r9, #31
 800a030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a038:	d02b      	beq.n	800a092 <__lshift+0xbe>
 800a03a:	468a      	mov	sl, r1
 800a03c:	2200      	movs	r2, #0
 800a03e:	f1c9 0e20 	rsb	lr, r9, #32
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	fa00 f009 	lsl.w	r0, r0, r9
 800a048:	4310      	orrs	r0, r2
 800a04a:	f84a 0b04 	str.w	r0, [sl], #4
 800a04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a052:	459c      	cmp	ip, r3
 800a054:	fa22 f20e 	lsr.w	r2, r2, lr
 800a058:	d8f3      	bhi.n	800a042 <__lshift+0x6e>
 800a05a:	ebac 0304 	sub.w	r3, ip, r4
 800a05e:	3b15      	subs	r3, #21
 800a060:	f023 0303 	bic.w	r3, r3, #3
 800a064:	3304      	adds	r3, #4
 800a066:	f104 0015 	add.w	r0, r4, #21
 800a06a:	4584      	cmp	ip, r0
 800a06c:	bf38      	it	cc
 800a06e:	2304      	movcc	r3, #4
 800a070:	50ca      	str	r2, [r1, r3]
 800a072:	b10a      	cbz	r2, 800a078 <__lshift+0xa4>
 800a074:	f108 0602 	add.w	r6, r8, #2
 800a078:	3e01      	subs	r6, #1
 800a07a:	4638      	mov	r0, r7
 800a07c:	4621      	mov	r1, r4
 800a07e:	612e      	str	r6, [r5, #16]
 800a080:	f7ff fdda 	bl	8009c38 <_Bfree>
 800a084:	4628      	mov	r0, r5
 800a086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a08e:	3301      	adds	r3, #1
 800a090:	e7c5      	b.n	800a01e <__lshift+0x4a>
 800a092:	3904      	subs	r1, #4
 800a094:	f853 2b04 	ldr.w	r2, [r3], #4
 800a098:	459c      	cmp	ip, r3
 800a09a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a09e:	d8f9      	bhi.n	800a094 <__lshift+0xc0>
 800a0a0:	e7ea      	b.n	800a078 <__lshift+0xa4>
 800a0a2:	bf00      	nop
 800a0a4:	0800b414 	.word	0x0800b414
 800a0a8:	0800b425 	.word	0x0800b425

0800a0ac <__mcmp>:
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	690a      	ldr	r2, [r1, #16]
 800a0b0:	6900      	ldr	r0, [r0, #16]
 800a0b2:	b530      	push	{r4, r5, lr}
 800a0b4:	1a80      	subs	r0, r0, r2
 800a0b6:	d10d      	bne.n	800a0d4 <__mcmp+0x28>
 800a0b8:	3314      	adds	r3, #20
 800a0ba:	3114      	adds	r1, #20
 800a0bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0cc:	4295      	cmp	r5, r2
 800a0ce:	d002      	beq.n	800a0d6 <__mcmp+0x2a>
 800a0d0:	d304      	bcc.n	800a0dc <__mcmp+0x30>
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	bd30      	pop	{r4, r5, pc}
 800a0d6:	42a3      	cmp	r3, r4
 800a0d8:	d3f4      	bcc.n	800a0c4 <__mcmp+0x18>
 800a0da:	e7fb      	b.n	800a0d4 <__mcmp+0x28>
 800a0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e0:	e7f8      	b.n	800a0d4 <__mcmp+0x28>
	...

0800a0e4 <__mdiff>:
 800a0e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	4614      	mov	r4, r2
 800a0f2:	f7ff ffdb 	bl	800a0ac <__mcmp>
 800a0f6:	1e06      	subs	r6, r0, #0
 800a0f8:	d111      	bne.n	800a11e <__mdiff+0x3a>
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4638      	mov	r0, r7
 800a0fe:	f7ff fd5b 	bl	8009bb8 <_Balloc>
 800a102:	4602      	mov	r2, r0
 800a104:	b928      	cbnz	r0, 800a112 <__mdiff+0x2e>
 800a106:	f240 2137 	movw	r1, #567	; 0x237
 800a10a:	4b3a      	ldr	r3, [pc, #232]	; (800a1f4 <__mdiff+0x110>)
 800a10c:	483a      	ldr	r0, [pc, #232]	; (800a1f8 <__mdiff+0x114>)
 800a10e:	f000 fb05 	bl	800a71c <__assert_func>
 800a112:	2301      	movs	r3, #1
 800a114:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a118:	4610      	mov	r0, r2
 800a11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11e:	bfa4      	itt	ge
 800a120:	4623      	movge	r3, r4
 800a122:	462c      	movge	r4, r5
 800a124:	4638      	mov	r0, r7
 800a126:	6861      	ldr	r1, [r4, #4]
 800a128:	bfa6      	itte	ge
 800a12a:	461d      	movge	r5, r3
 800a12c:	2600      	movge	r6, #0
 800a12e:	2601      	movlt	r6, #1
 800a130:	f7ff fd42 	bl	8009bb8 <_Balloc>
 800a134:	4602      	mov	r2, r0
 800a136:	b918      	cbnz	r0, 800a140 <__mdiff+0x5c>
 800a138:	f240 2145 	movw	r1, #581	; 0x245
 800a13c:	4b2d      	ldr	r3, [pc, #180]	; (800a1f4 <__mdiff+0x110>)
 800a13e:	e7e5      	b.n	800a10c <__mdiff+0x28>
 800a140:	f102 0814 	add.w	r8, r2, #20
 800a144:	46c2      	mov	sl, r8
 800a146:	f04f 0c00 	mov.w	ip, #0
 800a14a:	6927      	ldr	r7, [r4, #16]
 800a14c:	60c6      	str	r6, [r0, #12]
 800a14e:	692e      	ldr	r6, [r5, #16]
 800a150:	f104 0014 	add.w	r0, r4, #20
 800a154:	f105 0914 	add.w	r9, r5, #20
 800a158:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a15c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a160:	3410      	adds	r4, #16
 800a162:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a166:	f859 3b04 	ldr.w	r3, [r9], #4
 800a16a:	fa1f f18b 	uxth.w	r1, fp
 800a16e:	4461      	add	r1, ip
 800a170:	fa1f fc83 	uxth.w	ip, r3
 800a174:	0c1b      	lsrs	r3, r3, #16
 800a176:	eba1 010c 	sub.w	r1, r1, ip
 800a17a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a17e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a182:	b289      	uxth	r1, r1
 800a184:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a188:	454e      	cmp	r6, r9
 800a18a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a18e:	f84a 1b04 	str.w	r1, [sl], #4
 800a192:	d8e6      	bhi.n	800a162 <__mdiff+0x7e>
 800a194:	1b73      	subs	r3, r6, r5
 800a196:	3b15      	subs	r3, #21
 800a198:	f023 0303 	bic.w	r3, r3, #3
 800a19c:	3515      	adds	r5, #21
 800a19e:	3304      	adds	r3, #4
 800a1a0:	42ae      	cmp	r6, r5
 800a1a2:	bf38      	it	cc
 800a1a4:	2304      	movcc	r3, #4
 800a1a6:	4418      	add	r0, r3
 800a1a8:	4443      	add	r3, r8
 800a1aa:	461e      	mov	r6, r3
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	4575      	cmp	r5, lr
 800a1b0:	d30e      	bcc.n	800a1d0 <__mdiff+0xec>
 800a1b2:	f10e 0103 	add.w	r1, lr, #3
 800a1b6:	1a09      	subs	r1, r1, r0
 800a1b8:	f021 0103 	bic.w	r1, r1, #3
 800a1bc:	3803      	subs	r0, #3
 800a1be:	4586      	cmp	lr, r0
 800a1c0:	bf38      	it	cc
 800a1c2:	2100      	movcc	r1, #0
 800a1c4:	440b      	add	r3, r1
 800a1c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1ca:	b189      	cbz	r1, 800a1f0 <__mdiff+0x10c>
 800a1cc:	6117      	str	r7, [r2, #16]
 800a1ce:	e7a3      	b.n	800a118 <__mdiff+0x34>
 800a1d0:	f855 8b04 	ldr.w	r8, [r5], #4
 800a1d4:	fa1f f188 	uxth.w	r1, r8
 800a1d8:	4461      	add	r1, ip
 800a1da:	140c      	asrs	r4, r1, #16
 800a1dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1e0:	b289      	uxth	r1, r1
 800a1e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a1e6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a1ea:	f846 1b04 	str.w	r1, [r6], #4
 800a1ee:	e7de      	b.n	800a1ae <__mdiff+0xca>
 800a1f0:	3f01      	subs	r7, #1
 800a1f2:	e7e8      	b.n	800a1c6 <__mdiff+0xe2>
 800a1f4:	0800b414 	.word	0x0800b414
 800a1f8:	0800b425 	.word	0x0800b425

0800a1fc <__d2b>:
 800a1fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1fe:	2101      	movs	r1, #1
 800a200:	4617      	mov	r7, r2
 800a202:	461c      	mov	r4, r3
 800a204:	9e08      	ldr	r6, [sp, #32]
 800a206:	f7ff fcd7 	bl	8009bb8 <_Balloc>
 800a20a:	4605      	mov	r5, r0
 800a20c:	b930      	cbnz	r0, 800a21c <__d2b+0x20>
 800a20e:	4602      	mov	r2, r0
 800a210:	f240 310f 	movw	r1, #783	; 0x30f
 800a214:	4b22      	ldr	r3, [pc, #136]	; (800a2a0 <__d2b+0xa4>)
 800a216:	4823      	ldr	r0, [pc, #140]	; (800a2a4 <__d2b+0xa8>)
 800a218:	f000 fa80 	bl	800a71c <__assert_func>
 800a21c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a220:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a224:	bb24      	cbnz	r4, 800a270 <__d2b+0x74>
 800a226:	2f00      	cmp	r7, #0
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	d026      	beq.n	800a27a <__d2b+0x7e>
 800a22c:	4668      	mov	r0, sp
 800a22e:	9700      	str	r7, [sp, #0]
 800a230:	f7ff fd8a 	bl	8009d48 <__lo0bits>
 800a234:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a238:	b1e8      	cbz	r0, 800a276 <__d2b+0x7a>
 800a23a:	f1c0 0320 	rsb	r3, r0, #32
 800a23e:	fa02 f303 	lsl.w	r3, r2, r3
 800a242:	430b      	orrs	r3, r1
 800a244:	40c2      	lsrs	r2, r0
 800a246:	616b      	str	r3, [r5, #20]
 800a248:	9201      	str	r2, [sp, #4]
 800a24a:	9b01      	ldr	r3, [sp, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	bf14      	ite	ne
 800a250:	2102      	movne	r1, #2
 800a252:	2101      	moveq	r1, #1
 800a254:	61ab      	str	r3, [r5, #24]
 800a256:	6129      	str	r1, [r5, #16]
 800a258:	b1bc      	cbz	r4, 800a28a <__d2b+0x8e>
 800a25a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a25e:	4404      	add	r4, r0
 800a260:	6034      	str	r4, [r6, #0]
 800a262:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a268:	6018      	str	r0, [r3, #0]
 800a26a:	4628      	mov	r0, r5
 800a26c:	b003      	add	sp, #12
 800a26e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a270:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a274:	e7d7      	b.n	800a226 <__d2b+0x2a>
 800a276:	6169      	str	r1, [r5, #20]
 800a278:	e7e7      	b.n	800a24a <__d2b+0x4e>
 800a27a:	a801      	add	r0, sp, #4
 800a27c:	f7ff fd64 	bl	8009d48 <__lo0bits>
 800a280:	9b01      	ldr	r3, [sp, #4]
 800a282:	2101      	movs	r1, #1
 800a284:	616b      	str	r3, [r5, #20]
 800a286:	3020      	adds	r0, #32
 800a288:	e7e5      	b.n	800a256 <__d2b+0x5a>
 800a28a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a28e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a292:	6030      	str	r0, [r6, #0]
 800a294:	6918      	ldr	r0, [r3, #16]
 800a296:	f7ff fd37 	bl	8009d08 <__hi0bits>
 800a29a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a29e:	e7e2      	b.n	800a266 <__d2b+0x6a>
 800a2a0:	0800b414 	.word	0x0800b414
 800a2a4:	0800b425 	.word	0x0800b425

0800a2a8 <__ssputs_r>:
 800a2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ac:	461f      	mov	r7, r3
 800a2ae:	688e      	ldr	r6, [r1, #8]
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	42be      	cmp	r6, r7
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	4690      	mov	r8, r2
 800a2b8:	680b      	ldr	r3, [r1, #0]
 800a2ba:	d82c      	bhi.n	800a316 <__ssputs_r+0x6e>
 800a2bc:	898a      	ldrh	r2, [r1, #12]
 800a2be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2c2:	d026      	beq.n	800a312 <__ssputs_r+0x6a>
 800a2c4:	6965      	ldr	r5, [r4, #20]
 800a2c6:	6909      	ldr	r1, [r1, #16]
 800a2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2cc:	eba3 0901 	sub.w	r9, r3, r1
 800a2d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2d4:	1c7b      	adds	r3, r7, #1
 800a2d6:	444b      	add	r3, r9
 800a2d8:	106d      	asrs	r5, r5, #1
 800a2da:	429d      	cmp	r5, r3
 800a2dc:	bf38      	it	cc
 800a2de:	461d      	movcc	r5, r3
 800a2e0:	0553      	lsls	r3, r2, #21
 800a2e2:	d527      	bpl.n	800a334 <__ssputs_r+0x8c>
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	f7ff fbdb 	bl	8009aa0 <_malloc_r>
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	b360      	cbz	r0, 800a348 <__ssputs_r+0xa0>
 800a2ee:	464a      	mov	r2, r9
 800a2f0:	6921      	ldr	r1, [r4, #16]
 800a2f2:	f000 fa05 	bl	800a700 <memcpy>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a300:	81a3      	strh	r3, [r4, #12]
 800a302:	6126      	str	r6, [r4, #16]
 800a304:	444e      	add	r6, r9
 800a306:	6026      	str	r6, [r4, #0]
 800a308:	463e      	mov	r6, r7
 800a30a:	6165      	str	r5, [r4, #20]
 800a30c:	eba5 0509 	sub.w	r5, r5, r9
 800a310:	60a5      	str	r5, [r4, #8]
 800a312:	42be      	cmp	r6, r7
 800a314:	d900      	bls.n	800a318 <__ssputs_r+0x70>
 800a316:	463e      	mov	r6, r7
 800a318:	4632      	mov	r2, r6
 800a31a:	4641      	mov	r1, r8
 800a31c:	6820      	ldr	r0, [r4, #0]
 800a31e:	f000 f9c5 	bl	800a6ac <memmove>
 800a322:	2000      	movs	r0, #0
 800a324:	68a3      	ldr	r3, [r4, #8]
 800a326:	1b9b      	subs	r3, r3, r6
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	4433      	add	r3, r6
 800a32e:	6023      	str	r3, [r4, #0]
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	462a      	mov	r2, r5
 800a336:	f000 fa35 	bl	800a7a4 <_realloc_r>
 800a33a:	4606      	mov	r6, r0
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d1e0      	bne.n	800a302 <__ssputs_r+0x5a>
 800a340:	4650      	mov	r0, sl
 800a342:	6921      	ldr	r1, [r4, #16]
 800a344:	f7ff fb3c 	bl	80099c0 <_free_r>
 800a348:	230c      	movs	r3, #12
 800a34a:	f8ca 3000 	str.w	r3, [sl]
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a358:	81a3      	strh	r3, [r4, #12]
 800a35a:	e7e9      	b.n	800a330 <__ssputs_r+0x88>

0800a35c <_svfiprintf_r>:
 800a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	4698      	mov	r8, r3
 800a362:	898b      	ldrh	r3, [r1, #12]
 800a364:	4607      	mov	r7, r0
 800a366:	061b      	lsls	r3, r3, #24
 800a368:	460d      	mov	r5, r1
 800a36a:	4614      	mov	r4, r2
 800a36c:	b09d      	sub	sp, #116	; 0x74
 800a36e:	d50e      	bpl.n	800a38e <_svfiprintf_r+0x32>
 800a370:	690b      	ldr	r3, [r1, #16]
 800a372:	b963      	cbnz	r3, 800a38e <_svfiprintf_r+0x32>
 800a374:	2140      	movs	r1, #64	; 0x40
 800a376:	f7ff fb93 	bl	8009aa0 <_malloc_r>
 800a37a:	6028      	str	r0, [r5, #0]
 800a37c:	6128      	str	r0, [r5, #16]
 800a37e:	b920      	cbnz	r0, 800a38a <_svfiprintf_r+0x2e>
 800a380:	230c      	movs	r3, #12
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	e0d0      	b.n	800a52c <_svfiprintf_r+0x1d0>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	616b      	str	r3, [r5, #20]
 800a38e:	2300      	movs	r3, #0
 800a390:	9309      	str	r3, [sp, #36]	; 0x24
 800a392:	2320      	movs	r3, #32
 800a394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a398:	2330      	movs	r3, #48	; 0x30
 800a39a:	f04f 0901 	mov.w	r9, #1
 800a39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a544 <_svfiprintf_r+0x1e8>
 800a3a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	469a      	mov	sl, r3
 800a3ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b2:	b10a      	cbz	r2, 800a3b8 <_svfiprintf_r+0x5c>
 800a3b4:	2a25      	cmp	r2, #37	; 0x25
 800a3b6:	d1f9      	bne.n	800a3ac <_svfiprintf_r+0x50>
 800a3b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a3bc:	d00b      	beq.n	800a3d6 <_svfiprintf_r+0x7a>
 800a3be:	465b      	mov	r3, fp
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	f7ff ff6f 	bl	800a2a8 <__ssputs_r>
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f000 80a9 	beq.w	800a522 <_svfiprintf_r+0x1c6>
 800a3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d2:	445a      	add	r2, fp
 800a3d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 80a1 	beq.w	800a522 <_svfiprintf_r+0x1c6>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ea:	f10a 0a01 	add.w	sl, sl, #1
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f8:	4654      	mov	r4, sl
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a400:	4850      	ldr	r0, [pc, #320]	; (800a544 <_svfiprintf_r+0x1e8>)
 800a402:	f7fe fc5f 	bl	8008cc4 <memchr>
 800a406:	9a04      	ldr	r2, [sp, #16]
 800a408:	b9d8      	cbnz	r0, 800a442 <_svfiprintf_r+0xe6>
 800a40a:	06d0      	lsls	r0, r2, #27
 800a40c:	bf44      	itt	mi
 800a40e:	2320      	movmi	r3, #32
 800a410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a414:	0711      	lsls	r1, r2, #28
 800a416:	bf44      	itt	mi
 800a418:	232b      	movmi	r3, #43	; 0x2b
 800a41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a41e:	f89a 3000 	ldrb.w	r3, [sl]
 800a422:	2b2a      	cmp	r3, #42	; 0x2a
 800a424:	d015      	beq.n	800a452 <_svfiprintf_r+0xf6>
 800a426:	4654      	mov	r4, sl
 800a428:	2000      	movs	r0, #0
 800a42a:	f04f 0c0a 	mov.w	ip, #10
 800a42e:	9a07      	ldr	r2, [sp, #28]
 800a430:	4621      	mov	r1, r4
 800a432:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a436:	3b30      	subs	r3, #48	; 0x30
 800a438:	2b09      	cmp	r3, #9
 800a43a:	d94d      	bls.n	800a4d8 <_svfiprintf_r+0x17c>
 800a43c:	b1b0      	cbz	r0, 800a46c <_svfiprintf_r+0x110>
 800a43e:	9207      	str	r2, [sp, #28]
 800a440:	e014      	b.n	800a46c <_svfiprintf_r+0x110>
 800a442:	eba0 0308 	sub.w	r3, r0, r8
 800a446:	fa09 f303 	lsl.w	r3, r9, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	46a2      	mov	sl, r4
 800a44e:	9304      	str	r3, [sp, #16]
 800a450:	e7d2      	b.n	800a3f8 <_svfiprintf_r+0x9c>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	1d19      	adds	r1, r3, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	9103      	str	r1, [sp, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bfbb      	ittet	lt
 800a45e:	425b      	neglt	r3, r3
 800a460:	f042 0202 	orrlt.w	r2, r2, #2
 800a464:	9307      	strge	r3, [sp, #28]
 800a466:	9307      	strlt	r3, [sp, #28]
 800a468:	bfb8      	it	lt
 800a46a:	9204      	strlt	r2, [sp, #16]
 800a46c:	7823      	ldrb	r3, [r4, #0]
 800a46e:	2b2e      	cmp	r3, #46	; 0x2e
 800a470:	d10c      	bne.n	800a48c <_svfiprintf_r+0x130>
 800a472:	7863      	ldrb	r3, [r4, #1]
 800a474:	2b2a      	cmp	r3, #42	; 0x2a
 800a476:	d134      	bne.n	800a4e2 <_svfiprintf_r+0x186>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	3402      	adds	r4, #2
 800a47c:	1d1a      	adds	r2, r3, #4
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	9203      	str	r2, [sp, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	bfb8      	it	lt
 800a486:	f04f 33ff 	movlt.w	r3, #4294967295
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a548 <_svfiprintf_r+0x1ec>
 800a490:	2203      	movs	r2, #3
 800a492:	4650      	mov	r0, sl
 800a494:	7821      	ldrb	r1, [r4, #0]
 800a496:	f7fe fc15 	bl	8008cc4 <memchr>
 800a49a:	b138      	cbz	r0, 800a4ac <_svfiprintf_r+0x150>
 800a49c:	2240      	movs	r2, #64	; 0x40
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	eba0 000a 	sub.w	r0, r0, sl
 800a4a4:	4082      	lsls	r2, r0
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	3401      	adds	r4, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b0:	2206      	movs	r2, #6
 800a4b2:	4826      	ldr	r0, [pc, #152]	; (800a54c <_svfiprintf_r+0x1f0>)
 800a4b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b8:	f7fe fc04 	bl	8008cc4 <memchr>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d038      	beq.n	800a532 <_svfiprintf_r+0x1d6>
 800a4c0:	4b23      	ldr	r3, [pc, #140]	; (800a550 <_svfiprintf_r+0x1f4>)
 800a4c2:	bb1b      	cbnz	r3, 800a50c <_svfiprintf_r+0x1b0>
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	3307      	adds	r3, #7
 800a4c8:	f023 0307 	bic.w	r3, r3, #7
 800a4cc:	3308      	adds	r3, #8
 800a4ce:	9303      	str	r3, [sp, #12]
 800a4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d2:	4433      	add	r3, r6
 800a4d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d6:	e768      	b.n	800a3aa <_svfiprintf_r+0x4e>
 800a4d8:	460c      	mov	r4, r1
 800a4da:	2001      	movs	r0, #1
 800a4dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4e0:	e7a6      	b.n	800a430 <_svfiprintf_r+0xd4>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f04f 0c0a 	mov.w	ip, #10
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	3401      	adds	r4, #1
 800a4ec:	9305      	str	r3, [sp, #20]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f4:	3a30      	subs	r2, #48	; 0x30
 800a4f6:	2a09      	cmp	r2, #9
 800a4f8:	d903      	bls.n	800a502 <_svfiprintf_r+0x1a6>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0c6      	beq.n	800a48c <_svfiprintf_r+0x130>
 800a4fe:	9105      	str	r1, [sp, #20]
 800a500:	e7c4      	b.n	800a48c <_svfiprintf_r+0x130>
 800a502:	4604      	mov	r4, r0
 800a504:	2301      	movs	r3, #1
 800a506:	fb0c 2101 	mla	r1, ip, r1, r2
 800a50a:	e7f0      	b.n	800a4ee <_svfiprintf_r+0x192>
 800a50c:	ab03      	add	r3, sp, #12
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	462a      	mov	r2, r5
 800a512:	4638      	mov	r0, r7
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a516:	a904      	add	r1, sp, #16
 800a518:	f7fd fe34 	bl	8008184 <_printf_float>
 800a51c:	1c42      	adds	r2, r0, #1
 800a51e:	4606      	mov	r6, r0
 800a520:	d1d6      	bne.n	800a4d0 <_svfiprintf_r+0x174>
 800a522:	89ab      	ldrh	r3, [r5, #12]
 800a524:	065b      	lsls	r3, r3, #25
 800a526:	f53f af2d 	bmi.w	800a384 <_svfiprintf_r+0x28>
 800a52a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52c:	b01d      	add	sp, #116	; 0x74
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	ab03      	add	r3, sp, #12
 800a534:	9300      	str	r3, [sp, #0]
 800a536:	462a      	mov	r2, r5
 800a538:	4638      	mov	r0, r7
 800a53a:	4b06      	ldr	r3, [pc, #24]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	f7fe f8c1 	bl	80086c4 <_printf_i>
 800a542:	e7eb      	b.n	800a51c <_svfiprintf_r+0x1c0>
 800a544:	0800b57c 	.word	0x0800b57c
 800a548:	0800b582 	.word	0x0800b582
 800a54c:	0800b586 	.word	0x0800b586
 800a550:	08008185 	.word	0x08008185
 800a554:	0800a2a9 	.word	0x0800a2a9

0800a558 <__sflush_r>:
 800a558:	898a      	ldrh	r2, [r1, #12]
 800a55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55c:	4605      	mov	r5, r0
 800a55e:	0710      	lsls	r0, r2, #28
 800a560:	460c      	mov	r4, r1
 800a562:	d457      	bmi.n	800a614 <__sflush_r+0xbc>
 800a564:	684b      	ldr	r3, [r1, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	dc04      	bgt.n	800a574 <__sflush_r+0x1c>
 800a56a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dc01      	bgt.n	800a574 <__sflush_r+0x1c>
 800a570:	2000      	movs	r0, #0
 800a572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a576:	2e00      	cmp	r6, #0
 800a578:	d0fa      	beq.n	800a570 <__sflush_r+0x18>
 800a57a:	2300      	movs	r3, #0
 800a57c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a580:	682f      	ldr	r7, [r5, #0]
 800a582:	6a21      	ldr	r1, [r4, #32]
 800a584:	602b      	str	r3, [r5, #0]
 800a586:	d032      	beq.n	800a5ee <__sflush_r+0x96>
 800a588:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	075a      	lsls	r2, r3, #29
 800a58e:	d505      	bpl.n	800a59c <__sflush_r+0x44>
 800a590:	6863      	ldr	r3, [r4, #4]
 800a592:	1ac0      	subs	r0, r0, r3
 800a594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a596:	b10b      	cbz	r3, 800a59c <__sflush_r+0x44>
 800a598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a59a:	1ac0      	subs	r0, r0, r3
 800a59c:	2300      	movs	r3, #0
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	6a21      	ldr	r1, [r4, #32]
 800a5a6:	47b0      	blx	r6
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	89a3      	ldrh	r3, [r4, #12]
 800a5ac:	d106      	bne.n	800a5bc <__sflush_r+0x64>
 800a5ae:	6829      	ldr	r1, [r5, #0]
 800a5b0:	291d      	cmp	r1, #29
 800a5b2:	d82b      	bhi.n	800a60c <__sflush_r+0xb4>
 800a5b4:	4a28      	ldr	r2, [pc, #160]	; (800a658 <__sflush_r+0x100>)
 800a5b6:	410a      	asrs	r2, r1
 800a5b8:	07d6      	lsls	r6, r2, #31
 800a5ba:	d427      	bmi.n	800a60c <__sflush_r+0xb4>
 800a5bc:	2200      	movs	r2, #0
 800a5be:	6062      	str	r2, [r4, #4]
 800a5c0:	6922      	ldr	r2, [r4, #16]
 800a5c2:	04d9      	lsls	r1, r3, #19
 800a5c4:	6022      	str	r2, [r4, #0]
 800a5c6:	d504      	bpl.n	800a5d2 <__sflush_r+0x7a>
 800a5c8:	1c42      	adds	r2, r0, #1
 800a5ca:	d101      	bne.n	800a5d0 <__sflush_r+0x78>
 800a5cc:	682b      	ldr	r3, [r5, #0]
 800a5ce:	b903      	cbnz	r3, 800a5d2 <__sflush_r+0x7a>
 800a5d0:	6560      	str	r0, [r4, #84]	; 0x54
 800a5d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5d4:	602f      	str	r7, [r5, #0]
 800a5d6:	2900      	cmp	r1, #0
 800a5d8:	d0ca      	beq.n	800a570 <__sflush_r+0x18>
 800a5da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5de:	4299      	cmp	r1, r3
 800a5e0:	d002      	beq.n	800a5e8 <__sflush_r+0x90>
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f7ff f9ec 	bl	80099c0 <_free_r>
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	6360      	str	r0, [r4, #52]	; 0x34
 800a5ec:	e7c1      	b.n	800a572 <__sflush_r+0x1a>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b0      	blx	r6
 800a5f4:	1c41      	adds	r1, r0, #1
 800a5f6:	d1c8      	bne.n	800a58a <__sflush_r+0x32>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0c5      	beq.n	800a58a <__sflush_r+0x32>
 800a5fe:	2b1d      	cmp	r3, #29
 800a600:	d001      	beq.n	800a606 <__sflush_r+0xae>
 800a602:	2b16      	cmp	r3, #22
 800a604:	d101      	bne.n	800a60a <__sflush_r+0xb2>
 800a606:	602f      	str	r7, [r5, #0]
 800a608:	e7b2      	b.n	800a570 <__sflush_r+0x18>
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a610:	81a3      	strh	r3, [r4, #12]
 800a612:	e7ae      	b.n	800a572 <__sflush_r+0x1a>
 800a614:	690f      	ldr	r7, [r1, #16]
 800a616:	2f00      	cmp	r7, #0
 800a618:	d0aa      	beq.n	800a570 <__sflush_r+0x18>
 800a61a:	0793      	lsls	r3, r2, #30
 800a61c:	bf18      	it	ne
 800a61e:	2300      	movne	r3, #0
 800a620:	680e      	ldr	r6, [r1, #0]
 800a622:	bf08      	it	eq
 800a624:	694b      	ldreq	r3, [r1, #20]
 800a626:	1bf6      	subs	r6, r6, r7
 800a628:	600f      	str	r7, [r1, #0]
 800a62a:	608b      	str	r3, [r1, #8]
 800a62c:	2e00      	cmp	r6, #0
 800a62e:	dd9f      	ble.n	800a570 <__sflush_r+0x18>
 800a630:	4633      	mov	r3, r6
 800a632:	463a      	mov	r2, r7
 800a634:	4628      	mov	r0, r5
 800a636:	6a21      	ldr	r1, [r4, #32]
 800a638:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a63c:	47e0      	blx	ip
 800a63e:	2800      	cmp	r0, #0
 800a640:	dc06      	bgt.n	800a650 <__sflush_r+0xf8>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	f04f 30ff 	mov.w	r0, #4294967295
 800a648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a64c:	81a3      	strh	r3, [r4, #12]
 800a64e:	e790      	b.n	800a572 <__sflush_r+0x1a>
 800a650:	4407      	add	r7, r0
 800a652:	1a36      	subs	r6, r6, r0
 800a654:	e7ea      	b.n	800a62c <__sflush_r+0xd4>
 800a656:	bf00      	nop
 800a658:	dfbffffe 	.word	0xdfbffffe

0800a65c <_fflush_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	690b      	ldr	r3, [r1, #16]
 800a660:	4605      	mov	r5, r0
 800a662:	460c      	mov	r4, r1
 800a664:	b913      	cbnz	r3, 800a66c <_fflush_r+0x10>
 800a666:	2500      	movs	r5, #0
 800a668:	4628      	mov	r0, r5
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	b118      	cbz	r0, 800a676 <_fflush_r+0x1a>
 800a66e:	6a03      	ldr	r3, [r0, #32]
 800a670:	b90b      	cbnz	r3, 800a676 <_fflush_r+0x1a>
 800a672:	f7fe f9c3 	bl	80089fc <__sinit>
 800a676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0f3      	beq.n	800a666 <_fflush_r+0xa>
 800a67e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a680:	07d0      	lsls	r0, r2, #31
 800a682:	d404      	bmi.n	800a68e <_fflush_r+0x32>
 800a684:	0599      	lsls	r1, r3, #22
 800a686:	d402      	bmi.n	800a68e <_fflush_r+0x32>
 800a688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a68a:	f7fe fb19 	bl	8008cc0 <__retarget_lock_acquire_recursive>
 800a68e:	4628      	mov	r0, r5
 800a690:	4621      	mov	r1, r4
 800a692:	f7ff ff61 	bl	800a558 <__sflush_r>
 800a696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a698:	4605      	mov	r5, r0
 800a69a:	07da      	lsls	r2, r3, #31
 800a69c:	d4e4      	bmi.n	800a668 <_fflush_r+0xc>
 800a69e:	89a3      	ldrh	r3, [r4, #12]
 800a6a0:	059b      	lsls	r3, r3, #22
 800a6a2:	d4e1      	bmi.n	800a668 <_fflush_r+0xc>
 800a6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a6:	f7fe fb0c 	bl	8008cc2 <__retarget_lock_release_recursive>
 800a6aa:	e7dd      	b.n	800a668 <_fflush_r+0xc>

0800a6ac <memmove>:
 800a6ac:	4288      	cmp	r0, r1
 800a6ae:	b510      	push	{r4, lr}
 800a6b0:	eb01 0402 	add.w	r4, r1, r2
 800a6b4:	d902      	bls.n	800a6bc <memmove+0x10>
 800a6b6:	4284      	cmp	r4, r0
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	d807      	bhi.n	800a6cc <memmove+0x20>
 800a6bc:	1e43      	subs	r3, r0, #1
 800a6be:	42a1      	cmp	r1, r4
 800a6c0:	d008      	beq.n	800a6d4 <memmove+0x28>
 800a6c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6ca:	e7f8      	b.n	800a6be <memmove+0x12>
 800a6cc:	4601      	mov	r1, r0
 800a6ce:	4402      	add	r2, r0
 800a6d0:	428a      	cmp	r2, r1
 800a6d2:	d100      	bne.n	800a6d6 <memmove+0x2a>
 800a6d4:	bd10      	pop	{r4, pc}
 800a6d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6de:	e7f7      	b.n	800a6d0 <memmove+0x24>

0800a6e0 <_sbrk_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	4d05      	ldr	r5, [pc, #20]	; (800a6fc <_sbrk_r+0x1c>)
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	f7f6 ff8c 	bl	8001608 <_sbrk>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_sbrk_r+0x1a>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_sbrk_r+0x1a>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	200005e0 	.word	0x200005e0

0800a700 <memcpy>:
 800a700:	440a      	add	r2, r1
 800a702:	4291      	cmp	r1, r2
 800a704:	f100 33ff 	add.w	r3, r0, #4294967295
 800a708:	d100      	bne.n	800a70c <memcpy+0xc>
 800a70a:	4770      	bx	lr
 800a70c:	b510      	push	{r4, lr}
 800a70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a712:	4291      	cmp	r1, r2
 800a714:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a718:	d1f9      	bne.n	800a70e <memcpy+0xe>
 800a71a:	bd10      	pop	{r4, pc}

0800a71c <__assert_func>:
 800a71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a71e:	4614      	mov	r4, r2
 800a720:	461a      	mov	r2, r3
 800a722:	4b09      	ldr	r3, [pc, #36]	; (800a748 <__assert_func+0x2c>)
 800a724:	4605      	mov	r5, r0
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68d8      	ldr	r0, [r3, #12]
 800a72a:	b14c      	cbz	r4, 800a740 <__assert_func+0x24>
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <__assert_func+0x30>)
 800a72e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a732:	9100      	str	r1, [sp, #0]
 800a734:	462b      	mov	r3, r5
 800a736:	4906      	ldr	r1, [pc, #24]	; (800a750 <__assert_func+0x34>)
 800a738:	f000 f870 	bl	800a81c <fiprintf>
 800a73c:	f000 f880 	bl	800a840 <abort>
 800a740:	4b04      	ldr	r3, [pc, #16]	; (800a754 <__assert_func+0x38>)
 800a742:	461c      	mov	r4, r3
 800a744:	e7f3      	b.n	800a72e <__assert_func+0x12>
 800a746:	bf00      	nop
 800a748:	2000007c 	.word	0x2000007c
 800a74c:	0800b597 	.word	0x0800b597
 800a750:	0800b5a4 	.word	0x0800b5a4
 800a754:	0800b5d2 	.word	0x0800b5d2

0800a758 <_calloc_r>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	fba1 5402 	umull	r5, r4, r1, r2
 800a75e:	b934      	cbnz	r4, 800a76e <_calloc_r+0x16>
 800a760:	4629      	mov	r1, r5
 800a762:	f7ff f99d 	bl	8009aa0 <_malloc_r>
 800a766:	4606      	mov	r6, r0
 800a768:	b928      	cbnz	r0, 800a776 <_calloc_r+0x1e>
 800a76a:	4630      	mov	r0, r6
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
 800a76e:	220c      	movs	r2, #12
 800a770:	2600      	movs	r6, #0
 800a772:	6002      	str	r2, [r0, #0]
 800a774:	e7f9      	b.n	800a76a <_calloc_r+0x12>
 800a776:	462a      	mov	r2, r5
 800a778:	4621      	mov	r1, r4
 800a77a:	f7fe fa11 	bl	8008ba0 <memset>
 800a77e:	e7f4      	b.n	800a76a <_calloc_r+0x12>

0800a780 <__ascii_mbtowc>:
 800a780:	b082      	sub	sp, #8
 800a782:	b901      	cbnz	r1, 800a786 <__ascii_mbtowc+0x6>
 800a784:	a901      	add	r1, sp, #4
 800a786:	b142      	cbz	r2, 800a79a <__ascii_mbtowc+0x1a>
 800a788:	b14b      	cbz	r3, 800a79e <__ascii_mbtowc+0x1e>
 800a78a:	7813      	ldrb	r3, [r2, #0]
 800a78c:	600b      	str	r3, [r1, #0]
 800a78e:	7812      	ldrb	r2, [r2, #0]
 800a790:	1e10      	subs	r0, r2, #0
 800a792:	bf18      	it	ne
 800a794:	2001      	movne	r0, #1
 800a796:	b002      	add	sp, #8
 800a798:	4770      	bx	lr
 800a79a:	4610      	mov	r0, r2
 800a79c:	e7fb      	b.n	800a796 <__ascii_mbtowc+0x16>
 800a79e:	f06f 0001 	mvn.w	r0, #1
 800a7a2:	e7f8      	b.n	800a796 <__ascii_mbtowc+0x16>

0800a7a4 <_realloc_r>:
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	4614      	mov	r4, r2
 800a7ac:	460e      	mov	r6, r1
 800a7ae:	b921      	cbnz	r1, 800a7ba <_realloc_r+0x16>
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b6:	f7ff b973 	b.w	8009aa0 <_malloc_r>
 800a7ba:	b92a      	cbnz	r2, 800a7c8 <_realloc_r+0x24>
 800a7bc:	f7ff f900 	bl	80099c0 <_free_r>
 800a7c0:	4625      	mov	r5, r4
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c8:	f000 f841 	bl	800a84e <_malloc_usable_size_r>
 800a7cc:	4284      	cmp	r4, r0
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	d802      	bhi.n	800a7d8 <_realloc_r+0x34>
 800a7d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7d6:	d812      	bhi.n	800a7fe <_realloc_r+0x5a>
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4640      	mov	r0, r8
 800a7dc:	f7ff f960 	bl	8009aa0 <_malloc_r>
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d0ed      	beq.n	800a7c2 <_realloc_r+0x1e>
 800a7e6:	42bc      	cmp	r4, r7
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	bf28      	it	cs
 800a7ee:	463a      	movcs	r2, r7
 800a7f0:	f7ff ff86 	bl	800a700 <memcpy>
 800a7f4:	4631      	mov	r1, r6
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f7ff f8e2 	bl	80099c0 <_free_r>
 800a7fc:	e7e1      	b.n	800a7c2 <_realloc_r+0x1e>
 800a7fe:	4635      	mov	r5, r6
 800a800:	e7df      	b.n	800a7c2 <_realloc_r+0x1e>

0800a802 <__ascii_wctomb>:
 800a802:	4603      	mov	r3, r0
 800a804:	4608      	mov	r0, r1
 800a806:	b141      	cbz	r1, 800a81a <__ascii_wctomb+0x18>
 800a808:	2aff      	cmp	r2, #255	; 0xff
 800a80a:	d904      	bls.n	800a816 <__ascii_wctomb+0x14>
 800a80c:	228a      	movs	r2, #138	; 0x8a
 800a80e:	f04f 30ff 	mov.w	r0, #4294967295
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	4770      	bx	lr
 800a816:	2001      	movs	r0, #1
 800a818:	700a      	strb	r2, [r1, #0]
 800a81a:	4770      	bx	lr

0800a81c <fiprintf>:
 800a81c:	b40e      	push	{r1, r2, r3}
 800a81e:	b503      	push	{r0, r1, lr}
 800a820:	4601      	mov	r1, r0
 800a822:	ab03      	add	r3, sp, #12
 800a824:	4805      	ldr	r0, [pc, #20]	; (800a83c <fiprintf+0x20>)
 800a826:	f853 2b04 	ldr.w	r2, [r3], #4
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	f000 f83d 	bl	800a8ac <_vfiprintf_r>
 800a832:	b002      	add	sp, #8
 800a834:	f85d eb04 	ldr.w	lr, [sp], #4
 800a838:	b003      	add	sp, #12
 800a83a:	4770      	bx	lr
 800a83c:	2000007c 	.word	0x2000007c

0800a840 <abort>:
 800a840:	2006      	movs	r0, #6
 800a842:	b508      	push	{r3, lr}
 800a844:	f000 fa0a 	bl	800ac5c <raise>
 800a848:	2001      	movs	r0, #1
 800a84a:	f7f6 fe69 	bl	8001520 <_exit>

0800a84e <_malloc_usable_size_r>:
 800a84e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a852:	1f18      	subs	r0, r3, #4
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfbc      	itt	lt
 800a858:	580b      	ldrlt	r3, [r1, r0]
 800a85a:	18c0      	addlt	r0, r0, r3
 800a85c:	4770      	bx	lr

0800a85e <__sfputc_r>:
 800a85e:	6893      	ldr	r3, [r2, #8]
 800a860:	b410      	push	{r4}
 800a862:	3b01      	subs	r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	6093      	str	r3, [r2, #8]
 800a868:	da07      	bge.n	800a87a <__sfputc_r+0x1c>
 800a86a:	6994      	ldr	r4, [r2, #24]
 800a86c:	42a3      	cmp	r3, r4
 800a86e:	db01      	blt.n	800a874 <__sfputc_r+0x16>
 800a870:	290a      	cmp	r1, #10
 800a872:	d102      	bne.n	800a87a <__sfputc_r+0x1c>
 800a874:	bc10      	pop	{r4}
 800a876:	f000 b933 	b.w	800aae0 <__swbuf_r>
 800a87a:	6813      	ldr	r3, [r2, #0]
 800a87c:	1c58      	adds	r0, r3, #1
 800a87e:	6010      	str	r0, [r2, #0]
 800a880:	7019      	strb	r1, [r3, #0]
 800a882:	4608      	mov	r0, r1
 800a884:	bc10      	pop	{r4}
 800a886:	4770      	bx	lr

0800a888 <__sfputs_r>:
 800a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88a:	4606      	mov	r6, r0
 800a88c:	460f      	mov	r7, r1
 800a88e:	4614      	mov	r4, r2
 800a890:	18d5      	adds	r5, r2, r3
 800a892:	42ac      	cmp	r4, r5
 800a894:	d101      	bne.n	800a89a <__sfputs_r+0x12>
 800a896:	2000      	movs	r0, #0
 800a898:	e007      	b.n	800a8aa <__sfputs_r+0x22>
 800a89a:	463a      	mov	r2, r7
 800a89c:	4630      	mov	r0, r6
 800a89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a2:	f7ff ffdc 	bl	800a85e <__sfputc_r>
 800a8a6:	1c43      	adds	r3, r0, #1
 800a8a8:	d1f3      	bne.n	800a892 <__sfputs_r+0xa>
 800a8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8ac <_vfiprintf_r>:
 800a8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b0:	460d      	mov	r5, r1
 800a8b2:	4614      	mov	r4, r2
 800a8b4:	4698      	mov	r8, r3
 800a8b6:	4606      	mov	r6, r0
 800a8b8:	b09d      	sub	sp, #116	; 0x74
 800a8ba:	b118      	cbz	r0, 800a8c4 <_vfiprintf_r+0x18>
 800a8bc:	6a03      	ldr	r3, [r0, #32]
 800a8be:	b90b      	cbnz	r3, 800a8c4 <_vfiprintf_r+0x18>
 800a8c0:	f7fe f89c 	bl	80089fc <__sinit>
 800a8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c6:	07d9      	lsls	r1, r3, #31
 800a8c8:	d405      	bmi.n	800a8d6 <_vfiprintf_r+0x2a>
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	059a      	lsls	r2, r3, #22
 800a8ce:	d402      	bmi.n	800a8d6 <_vfiprintf_r+0x2a>
 800a8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d2:	f7fe f9f5 	bl	8008cc0 <__retarget_lock_acquire_recursive>
 800a8d6:	89ab      	ldrh	r3, [r5, #12]
 800a8d8:	071b      	lsls	r3, r3, #28
 800a8da:	d501      	bpl.n	800a8e0 <_vfiprintf_r+0x34>
 800a8dc:	692b      	ldr	r3, [r5, #16]
 800a8de:	b99b      	cbnz	r3, 800a908 <_vfiprintf_r+0x5c>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f000 f93a 	bl	800ab5c <__swsetup_r>
 800a8e8:	b170      	cbz	r0, 800a908 <_vfiprintf_r+0x5c>
 800a8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ec:	07dc      	lsls	r4, r3, #31
 800a8ee:	d504      	bpl.n	800a8fa <_vfiprintf_r+0x4e>
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f4:	b01d      	add	sp, #116	; 0x74
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	89ab      	ldrh	r3, [r5, #12]
 800a8fc:	0598      	lsls	r0, r3, #22
 800a8fe:	d4f7      	bmi.n	800a8f0 <_vfiprintf_r+0x44>
 800a900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a902:	f7fe f9de 	bl	8008cc2 <__retarget_lock_release_recursive>
 800a906:	e7f3      	b.n	800a8f0 <_vfiprintf_r+0x44>
 800a908:	2300      	movs	r3, #0
 800a90a:	9309      	str	r3, [sp, #36]	; 0x24
 800a90c:	2320      	movs	r3, #32
 800a90e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a912:	2330      	movs	r3, #48	; 0x30
 800a914:	f04f 0901 	mov.w	r9, #1
 800a918:	f8cd 800c 	str.w	r8, [sp, #12]
 800a91c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800aacc <_vfiprintf_r+0x220>
 800a920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a924:	4623      	mov	r3, r4
 800a926:	469a      	mov	sl, r3
 800a928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a92c:	b10a      	cbz	r2, 800a932 <_vfiprintf_r+0x86>
 800a92e:	2a25      	cmp	r2, #37	; 0x25
 800a930:	d1f9      	bne.n	800a926 <_vfiprintf_r+0x7a>
 800a932:	ebba 0b04 	subs.w	fp, sl, r4
 800a936:	d00b      	beq.n	800a950 <_vfiprintf_r+0xa4>
 800a938:	465b      	mov	r3, fp
 800a93a:	4622      	mov	r2, r4
 800a93c:	4629      	mov	r1, r5
 800a93e:	4630      	mov	r0, r6
 800a940:	f7ff ffa2 	bl	800a888 <__sfputs_r>
 800a944:	3001      	adds	r0, #1
 800a946:	f000 80a9 	beq.w	800aa9c <_vfiprintf_r+0x1f0>
 800a94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a94c:	445a      	add	r2, fp
 800a94e:	9209      	str	r2, [sp, #36]	; 0x24
 800a950:	f89a 3000 	ldrb.w	r3, [sl]
 800a954:	2b00      	cmp	r3, #0
 800a956:	f000 80a1 	beq.w	800aa9c <_vfiprintf_r+0x1f0>
 800a95a:	2300      	movs	r3, #0
 800a95c:	f04f 32ff 	mov.w	r2, #4294967295
 800a960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a964:	f10a 0a01 	add.w	sl, sl, #1
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	9307      	str	r3, [sp, #28]
 800a96c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a970:	931a      	str	r3, [sp, #104]	; 0x68
 800a972:	4654      	mov	r4, sl
 800a974:	2205      	movs	r2, #5
 800a976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a97a:	4854      	ldr	r0, [pc, #336]	; (800aacc <_vfiprintf_r+0x220>)
 800a97c:	f7fe f9a2 	bl	8008cc4 <memchr>
 800a980:	9a04      	ldr	r2, [sp, #16]
 800a982:	b9d8      	cbnz	r0, 800a9bc <_vfiprintf_r+0x110>
 800a984:	06d1      	lsls	r1, r2, #27
 800a986:	bf44      	itt	mi
 800a988:	2320      	movmi	r3, #32
 800a98a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a98e:	0713      	lsls	r3, r2, #28
 800a990:	bf44      	itt	mi
 800a992:	232b      	movmi	r3, #43	; 0x2b
 800a994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a998:	f89a 3000 	ldrb.w	r3, [sl]
 800a99c:	2b2a      	cmp	r3, #42	; 0x2a
 800a99e:	d015      	beq.n	800a9cc <_vfiprintf_r+0x120>
 800a9a0:	4654      	mov	r4, sl
 800a9a2:	2000      	movs	r0, #0
 800a9a4:	f04f 0c0a 	mov.w	ip, #10
 800a9a8:	9a07      	ldr	r2, [sp, #28]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9b0:	3b30      	subs	r3, #48	; 0x30
 800a9b2:	2b09      	cmp	r3, #9
 800a9b4:	d94d      	bls.n	800aa52 <_vfiprintf_r+0x1a6>
 800a9b6:	b1b0      	cbz	r0, 800a9e6 <_vfiprintf_r+0x13a>
 800a9b8:	9207      	str	r2, [sp, #28]
 800a9ba:	e014      	b.n	800a9e6 <_vfiprintf_r+0x13a>
 800a9bc:	eba0 0308 	sub.w	r3, r0, r8
 800a9c0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	46a2      	mov	sl, r4
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	e7d2      	b.n	800a972 <_vfiprintf_r+0xc6>
 800a9cc:	9b03      	ldr	r3, [sp, #12]
 800a9ce:	1d19      	adds	r1, r3, #4
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	9103      	str	r1, [sp, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bfbb      	ittet	lt
 800a9d8:	425b      	neglt	r3, r3
 800a9da:	f042 0202 	orrlt.w	r2, r2, #2
 800a9de:	9307      	strge	r3, [sp, #28]
 800a9e0:	9307      	strlt	r3, [sp, #28]
 800a9e2:	bfb8      	it	lt
 800a9e4:	9204      	strlt	r2, [sp, #16]
 800a9e6:	7823      	ldrb	r3, [r4, #0]
 800a9e8:	2b2e      	cmp	r3, #46	; 0x2e
 800a9ea:	d10c      	bne.n	800aa06 <_vfiprintf_r+0x15a>
 800a9ec:	7863      	ldrb	r3, [r4, #1]
 800a9ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f0:	d134      	bne.n	800aa5c <_vfiprintf_r+0x1b0>
 800a9f2:	9b03      	ldr	r3, [sp, #12]
 800a9f4:	3402      	adds	r4, #2
 800a9f6:	1d1a      	adds	r2, r3, #4
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	9203      	str	r2, [sp, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	bfb8      	it	lt
 800aa00:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa04:	9305      	str	r3, [sp, #20]
 800aa06:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aad0 <_vfiprintf_r+0x224>
 800aa0a:	2203      	movs	r2, #3
 800aa0c:	4650      	mov	r0, sl
 800aa0e:	7821      	ldrb	r1, [r4, #0]
 800aa10:	f7fe f958 	bl	8008cc4 <memchr>
 800aa14:	b138      	cbz	r0, 800aa26 <_vfiprintf_r+0x17a>
 800aa16:	2240      	movs	r2, #64	; 0x40
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	eba0 000a 	sub.w	r0, r0, sl
 800aa1e:	4082      	lsls	r2, r0
 800aa20:	4313      	orrs	r3, r2
 800aa22:	3401      	adds	r4, #1
 800aa24:	9304      	str	r3, [sp, #16]
 800aa26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	4829      	ldr	r0, [pc, #164]	; (800aad4 <_vfiprintf_r+0x228>)
 800aa2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa32:	f7fe f947 	bl	8008cc4 <memchr>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d03f      	beq.n	800aaba <_vfiprintf_r+0x20e>
 800aa3a:	4b27      	ldr	r3, [pc, #156]	; (800aad8 <_vfiprintf_r+0x22c>)
 800aa3c:	bb1b      	cbnz	r3, 800aa86 <_vfiprintf_r+0x1da>
 800aa3e:	9b03      	ldr	r3, [sp, #12]
 800aa40:	3307      	adds	r3, #7
 800aa42:	f023 0307 	bic.w	r3, r3, #7
 800aa46:	3308      	adds	r3, #8
 800aa48:	9303      	str	r3, [sp, #12]
 800aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa4c:	443b      	add	r3, r7
 800aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa50:	e768      	b.n	800a924 <_vfiprintf_r+0x78>
 800aa52:	460c      	mov	r4, r1
 800aa54:	2001      	movs	r0, #1
 800aa56:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa5a:	e7a6      	b.n	800a9aa <_vfiprintf_r+0xfe>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4619      	mov	r1, r3
 800aa64:	3401      	adds	r4, #1
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa6e:	3a30      	subs	r2, #48	; 0x30
 800aa70:	2a09      	cmp	r2, #9
 800aa72:	d903      	bls.n	800aa7c <_vfiprintf_r+0x1d0>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0c6      	beq.n	800aa06 <_vfiprintf_r+0x15a>
 800aa78:	9105      	str	r1, [sp, #20]
 800aa7a:	e7c4      	b.n	800aa06 <_vfiprintf_r+0x15a>
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	2301      	movs	r3, #1
 800aa80:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa84:	e7f0      	b.n	800aa68 <_vfiprintf_r+0x1bc>
 800aa86:	ab03      	add	r3, sp, #12
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4b13      	ldr	r3, [pc, #76]	; (800aadc <_vfiprintf_r+0x230>)
 800aa90:	a904      	add	r1, sp, #16
 800aa92:	f7fd fb77 	bl	8008184 <_printf_float>
 800aa96:	4607      	mov	r7, r0
 800aa98:	1c78      	adds	r0, r7, #1
 800aa9a:	d1d6      	bne.n	800aa4a <_vfiprintf_r+0x19e>
 800aa9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa9e:	07d9      	lsls	r1, r3, #31
 800aaa0:	d405      	bmi.n	800aaae <_vfiprintf_r+0x202>
 800aaa2:	89ab      	ldrh	r3, [r5, #12]
 800aaa4:	059a      	lsls	r2, r3, #22
 800aaa6:	d402      	bmi.n	800aaae <_vfiprintf_r+0x202>
 800aaa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaaa:	f7fe f90a 	bl	8008cc2 <__retarget_lock_release_recursive>
 800aaae:	89ab      	ldrh	r3, [r5, #12]
 800aab0:	065b      	lsls	r3, r3, #25
 800aab2:	f53f af1d 	bmi.w	800a8f0 <_vfiprintf_r+0x44>
 800aab6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab8:	e71c      	b.n	800a8f4 <_vfiprintf_r+0x48>
 800aaba:	ab03      	add	r3, sp, #12
 800aabc:	9300      	str	r3, [sp, #0]
 800aabe:	462a      	mov	r2, r5
 800aac0:	4630      	mov	r0, r6
 800aac2:	4b06      	ldr	r3, [pc, #24]	; (800aadc <_vfiprintf_r+0x230>)
 800aac4:	a904      	add	r1, sp, #16
 800aac6:	f7fd fdfd 	bl	80086c4 <_printf_i>
 800aaca:	e7e4      	b.n	800aa96 <_vfiprintf_r+0x1ea>
 800aacc:	0800b57c 	.word	0x0800b57c
 800aad0:	0800b582 	.word	0x0800b582
 800aad4:	0800b586 	.word	0x0800b586
 800aad8:	08008185 	.word	0x08008185
 800aadc:	0800a889 	.word	0x0800a889

0800aae0 <__swbuf_r>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	460e      	mov	r6, r1
 800aae4:	4614      	mov	r4, r2
 800aae6:	4605      	mov	r5, r0
 800aae8:	b118      	cbz	r0, 800aaf2 <__swbuf_r+0x12>
 800aaea:	6a03      	ldr	r3, [r0, #32]
 800aaec:	b90b      	cbnz	r3, 800aaf2 <__swbuf_r+0x12>
 800aaee:	f7fd ff85 	bl	80089fc <__sinit>
 800aaf2:	69a3      	ldr	r3, [r4, #24]
 800aaf4:	60a3      	str	r3, [r4, #8]
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	071a      	lsls	r2, r3, #28
 800aafa:	d525      	bpl.n	800ab48 <__swbuf_r+0x68>
 800aafc:	6923      	ldr	r3, [r4, #16]
 800aafe:	b31b      	cbz	r3, 800ab48 <__swbuf_r+0x68>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	6922      	ldr	r2, [r4, #16]
 800ab04:	b2f6      	uxtb	r6, r6
 800ab06:	1a98      	subs	r0, r3, r2
 800ab08:	6963      	ldr	r3, [r4, #20]
 800ab0a:	4637      	mov	r7, r6
 800ab0c:	4283      	cmp	r3, r0
 800ab0e:	dc04      	bgt.n	800ab1a <__swbuf_r+0x3a>
 800ab10:	4621      	mov	r1, r4
 800ab12:	4628      	mov	r0, r5
 800ab14:	f7ff fda2 	bl	800a65c <_fflush_r>
 800ab18:	b9e0      	cbnz	r0, 800ab54 <__swbuf_r+0x74>
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	6022      	str	r2, [r4, #0]
 800ab26:	701e      	strb	r6, [r3, #0]
 800ab28:	6962      	ldr	r2, [r4, #20]
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d004      	beq.n	800ab3a <__swbuf_r+0x5a>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	07db      	lsls	r3, r3, #31
 800ab34:	d506      	bpl.n	800ab44 <__swbuf_r+0x64>
 800ab36:	2e0a      	cmp	r6, #10
 800ab38:	d104      	bne.n	800ab44 <__swbuf_r+0x64>
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	f7ff fd8d 	bl	800a65c <_fflush_r>
 800ab42:	b938      	cbnz	r0, 800ab54 <__swbuf_r+0x74>
 800ab44:	4638      	mov	r0, r7
 800ab46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	f000 f806 	bl	800ab5c <__swsetup_r>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d0d5      	beq.n	800ab00 <__swbuf_r+0x20>
 800ab54:	f04f 37ff 	mov.w	r7, #4294967295
 800ab58:	e7f4      	b.n	800ab44 <__swbuf_r+0x64>
	...

0800ab5c <__swsetup_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4b2a      	ldr	r3, [pc, #168]	; (800ac08 <__swsetup_r+0xac>)
 800ab60:	4605      	mov	r5, r0
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	460c      	mov	r4, r1
 800ab66:	b118      	cbz	r0, 800ab70 <__swsetup_r+0x14>
 800ab68:	6a03      	ldr	r3, [r0, #32]
 800ab6a:	b90b      	cbnz	r3, 800ab70 <__swsetup_r+0x14>
 800ab6c:	f7fd ff46 	bl	80089fc <__sinit>
 800ab70:	89a3      	ldrh	r3, [r4, #12]
 800ab72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab76:	0718      	lsls	r0, r3, #28
 800ab78:	d422      	bmi.n	800abc0 <__swsetup_r+0x64>
 800ab7a:	06d9      	lsls	r1, r3, #27
 800ab7c:	d407      	bmi.n	800ab8e <__swsetup_r+0x32>
 800ab7e:	2309      	movs	r3, #9
 800ab80:	602b      	str	r3, [r5, #0]
 800ab82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab86:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	e034      	b.n	800abf8 <__swsetup_r+0x9c>
 800ab8e:	0758      	lsls	r0, r3, #29
 800ab90:	d512      	bpl.n	800abb8 <__swsetup_r+0x5c>
 800ab92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab94:	b141      	cbz	r1, 800aba8 <__swsetup_r+0x4c>
 800ab96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab9a:	4299      	cmp	r1, r3
 800ab9c:	d002      	beq.n	800aba4 <__swsetup_r+0x48>
 800ab9e:	4628      	mov	r0, r5
 800aba0:	f7fe ff0e 	bl	80099c0 <_free_r>
 800aba4:	2300      	movs	r3, #0
 800aba6:	6363      	str	r3, [r4, #52]	; 0x34
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abae:	81a3      	strh	r3, [r4, #12]
 800abb0:	2300      	movs	r3, #0
 800abb2:	6063      	str	r3, [r4, #4]
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f043 0308 	orr.w	r3, r3, #8
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	b94b      	cbnz	r3, 800abd8 <__swsetup_r+0x7c>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abce:	d003      	beq.n	800abd8 <__swsetup_r+0x7c>
 800abd0:	4621      	mov	r1, r4
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 f883 	bl	800acde <__smakebuf_r>
 800abd8:	89a0      	ldrh	r0, [r4, #12]
 800abda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abde:	f010 0301 	ands.w	r3, r0, #1
 800abe2:	d00a      	beq.n	800abfa <__swsetup_r+0x9e>
 800abe4:	2300      	movs	r3, #0
 800abe6:	60a3      	str	r3, [r4, #8]
 800abe8:	6963      	ldr	r3, [r4, #20]
 800abea:	425b      	negs	r3, r3
 800abec:	61a3      	str	r3, [r4, #24]
 800abee:	6923      	ldr	r3, [r4, #16]
 800abf0:	b943      	cbnz	r3, 800ac04 <__swsetup_r+0xa8>
 800abf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800abf6:	d1c4      	bne.n	800ab82 <__swsetup_r+0x26>
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	0781      	lsls	r1, r0, #30
 800abfc:	bf58      	it	pl
 800abfe:	6963      	ldrpl	r3, [r4, #20]
 800ac00:	60a3      	str	r3, [r4, #8]
 800ac02:	e7f4      	b.n	800abee <__swsetup_r+0x92>
 800ac04:	2000      	movs	r0, #0
 800ac06:	e7f7      	b.n	800abf8 <__swsetup_r+0x9c>
 800ac08:	2000007c 	.word	0x2000007c

0800ac0c <_raise_r>:
 800ac0c:	291f      	cmp	r1, #31
 800ac0e:	b538      	push	{r3, r4, r5, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	d904      	bls.n	800ac20 <_raise_r+0x14>
 800ac16:	2316      	movs	r3, #22
 800ac18:	6003      	str	r3, [r0, #0]
 800ac1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac22:	b112      	cbz	r2, 800ac2a <_raise_r+0x1e>
 800ac24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac28:	b94b      	cbnz	r3, 800ac3e <_raise_r+0x32>
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f000 f830 	bl	800ac90 <_getpid_r>
 800ac30:	462a      	mov	r2, r5
 800ac32:	4601      	mov	r1, r0
 800ac34:	4620      	mov	r0, r4
 800ac36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac3a:	f000 b817 	b.w	800ac6c <_kill_r>
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d00a      	beq.n	800ac58 <_raise_r+0x4c>
 800ac42:	1c59      	adds	r1, r3, #1
 800ac44:	d103      	bne.n	800ac4e <_raise_r+0x42>
 800ac46:	2316      	movs	r3, #22
 800ac48:	6003      	str	r3, [r0, #0]
 800ac4a:	2001      	movs	r0, #1
 800ac4c:	e7e7      	b.n	800ac1e <_raise_r+0x12>
 800ac4e:	2400      	movs	r4, #0
 800ac50:	4628      	mov	r0, r5
 800ac52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac56:	4798      	blx	r3
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e7e0      	b.n	800ac1e <_raise_r+0x12>

0800ac5c <raise>:
 800ac5c:	4b02      	ldr	r3, [pc, #8]	; (800ac68 <raise+0xc>)
 800ac5e:	4601      	mov	r1, r0
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	f7ff bfd3 	b.w	800ac0c <_raise_r>
 800ac66:	bf00      	nop
 800ac68:	2000007c 	.word	0x2000007c

0800ac6c <_kill_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4d06      	ldr	r5, [pc, #24]	; (800ac8c <_kill_r+0x20>)
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	4611      	mov	r1, r2
 800ac78:	602b      	str	r3, [r5, #0]
 800ac7a:	f7f6 fc41 	bl	8001500 <_kill>
 800ac7e:	1c43      	adds	r3, r0, #1
 800ac80:	d102      	bne.n	800ac88 <_kill_r+0x1c>
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	b103      	cbz	r3, 800ac88 <_kill_r+0x1c>
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	bd38      	pop	{r3, r4, r5, pc}
 800ac8a:	bf00      	nop
 800ac8c:	200005e0 	.word	0x200005e0

0800ac90 <_getpid_r>:
 800ac90:	f7f6 bc2f 	b.w	80014f2 <_getpid>

0800ac94 <__swhatbuf_r>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	460c      	mov	r4, r1
 800ac98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9c:	4615      	mov	r5, r2
 800ac9e:	2900      	cmp	r1, #0
 800aca0:	461e      	mov	r6, r3
 800aca2:	b096      	sub	sp, #88	; 0x58
 800aca4:	da0c      	bge.n	800acc0 <__swhatbuf_r+0x2c>
 800aca6:	89a3      	ldrh	r3, [r4, #12]
 800aca8:	2100      	movs	r1, #0
 800acaa:	f013 0f80 	tst.w	r3, #128	; 0x80
 800acae:	bf0c      	ite	eq
 800acb0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800acb4:	2340      	movne	r3, #64	; 0x40
 800acb6:	2000      	movs	r0, #0
 800acb8:	6031      	str	r1, [r6, #0]
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	b016      	add	sp, #88	; 0x58
 800acbe:	bd70      	pop	{r4, r5, r6, pc}
 800acc0:	466a      	mov	r2, sp
 800acc2:	f000 f849 	bl	800ad58 <_fstat_r>
 800acc6:	2800      	cmp	r0, #0
 800acc8:	dbed      	blt.n	800aca6 <__swhatbuf_r+0x12>
 800acca:	9901      	ldr	r1, [sp, #4]
 800accc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800acd0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800acd4:	4259      	negs	r1, r3
 800acd6:	4159      	adcs	r1, r3
 800acd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acdc:	e7eb      	b.n	800acb6 <__swhatbuf_r+0x22>

0800acde <__smakebuf_r>:
 800acde:	898b      	ldrh	r3, [r1, #12]
 800ace0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ace2:	079d      	lsls	r5, r3, #30
 800ace4:	4606      	mov	r6, r0
 800ace6:	460c      	mov	r4, r1
 800ace8:	d507      	bpl.n	800acfa <__smakebuf_r+0x1c>
 800acea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800acee:	6023      	str	r3, [r4, #0]
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	2301      	movs	r3, #1
 800acf4:	6163      	str	r3, [r4, #20]
 800acf6:	b002      	add	sp, #8
 800acf8:	bd70      	pop	{r4, r5, r6, pc}
 800acfa:	466a      	mov	r2, sp
 800acfc:	ab01      	add	r3, sp, #4
 800acfe:	f7ff ffc9 	bl	800ac94 <__swhatbuf_r>
 800ad02:	9900      	ldr	r1, [sp, #0]
 800ad04:	4605      	mov	r5, r0
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7fe feca 	bl	8009aa0 <_malloc_r>
 800ad0c:	b948      	cbnz	r0, 800ad22 <__smakebuf_r+0x44>
 800ad0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad12:	059a      	lsls	r2, r3, #22
 800ad14:	d4ef      	bmi.n	800acf6 <__smakebuf_r+0x18>
 800ad16:	f023 0303 	bic.w	r3, r3, #3
 800ad1a:	f043 0302 	orr.w	r3, r3, #2
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	e7e3      	b.n	800acea <__smakebuf_r+0xc>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	6020      	str	r0, [r4, #0]
 800ad26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad2a:	81a3      	strh	r3, [r4, #12]
 800ad2c:	9b00      	ldr	r3, [sp, #0]
 800ad2e:	6120      	str	r0, [r4, #16]
 800ad30:	6163      	str	r3, [r4, #20]
 800ad32:	9b01      	ldr	r3, [sp, #4]
 800ad34:	b15b      	cbz	r3, 800ad4e <__smakebuf_r+0x70>
 800ad36:	4630      	mov	r0, r6
 800ad38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad3c:	f000 f81e 	bl	800ad7c <_isatty_r>
 800ad40:	b128      	cbz	r0, 800ad4e <__smakebuf_r+0x70>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	f023 0303 	bic.w	r3, r3, #3
 800ad48:	f043 0301 	orr.w	r3, r3, #1
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	431d      	orrs	r5, r3
 800ad52:	81a5      	strh	r5, [r4, #12]
 800ad54:	e7cf      	b.n	800acf6 <__smakebuf_r+0x18>
	...

0800ad58 <_fstat_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	4d06      	ldr	r5, [pc, #24]	; (800ad78 <_fstat_r+0x20>)
 800ad5e:	4604      	mov	r4, r0
 800ad60:	4608      	mov	r0, r1
 800ad62:	4611      	mov	r1, r2
 800ad64:	602b      	str	r3, [r5, #0]
 800ad66:	f7f6 fc29 	bl	80015bc <_fstat>
 800ad6a:	1c43      	adds	r3, r0, #1
 800ad6c:	d102      	bne.n	800ad74 <_fstat_r+0x1c>
 800ad6e:	682b      	ldr	r3, [r5, #0]
 800ad70:	b103      	cbz	r3, 800ad74 <_fstat_r+0x1c>
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	bd38      	pop	{r3, r4, r5, pc}
 800ad76:	bf00      	nop
 800ad78:	200005e0 	.word	0x200005e0

0800ad7c <_isatty_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	2300      	movs	r3, #0
 800ad80:	4d05      	ldr	r5, [pc, #20]	; (800ad98 <_isatty_r+0x1c>)
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7f6 fc27 	bl	80015da <_isatty>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_isatty_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_isatty_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	200005e0 	.word	0x200005e0

0800ad9c <log>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	4604      	mov	r4, r0
 800ada0:	460d      	mov	r5, r1
 800ada2:	f000 f835 	bl	800ae10 <__ieee754_log>
 800ada6:	4622      	mov	r2, r4
 800ada8:	4606      	mov	r6, r0
 800adaa:	460f      	mov	r7, r1
 800adac:	462b      	mov	r3, r5
 800adae:	4620      	mov	r0, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7f5 fe2b 	bl	8000a0c <__aeabi_dcmpun>
 800adb6:	b998      	cbnz	r0, 800ade0 <log+0x44>
 800adb8:	2200      	movs	r2, #0
 800adba:	2300      	movs	r3, #0
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 fe1a 	bl	80009f8 <__aeabi_dcmpgt>
 800adc4:	b960      	cbnz	r0, 800ade0 <log+0x44>
 800adc6:	2200      	movs	r2, #0
 800adc8:	2300      	movs	r3, #0
 800adca:	4620      	mov	r0, r4
 800adcc:	4629      	mov	r1, r5
 800adce:	f7f5 fdeb 	bl	80009a8 <__aeabi_dcmpeq>
 800add2:	b140      	cbz	r0, 800ade6 <log+0x4a>
 800add4:	f7fd ff4a 	bl	8008c6c <__errno>
 800add8:	2322      	movs	r3, #34	; 0x22
 800adda:	2600      	movs	r6, #0
 800addc:	4f06      	ldr	r7, [pc, #24]	; (800adf8 <log+0x5c>)
 800adde:	6003      	str	r3, [r0, #0]
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ade6:	f7fd ff41 	bl	8008c6c <__errno>
 800adea:	2321      	movs	r3, #33	; 0x21
 800adec:	6003      	str	r3, [r0, #0]
 800adee:	4803      	ldr	r0, [pc, #12]	; (800adfc <log+0x60>)
 800adf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800adf4:	f000 b804 	b.w	800ae00 <nan>
 800adf8:	fff00000 	.word	0xfff00000
 800adfc:	0800b5d2 	.word	0x0800b5d2

0800ae00 <nan>:
 800ae00:	2000      	movs	r0, #0
 800ae02:	4901      	ldr	r1, [pc, #4]	; (800ae08 <nan+0x8>)
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	7ff80000 	.word	0x7ff80000
 800ae0c:	00000000 	.word	0x00000000

0800ae10 <__ieee754_log>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	460d      	mov	r5, r1
 800ae1e:	b087      	sub	sp, #28
 800ae20:	da24      	bge.n	800ae6c <__ieee754_log+0x5c>
 800ae22:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ae26:	4304      	orrs	r4, r0
 800ae28:	d108      	bne.n	800ae3c <__ieee754_log+0x2c>
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	2000      	movs	r0, #0
 800ae30:	49cb      	ldr	r1, [pc, #812]	; (800b160 <__ieee754_log+0x350>)
 800ae32:	f7f5 fc7b 	bl	800072c <__aeabi_ddiv>
 800ae36:	b007      	add	sp, #28
 800ae38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3c:	2900      	cmp	r1, #0
 800ae3e:	da04      	bge.n	800ae4a <__ieee754_log+0x3a>
 800ae40:	f7f5 f992 	bl	8000168 <__aeabi_dsub>
 800ae44:	2200      	movs	r2, #0
 800ae46:	2300      	movs	r3, #0
 800ae48:	e7f3      	b.n	800ae32 <__ieee754_log+0x22>
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	4bc5      	ldr	r3, [pc, #788]	; (800b164 <__ieee754_log+0x354>)
 800ae4e:	f7f5 fb43 	bl	80004d8 <__aeabi_dmul>
 800ae52:	460b      	mov	r3, r1
 800ae54:	460d      	mov	r5, r1
 800ae56:	4602      	mov	r2, r0
 800ae58:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ae5c:	48c2      	ldr	r0, [pc, #776]	; (800b168 <__ieee754_log+0x358>)
 800ae5e:	4285      	cmp	r5, r0
 800ae60:	dd06      	ble.n	800ae70 <__ieee754_log+0x60>
 800ae62:	4610      	mov	r0, r2
 800ae64:	4619      	mov	r1, r3
 800ae66:	f7f5 f981 	bl	800016c <__adddf3>
 800ae6a:	e7e4      	b.n	800ae36 <__ieee754_log+0x26>
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	e7f5      	b.n	800ae5c <__ieee754_log+0x4c>
 800ae70:	152c      	asrs	r4, r5, #20
 800ae72:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ae76:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ae7a:	440c      	add	r4, r1
 800ae7c:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800ae80:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800ae84:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800ae88:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800ae8c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800ae90:	ea41 0305 	orr.w	r3, r1, r5
 800ae94:	4610      	mov	r0, r2
 800ae96:	4619      	mov	r1, r3
 800ae98:	2200      	movs	r2, #0
 800ae9a:	4bb4      	ldr	r3, [pc, #720]	; (800b16c <__ieee754_log+0x35c>)
 800ae9c:	f7f5 f964 	bl	8000168 <__aeabi_dsub>
 800aea0:	1cab      	adds	r3, r5, #2
 800aea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	4682      	mov	sl, r0
 800aeaa:	468b      	mov	fp, r1
 800aeac:	f04f 0200 	mov.w	r2, #0
 800aeb0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800aeb4:	dc53      	bgt.n	800af5e <__ieee754_log+0x14e>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f7f5 fd76 	bl	80009a8 <__aeabi_dcmpeq>
 800aebc:	b1d0      	cbz	r0, 800aef4 <__ieee754_log+0xe4>
 800aebe:	2c00      	cmp	r4, #0
 800aec0:	f000 8122 	beq.w	800b108 <__ieee754_log+0x2f8>
 800aec4:	4620      	mov	r0, r4
 800aec6:	f7f5 fa9d 	bl	8000404 <__aeabi_i2d>
 800aeca:	a391      	add	r3, pc, #580	; (adr r3, 800b110 <__ieee754_log+0x300>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	4606      	mov	r6, r0
 800aed2:	460f      	mov	r7, r1
 800aed4:	f7f5 fb00 	bl	80004d8 <__aeabi_dmul>
 800aed8:	a38f      	add	r3, pc, #572	; (adr r3, 800b118 <__ieee754_log+0x308>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	4604      	mov	r4, r0
 800aee0:	460d      	mov	r5, r1
 800aee2:	4630      	mov	r0, r6
 800aee4:	4639      	mov	r1, r7
 800aee6:	f7f5 faf7 	bl	80004d8 <__aeabi_dmul>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4620      	mov	r0, r4
 800aef0:	4629      	mov	r1, r5
 800aef2:	e7b8      	b.n	800ae66 <__ieee754_log+0x56>
 800aef4:	a38a      	add	r3, pc, #552	; (adr r3, 800b120 <__ieee754_log+0x310>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	4650      	mov	r0, sl
 800aefc:	4659      	mov	r1, fp
 800aefe:	f7f5 faeb 	bl	80004d8 <__aeabi_dmul>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	2000      	movs	r0, #0
 800af08:	4999      	ldr	r1, [pc, #612]	; (800b170 <__ieee754_log+0x360>)
 800af0a:	f7f5 f92d 	bl	8000168 <__aeabi_dsub>
 800af0e:	4652      	mov	r2, sl
 800af10:	4606      	mov	r6, r0
 800af12:	460f      	mov	r7, r1
 800af14:	465b      	mov	r3, fp
 800af16:	4650      	mov	r0, sl
 800af18:	4659      	mov	r1, fp
 800af1a:	f7f5 fadd 	bl	80004d8 <__aeabi_dmul>
 800af1e:	4602      	mov	r2, r0
 800af20:	460b      	mov	r3, r1
 800af22:	4630      	mov	r0, r6
 800af24:	4639      	mov	r1, r7
 800af26:	f7f5 fad7 	bl	80004d8 <__aeabi_dmul>
 800af2a:	4606      	mov	r6, r0
 800af2c:	460f      	mov	r7, r1
 800af2e:	b914      	cbnz	r4, 800af36 <__ieee754_log+0x126>
 800af30:	4632      	mov	r2, r6
 800af32:	463b      	mov	r3, r7
 800af34:	e0a2      	b.n	800b07c <__ieee754_log+0x26c>
 800af36:	4620      	mov	r0, r4
 800af38:	f7f5 fa64 	bl	8000404 <__aeabi_i2d>
 800af3c:	a374      	add	r3, pc, #464	; (adr r3, 800b110 <__ieee754_log+0x300>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	4680      	mov	r8, r0
 800af44:	4689      	mov	r9, r1
 800af46:	f7f5 fac7 	bl	80004d8 <__aeabi_dmul>
 800af4a:	a373      	add	r3, pc, #460	; (adr r3, 800b118 <__ieee754_log+0x308>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	4604      	mov	r4, r0
 800af52:	460d      	mov	r5, r1
 800af54:	4640      	mov	r0, r8
 800af56:	4649      	mov	r1, r9
 800af58:	f7f5 fabe 	bl	80004d8 <__aeabi_dmul>
 800af5c:	e0a7      	b.n	800b0ae <__ieee754_log+0x29e>
 800af5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af62:	f7f5 f903 	bl	800016c <__adddf3>
 800af66:	4602      	mov	r2, r0
 800af68:	460b      	mov	r3, r1
 800af6a:	4650      	mov	r0, sl
 800af6c:	4659      	mov	r1, fp
 800af6e:	f7f5 fbdd 	bl	800072c <__aeabi_ddiv>
 800af72:	e9cd 0100 	strd	r0, r1, [sp]
 800af76:	4620      	mov	r0, r4
 800af78:	f7f5 fa44 	bl	8000404 <__aeabi_i2d>
 800af7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af84:	4610      	mov	r0, r2
 800af86:	4619      	mov	r1, r3
 800af88:	f7f5 faa6 	bl	80004d8 <__aeabi_dmul>
 800af8c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800af90:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800af94:	4602      	mov	r2, r0
 800af96:	9305      	str	r3, [sp, #20]
 800af98:	460b      	mov	r3, r1
 800af9a:	4606      	mov	r6, r0
 800af9c:	460f      	mov	r7, r1
 800af9e:	f7f5 fa9b 	bl	80004d8 <__aeabi_dmul>
 800afa2:	a361      	add	r3, pc, #388	; (adr r3, 800b128 <__ieee754_log+0x318>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	4680      	mov	r8, r0
 800afaa:	4689      	mov	r9, r1
 800afac:	f7f5 fa94 	bl	80004d8 <__aeabi_dmul>
 800afb0:	a35f      	add	r3, pc, #380	; (adr r3, 800b130 <__ieee754_log+0x320>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f7f5 f8d9 	bl	800016c <__adddf3>
 800afba:	4642      	mov	r2, r8
 800afbc:	464b      	mov	r3, r9
 800afbe:	f7f5 fa8b 	bl	80004d8 <__aeabi_dmul>
 800afc2:	a35d      	add	r3, pc, #372	; (adr r3, 800b138 <__ieee754_log+0x328>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 f8d0 	bl	800016c <__adddf3>
 800afcc:	4642      	mov	r2, r8
 800afce:	464b      	mov	r3, r9
 800afd0:	f7f5 fa82 	bl	80004d8 <__aeabi_dmul>
 800afd4:	a35a      	add	r3, pc, #360	; (adr r3, 800b140 <__ieee754_log+0x330>)
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	f7f5 f8c7 	bl	800016c <__adddf3>
 800afde:	4632      	mov	r2, r6
 800afe0:	463b      	mov	r3, r7
 800afe2:	f7f5 fa79 	bl	80004d8 <__aeabi_dmul>
 800afe6:	a358      	add	r3, pc, #352	; (adr r3, 800b148 <__ieee754_log+0x338>)
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	4606      	mov	r6, r0
 800afee:	460f      	mov	r7, r1
 800aff0:	4640      	mov	r0, r8
 800aff2:	4649      	mov	r1, r9
 800aff4:	f7f5 fa70 	bl	80004d8 <__aeabi_dmul>
 800aff8:	a355      	add	r3, pc, #340	; (adr r3, 800b150 <__ieee754_log+0x340>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	f7f5 f8b5 	bl	800016c <__adddf3>
 800b002:	4642      	mov	r2, r8
 800b004:	464b      	mov	r3, r9
 800b006:	f7f5 fa67 	bl	80004d8 <__aeabi_dmul>
 800b00a:	a353      	add	r3, pc, #332	; (adr r3, 800b158 <__ieee754_log+0x348>)
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f7f5 f8ac 	bl	800016c <__adddf3>
 800b014:	4642      	mov	r2, r8
 800b016:	464b      	mov	r3, r9
 800b018:	f7f5 fa5e 	bl	80004d8 <__aeabi_dmul>
 800b01c:	460b      	mov	r3, r1
 800b01e:	4602      	mov	r2, r0
 800b020:	4639      	mov	r1, r7
 800b022:	4630      	mov	r0, r6
 800b024:	f7f5 f8a2 	bl	800016c <__adddf3>
 800b028:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b02c:	9b05      	ldr	r3, [sp, #20]
 800b02e:	3551      	adds	r5, #81	; 0x51
 800b030:	431d      	orrs	r5, r3
 800b032:	2d00      	cmp	r5, #0
 800b034:	4680      	mov	r8, r0
 800b036:	4689      	mov	r9, r1
 800b038:	dd48      	ble.n	800b0cc <__ieee754_log+0x2bc>
 800b03a:	2200      	movs	r2, #0
 800b03c:	4b4c      	ldr	r3, [pc, #304]	; (800b170 <__ieee754_log+0x360>)
 800b03e:	4650      	mov	r0, sl
 800b040:	4659      	mov	r1, fp
 800b042:	f7f5 fa49 	bl	80004d8 <__aeabi_dmul>
 800b046:	4652      	mov	r2, sl
 800b048:	465b      	mov	r3, fp
 800b04a:	f7f5 fa45 	bl	80004d8 <__aeabi_dmul>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4606      	mov	r6, r0
 800b054:	460f      	mov	r7, r1
 800b056:	4640      	mov	r0, r8
 800b058:	4649      	mov	r1, r9
 800b05a:	f7f5 f887 	bl	800016c <__adddf3>
 800b05e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b062:	f7f5 fa39 	bl	80004d8 <__aeabi_dmul>
 800b066:	4680      	mov	r8, r0
 800b068:	4689      	mov	r9, r1
 800b06a:	b964      	cbnz	r4, 800b086 <__ieee754_log+0x276>
 800b06c:	4602      	mov	r2, r0
 800b06e:	460b      	mov	r3, r1
 800b070:	4630      	mov	r0, r6
 800b072:	4639      	mov	r1, r7
 800b074:	f7f5 f878 	bl	8000168 <__aeabi_dsub>
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	4650      	mov	r0, sl
 800b07e:	4659      	mov	r1, fp
 800b080:	f7f5 f872 	bl	8000168 <__aeabi_dsub>
 800b084:	e6d7      	b.n	800ae36 <__ieee754_log+0x26>
 800b086:	a322      	add	r3, pc, #136	; (adr r3, 800b110 <__ieee754_log+0x300>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b090:	f7f5 fa22 	bl	80004d8 <__aeabi_dmul>
 800b094:	a320      	add	r3, pc, #128	; (adr r3, 800b118 <__ieee754_log+0x308>)
 800b096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09a:	4604      	mov	r4, r0
 800b09c:	460d      	mov	r5, r1
 800b09e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0a2:	f7f5 fa19 	bl	80004d8 <__aeabi_dmul>
 800b0a6:	4642      	mov	r2, r8
 800b0a8:	464b      	mov	r3, r9
 800b0aa:	f7f5 f85f 	bl	800016c <__adddf3>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	f7f5 f857 	bl	8000168 <__aeabi_dsub>
 800b0ba:	4652      	mov	r2, sl
 800b0bc:	465b      	mov	r3, fp
 800b0be:	f7f5 f853 	bl	8000168 <__aeabi_dsub>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	e7d9      	b.n	800b080 <__ieee754_log+0x270>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4650      	mov	r0, sl
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	f7f5 f848 	bl	8000168 <__aeabi_dsub>
 800b0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0dc:	f7f5 f9fc 	bl	80004d8 <__aeabi_dmul>
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	460f      	mov	r7, r1
 800b0e4:	2c00      	cmp	r4, #0
 800b0e6:	f43f af23 	beq.w	800af30 <__ieee754_log+0x120>
 800b0ea:	a309      	add	r3, pc, #36	; (adr r3, 800b110 <__ieee754_log+0x300>)
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0f4:	f7f5 f9f0 	bl	80004d8 <__aeabi_dmul>
 800b0f8:	a307      	add	r3, pc, #28	; (adr r3, 800b118 <__ieee754_log+0x308>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b106:	e727      	b.n	800af58 <__ieee754_log+0x148>
 800b108:	2000      	movs	r0, #0
 800b10a:	2100      	movs	r1, #0
 800b10c:	e693      	b.n	800ae36 <__ieee754_log+0x26>
 800b10e:	bf00      	nop
 800b110:	fee00000 	.word	0xfee00000
 800b114:	3fe62e42 	.word	0x3fe62e42
 800b118:	35793c76 	.word	0x35793c76
 800b11c:	3dea39ef 	.word	0x3dea39ef
 800b120:	55555555 	.word	0x55555555
 800b124:	3fd55555 	.word	0x3fd55555
 800b128:	df3e5244 	.word	0xdf3e5244
 800b12c:	3fc2f112 	.word	0x3fc2f112
 800b130:	96cb03de 	.word	0x96cb03de
 800b134:	3fc74664 	.word	0x3fc74664
 800b138:	94229359 	.word	0x94229359
 800b13c:	3fd24924 	.word	0x3fd24924
 800b140:	55555593 	.word	0x55555593
 800b144:	3fe55555 	.word	0x3fe55555
 800b148:	d078c69f 	.word	0xd078c69f
 800b14c:	3fc39a09 	.word	0x3fc39a09
 800b150:	1d8e78af 	.word	0x1d8e78af
 800b154:	3fcc71c5 	.word	0x3fcc71c5
 800b158:	9997fa04 	.word	0x9997fa04
 800b15c:	3fd99999 	.word	0x3fd99999
 800b160:	c3500000 	.word	0xc3500000
 800b164:	43500000 	.word	0x43500000
 800b168:	7fefffff 	.word	0x7fefffff
 800b16c:	3ff00000 	.word	0x3ff00000
 800b170:	3fe00000 	.word	0x3fe00000

0800b174 <_init>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	bf00      	nop
 800b178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b17a:	bc08      	pop	{r3}
 800b17c:	469e      	mov	lr, r3
 800b17e:	4770      	bx	lr

0800b180 <_fini>:
 800b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b182:	bf00      	nop
 800b184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b186:	bc08      	pop	{r3}
 800b188:	469e      	mov	lr, r3
 800b18a:	4770      	bx	lr
